{"version":3,"file":"ui.858f8ece88fc793ad89c.bundle.js","mappings":"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","sources":["webpack://webao/./node_modules/golden-layout/src/ts/errors/internal-error.ts","webpack://webao/./node_modules/golden-layout/src/ts/utils/config-minifier.ts","webpack://webao/./node_modules/golden-layout/src/ts/utils/style-constants.ts","webpack://webao/./node_modules/golden-layout/src/ts/utils/types.ts","webpack://webao/./node_modules/golden-layout/src/ts/config/resolved-config.ts","webpack://webao/./node_modules/golden-layout/src/ts/utils/i18n-strings.ts","webpack://webao/./node_modules/golden-layout/src/ts/utils/utils.ts","webpack://webao/./node_modules/golden-layout/src/ts/errors/external-error.ts","webpack://webao/./node_modules/golden-layout/src/ts/config/config.ts","webpack://webao/./node_modules/golden-layout/src/ts/utils/event-emitter.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/browser-popout.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/header-button.ts","webpack://webao/./node_modules/golden-layout/src/ts/utils/drag-listener.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/tab.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/tabs-container.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/header.ts","webpack://webao/./node_modules/golden-layout/src/ts/container/component-container.ts","webpack://webao/./node_modules/golden-layout/src/ts/items/content-item.ts","webpack://webao/./node_modules/golden-layout/src/ts/items/component-item.ts","webpack://webao/./node_modules/golden-layout/src/ts/items/component-parentable-item.ts","webpack://webao/./node_modules/golden-layout/src/ts/items/stack.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/drag-proxy.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/splitter.ts","webpack://webao/./node_modules/golden-layout/src/ts/items/row-or-column.ts","webpack://webao/./node_modules/golden-layout/src/ts/items/ground-item.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/drag-source.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/drop-target-indicator.ts","webpack://webao/./node_modules/golden-layout/src/ts/controls/transition-indicator.ts","webpack://webao/./node_modules/golden-layout/src/ts/utils/event-hub.ts","webpack://webao/./node_modules/golden-layout/src/ts/layout-manager.ts","webpack://webao/./node_modules/golden-layout/src/ts/virtual-layout.ts","webpack://webao/./webAO/ui.js","webpack://webao/./node_modules/golden-layout/src/ts/golden-layout.ts"],"sourcesContent":["/** @internal */\nabstract class InternalError extends Error {\n    constructor(type: string, code: string, message?: string) {\n        super(`${type}: ${code}${message === undefined ? '' : ': ' + message}`)\n    }\n}\n\n/** @internal */\nexport class AssertError extends InternalError {\n    constructor(code: string, message?: string) {\n        super('Assert', code, message)\n    }\n}\n\n/** @internal */\nexport class UnreachableCaseError extends InternalError {\n    constructor(code: string, variableValue: never, message?: string) {\n        super('UnreachableCase', code, `${variableValue}${message === undefined ? '' : ': ' + message}`)\n    }\n}\n\n/** @internal */\nexport class UnexpectedNullError extends InternalError {\n    constructor(code: string, message?: string) {\n        super('UnexpectedNull', code, message)\n    }\n}\n\n/** @internal */\nexport class UnexpectedUndefinedError extends InternalError {\n    constructor(code: string, message?: string) {\n        super('UnexpectedUndefined', code, message)\n    }\n}\n","/**\n * Minifies and unminifies configs by replacing frequent keys\n * and values with one letter substitutes. Config options must\n * retain array position/index, add new options at the end.\n * @internal\n*/\n\nexport namespace ConfigMinifier {\n\n    export type YY = 'id' | 'title';\n    export const enum XX {\n        id = 'id'\n    }\n    const keys: readonly string[] = [\n        'settings',\n        'hasHeaders',\n        'constrainDragToContainer',\n        'selectionEnabled',\n        'dimensions',\n        'borderWidth',\n        'minItemHeight',\n        'minItemWidth',\n        'headerHeight',\n        'dragProxyWidth',\n        'dragProxyHeight',\n        'labels',\n        'close',\n        'maximise',\n        'minimise',\n        'popout',\n        'content',\n        'componentType',\n        'componentState',\n        'id',\n        'width',\n        'type',\n        'height',\n        'isClosable',\n        'title',\n        'popoutWholeStack',\n        'openPopouts',\n        'parentId',\n        'activeItemIndex',\n        'reorderEnabled',\n        'borderGrabWidth',\n\n\n\n\n        //Maximum 36 entries, do not cross this line!\n    ];\n\n    const values: readonly (boolean | string)[] = [\n        true,\n        false,\n        'row',\n        'column',\n        'stack',\n        'component',\n        'close',\n        'maximise',\n        'minimise',\n        'open in new window'\n    ];\n\n    export function checkInitialise(): void {\n        if (keys.length > 36) {\n            throw new Error('Too many keys in config minifier map');\n        }\n    }\n\n    export function translateObject(from: Record<string, unknown>, minify: boolean): Record<string, unknown> {\n        const to: Record<string, unknown> = {};\n        for (const key in from) {\n            if (from.hasOwnProperty(key)) { // In case something has extended Object prototypes\n                let translatedKey: string;\n                if (minify) {\n                    translatedKey = minifyKey(key);\n                } else {\n                    translatedKey = unminifyKey(key);\n                }\n\n                const fromValue = from[key];\n                to[translatedKey] = translateValue(fromValue, minify);\n            }\n        }\n\n        return to;\n    }\n\n    function translateArray(from: unknown[], minify: boolean) {\n        const length = from.length;\n        const to = new Array<unknown>(length);\n        for (let i = 0; i < length; i++) {\n            // In original code, array indices were numbers and not translated\n            const fromValue = from[i];\n            to[i] = translateValue(fromValue, minify);\n        }\n        return to;\n    }\n\n    function translateValue(from: unknown, minify: boolean) {\n        if (typeof from === 'object') {\n            if (from === null) {\n                return null;\n            } else {\n                if (Array.isArray(from)) {\n                    return translateArray(from, minify);\n                } else {\n                    return translateObject(from as Record<string, unknown>, minify);\n                }\n            }\n        } else {\n            if (minify) {\n                return minifyValue(from);\n            } else {\n                return unminifyValue(from);\n            }\n        }\n    }\n\n    function minifyKey(value: string) {\n        /**\n         * If a value actually is a single character, prefix it\n         * with ___ to avoid mistaking it for a minification code\n         */\n        if (typeof value === 'string' && value.length === 1) {\n            return '___' + value;\n        }\n    \n        const index = indexOfKey(value);\n    \n        /**\n         * value not found in the dictionary, return it unmodified\n         */\n        if (index === -1) {\n            return value;\n    \n            /**\n             * value found in dictionary, return its base36 counterpart\n             */\n        } else {\n            return index.toString(36);\n        }\n    }\n\n    function unminifyKey(key: string) {\n        /**\n         * value is a single character. Assume that it's a translation\n         * and return the original value from the dictionary\n         */\n        if (key.length === 1) {\n            return keys[parseInt(key, 36)];\n        }\n    \n        /**\n         * value originally was a single character and was prefixed with ___\n         * to avoid mistaking it for a translation. Remove the prefix\n         * and return the original character\n         */\n        if (key.substr(0, 3) === '___') {\n            return key[3];\n        }\n        /**\n         * value was not minified\n         */\n        return key;\n    }\n\n    function minifyValue(value: unknown) {\n        /**\n         * If a value actually is a single character, prefix it\n         * with ___ to avoid mistaking it for a minification code\n         */\n        if (typeof value === 'string' && value.length === 1) {\n            return '___' + value;\n        }\n    \n        const index = indexOfValue(value);\n    \n        /**\n         * value not found in the dictionary, return it unmodified\n         */\n        if (index === -1) {\n            return value;\n    \n            /**\n             * value found in dictionary, return its base36 counterpart\n             */\n        } else {\n            return index.toString(36);\n        }\n    }\n\n    function unminifyValue(value: unknown) {\n        /**\n         * value is a single character. Assume that it's a translation\n         * and return the original value from the dictionary\n         */\n        if (typeof value === 'string' && value.length === 1) {\n            return values[parseInt(value, 36)];\n        }\n\n        /**\n         * value originally was a single character and was prefixed with ___\n         * to avoid mistaking it for a translation. Remove the prefix\n         * and return the original character\n         */\n        if (typeof value === 'string' && value.substr(0, 3) === '___') {\n            return value[3];\n        }\n        /**\n         * value was not minified\n         */\n        return value;\n    }\n\n    function indexOfKey(key: string) {\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] === key) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function indexOfValue(value: unknown) {\n        for (let i = 0; i < values.length; i++) {\n            if (values[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n","/** @public */\nexport namespace StyleConstants {\n    export const defaultComponentBaseZIndex = 'auto';\n    export const defaultComponentDragZIndex = '32';\n    export const defaultComponentStackMaximisedZIndex = '41';\n}\n","import { UnreachableCaseError } from '../errors/internal-error';\nimport { StyleConstants } from './style-constants';\n\n/** @internal */\nexport type WidthOrHeightPropertyName = 'width' | 'height';\n\n/** @internal */\nexport namespace WidthOrHeightPropertyName {\n    export const width = 'width';\n    export const height = 'height';\n}\n\n/** @internal */\nexport interface WidthAndHeight {\n    width: number;\n    height: number;\n}\n\n/** @internal */\nexport interface LeftAndTop {\n    left: number;\n    top: number;\n}\n\n/** @public */\nexport type Side = 'top' | 'left' | 'right' | 'bottom';\n/** @public */\nexport namespace Side {\n    export const top = 'top';\n    export const left = 'left';\n    export const right = 'right';\n    export const bottom = 'bottom';\n}\n\n/** @public */\nexport type LogicalZIndex = 'base' | 'drag' | 'stackMaximised';\n/** @public */\nexport namespace LogicalZIndex {\n    export const base = 'base';\n    export const drag = 'drag';\n    export const stackMaximised = 'stackMaximised';\n}\n\n/** @public */\nexport const LogicalZIndexToDefaultMap = {\n    base: StyleConstants.defaultComponentBaseZIndex,\n    drag: StyleConstants.defaultComponentDragZIndex,\n    stackMaximised: StyleConstants.defaultComponentStackMaximisedZIndex,\n}\n\n/** @internal */\nexport interface Rect {\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n}\n\n/** @internal */\nexport interface AreaLinkedRect {\n    x1: number, // left\n    x2: number, // nextLeft\n    y1: number, // top\n    y2: number, // nextTop\n}\n\n/** @public */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type JsonValue = string | number | boolean | null | Json | object | JsonValueArray;\n/** @public */\nexport interface Json {\n    [name: string]: JsonValue;\n}\n/** @public */\nexport type JsonValueArray = Array<JsonValue>\n/** @public */\nexport namespace JsonValue {\n    export function isJson(value: JsonValue): value is Json {\n        return isJsonObject(value);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    export function isJsonObject(value: JsonValue): value is Json | object {\n        return !Array.isArray(value) && value !== null && typeof value === 'object';\n    }\n}\n\n/** @public */\nexport type ItemType = 'ground' | 'row' | 'column' | 'stack' | 'component';\n\n/** @public */\nexport namespace ItemType {\n    export const ground = 'ground';\n    export const row = 'row';\n    export const column = 'column';\n    export const stack = 'stack';\n    export const component = 'component';\n}\n\n/** @public */\nexport type ResponsiveMode = 'none' | 'always' | 'onload';\n/** @public */\nexport namespace ResponsiveMode {\n    export const none = 'none';\n    export const always = 'always';\n    export const onload = 'onload';\n}\n\n/**\n * Length units which can specify the size of a Component Item\n * @public\n */\nexport type SizeUnit = 'px' | '%' | 'fr' | 'em';\n\n/** @public */\nexport enum SizeUnitEnum {\n    Pixel = 'px',\n    Percent = '%',\n    Fractional = 'fr',\n    Em = 'em',\n}\n\n/** @public */\nexport namespace SizeUnitEnum {\n    export function tryParse(value: string) {\n        switch (value) {\n            case SizeUnitEnum.Pixel: return SizeUnitEnum.Pixel;\n            case SizeUnitEnum.Percent: return SizeUnitEnum.Percent;\n            case SizeUnitEnum.Fractional: return SizeUnitEnum.Fractional;\n            case SizeUnitEnum.Em: return SizeUnitEnum.Em;\n            default: return undefined;\n        }\n    }\n\n    export function format(value: SizeUnitEnum) {\n        switch (value) {\n            case SizeUnitEnum.Pixel: return SizeUnitEnum.Pixel;\n            case SizeUnitEnum.Percent: return SizeUnitEnum.Percent;\n            case SizeUnitEnum.Fractional: return SizeUnitEnum.Fractional;\n            case SizeUnitEnum.Em: return SizeUnitEnum.Em;\n            default:\n                throw new UnreachableCaseError('SUEF44998', value);\n        }\n    }\n}\n","import { AssertError, UnreachableCaseError } from '../errors/internal-error';\nimport { ConfigMinifier } from '../utils/config-minifier';\nimport { ItemType, JsonValue, ResponsiveMode, Side, SizeUnitEnum } from '../utils/types';\nimport { deepExtendValue } from '../utils/utils';\n\n/** @public */\nexport interface ResolvedItemConfig {\n    // see ItemConfig for comments\n    readonly type: ItemType;\n    readonly content: readonly ResolvedItemConfig[];\n    readonly size: number;\n    readonly sizeUnit: SizeUnitEnum;\n    readonly minSize: number | undefined;\n    readonly minSizeUnit: SizeUnitEnum;\n    // id no longer specifies whether an Item is maximised.  This is now done by HeaderItemConfig.maximised\n    readonly id: string;\n    readonly isClosable: boolean;\n}\n\n/** @public */\nexport namespace ResolvedItemConfig {\n    export const defaults: ResolvedItemConfig = {\n        type: ItemType.ground, // not really default but need something\n        content: [],\n        size: 1,\n        sizeUnit: SizeUnitEnum.Fractional,\n        minSize: undefined,\n        minSizeUnit: SizeUnitEnum.Pixel,\n        id: '',\n        isClosable: true,\n    } as const;\n\n    /** Creates a copy of the original ResolvedItemConfig using an alternative content if specified */\n    export function createCopy(original: ResolvedItemConfig, content?: ResolvedItemConfig[]): ResolvedItemConfig {\n        switch (original.type) {\n            case ItemType.ground:\n            case ItemType.row:\n            case ItemType.column:\n                return ResolvedRowOrColumnItemConfig.createCopy(original as ResolvedRowOrColumnItemConfig,\n                    content as ResolvedRowOrColumnItemConfig.ChildItemConfig[]);\n\n            case ItemType.stack:\n                return ResolvedStackItemConfig.createCopy(original as ResolvedStackItemConfig, content as ResolvedComponentItemConfig[]);\n\n            case ItemType.component:\n                return ResolvedComponentItemConfig.createCopy(original as ResolvedComponentItemConfig);\n\n            default:\n                throw new UnreachableCaseError('CICC91354', original.type, 'Invalid Config Item type specified');\n        }\n    }\n\n    export function createDefault(type: ItemType): ResolvedItemConfig {\n        switch (type) {\n            case ItemType.ground:\n                throw new AssertError('CICCDR91562'); // Get default root from LayoutConfig\n            case ItemType.row:\n            case ItemType.column:\n                return ResolvedRowOrColumnItemConfig.createDefault(type);\n\n            case ItemType.stack:\n                return ResolvedStackItemConfig.createDefault();\n\n            case ItemType.component:\n                return ResolvedComponentItemConfig.createDefault();\n\n            default:\n                throw new UnreachableCaseError('CICCDD91563', type, 'Invalid Config Item type specified');\n        }\n    }\n\n    export function isComponentItem(itemConfig: ResolvedItemConfig): itemConfig is ResolvedComponentItemConfig {\n        return itemConfig.type === ItemType.component;\n    }\n\n    export function isStackItem(itemConfig: ResolvedItemConfig): itemConfig is ResolvedStackItemConfig {\n        return itemConfig.type === ItemType.stack;\n    }\n\n    /** @internal */\n    export function isGroundItem(itemConfig: ResolvedItemConfig): itemConfig is ResolvedGroundItemConfig {\n        return itemConfig.type === ItemType.ground;\n    }\n}\n\n// Stack or Component\n/** @public */\nexport interface ResolvedHeaderedItemConfig extends ResolvedItemConfig {\n    header: ResolvedHeaderedItemConfig.Header | undefined; // undefined means get header settings from LayoutConfig\n    readonly maximised: boolean;\n}\n\n/** @public */\nexport namespace ResolvedHeaderedItemConfig {\n    export const defaultMaximised = false;\n\n    export interface Header {\n        // undefined means get property value from LayoutConfig\n        readonly show: false | Side | undefined;\n        readonly popout: false | string | undefined;\n        readonly maximise: false | string | undefined;\n        readonly close: string | undefined;\n        readonly minimise: string | undefined;\n        readonly tabDropdown: false | string | undefined;\n    }\n\n    export namespace Header {\n        export function createCopy(original: Header | undefined, show?: false | Side): Header | undefined {\n            if (original === undefined) {\n                return undefined;\n            } else {\n                return {\n                    show: show ?? original.show,\n                    popout: original.popout,\n                    close: original.close,\n                    maximise: original.maximise,\n                    minimise: original.minimise,\n                    tabDropdown: original.tabDropdown,\n                }\n            }\n        }\n    }\n}\n\n/** @public */\nexport interface ResolvedStackItemConfig extends ResolvedHeaderedItemConfig {\n    readonly type: 'stack';\n    readonly content: ResolvedComponentItemConfig[];\n    /** The index of the active item in the Stack.  Only undefined if the Stack is empty. */\n    readonly activeItemIndex: number | undefined;\n}\n\n/** @public */\nexport namespace ResolvedStackItemConfig {\n    export const defaultActiveItemIndex = 0;\n\n    export function createCopy(original: ResolvedStackItemConfig, content?: ResolvedComponentItemConfig[]): ResolvedStackItemConfig {\n        const result: ResolvedStackItemConfig = {\n            type: original.type,\n            content: content !== undefined ? copyContent(content) : copyContent(original.content),\n            size: original.size,\n            sizeUnit: original.sizeUnit,\n            minSize: original.minSize,\n            minSizeUnit: original.minSizeUnit,\n            id: original.id,\n            maximised: original.maximised,\n            isClosable: original.isClosable,\n            activeItemIndex: original.activeItemIndex,\n            header: ResolvedHeaderedItemConfig.Header.createCopy(original.header),\n        }\n        return result;\n    }\n\n    export function copyContent(original: ResolvedComponentItemConfig[]): ResolvedComponentItemConfig[] {\n        const count = original.length;\n        const result = new Array<ResolvedComponentItemConfig>(count);\n        for (let i = 0; i < count; i++) {\n            result[i] = ResolvedItemConfig.createCopy(original[i]) as ResolvedComponentItemConfig;\n        }\n        return result;\n    }\n\n    export function createDefault(): ResolvedStackItemConfig {\n        const result: ResolvedStackItemConfig = {\n            type: ItemType.stack,\n            content: [],\n            size: ResolvedItemConfig.defaults.size,\n            sizeUnit: ResolvedItemConfig.defaults.sizeUnit,\n            minSize: ResolvedItemConfig.defaults.minSize,\n            minSizeUnit: ResolvedItemConfig.defaults.minSizeUnit,\n            id: ResolvedItemConfig.defaults.id,\n            maximised: ResolvedHeaderedItemConfig.defaultMaximised,\n            isClosable: ResolvedItemConfig.defaults.isClosable,\n            activeItemIndex: defaultActiveItemIndex,\n            header: undefined,\n        }\n        return result;\n    }\n}\n\n/** @public */\nexport interface ResolvedComponentItemConfig extends ResolvedHeaderedItemConfig {\n    // see ComponentItemConfig for comments\n    readonly type: 'component';\n    readonly content: [];\n    readonly title: string;\n    readonly reorderEnabled: boolean; // Takes precedence over LayoutConfig.reorderEnabled.\n    /**\n     * The name of the component as specified in layout.registerComponent. Mandatory if type is 'component'.\n     */\n    readonly componentType: JsonValue;\n    readonly componentState?: JsonValue;\n}\n\n/** @public */\nexport namespace ResolvedComponentItemConfig {\n    export const defaultReorderEnabled = true;\n\n    export function resolveComponentTypeName(itemConfig: ResolvedComponentItemConfig): string | undefined {\n        const componentType = itemConfig.componentType;\n        if (typeof componentType === 'string') {\n            return componentType;\n        } else {\n            return undefined;\n        }\n    }\n\n    export function createCopy(original: ResolvedComponentItemConfig): ResolvedComponentItemConfig {\n        const result: ResolvedComponentItemConfig = {\n            type: original.type,\n            content: [],\n            size: original.size,\n            sizeUnit: original.sizeUnit,\n            minSize: original.minSize,\n            minSizeUnit: original.minSizeUnit,\n            id: original.id,\n            maximised: original.maximised,\n            isClosable: original.isClosable,\n            reorderEnabled: original.reorderEnabled,\n            title: original.title,\n            header: ResolvedHeaderedItemConfig.Header.createCopy(original.header),\n            componentType: original.componentType,\n            componentState: deepExtendValue(undefined, original.componentState) as JsonValue,\n        }\n        return result;\n    }\n\n    export function createDefault(componentType: JsonValue = '', componentState?: JsonValue, title = ''): ResolvedComponentItemConfig {\n        const result: ResolvedComponentItemConfig = {\n            type: ItemType.component,\n            content: [],\n            size: ResolvedItemConfig.defaults.size,\n            sizeUnit: ResolvedItemConfig.defaults.sizeUnit,\n            minSize: ResolvedItemConfig.defaults.minSize,\n            minSizeUnit: ResolvedItemConfig.defaults.minSizeUnit,\n            id: ResolvedItemConfig.defaults.id,\n            maximised: ResolvedHeaderedItemConfig.defaultMaximised,\n            isClosable: ResolvedItemConfig.defaults.isClosable,\n            reorderEnabled: ResolvedComponentItemConfig.defaultReorderEnabled,\n            title,\n            header: undefined,\n            componentType,\n            componentState,\n        }\n        return result;\n    }\n\n    export function copyComponentType(componentType: JsonValue): JsonValue {\n        return deepExtendValue({}, componentType) as JsonValue\n    }\n}\n\n/** Base for Root or RowOrColumn ItemConfigs\n * @public\n */\nexport interface ResolvedRowOrColumnItemConfig extends ResolvedItemConfig {\n    readonly type: 'row' | 'column';\n    /** Note that RowOrColumn ResolvedItemConfig contents, can contain ComponentItem itemConfigs.  However\n     * when ContentItems are created, these ComponentItem itemConfigs will create a Stack with a child ComponentItem.\n     */\n    readonly content: readonly (ResolvedRowOrColumnItemConfig | ResolvedStackItemConfig | ResolvedComponentItemConfig)[];\n}\n\n/** @public */\nexport namespace ResolvedRowOrColumnItemConfig {\n    export type ChildItemConfig = ResolvedRowOrColumnItemConfig | ResolvedStackItemConfig | ResolvedComponentItemConfig;\n\n    export function isChildItemConfig(itemConfig: ResolvedItemConfig): itemConfig is ChildItemConfig {\n        switch (itemConfig.type) {\n            case ItemType.row:\n            case ItemType.column:\n            case ItemType.stack:\n            case ItemType.component:\n                return true;\n            case ItemType.ground:\n                return false;\n            default:\n                throw new UnreachableCaseError('CROCOSPCICIC13687', itemConfig.type);\n        }\n    }\n\n    export function createCopy(original: ResolvedRowOrColumnItemConfig, content?: ChildItemConfig[]): ResolvedRowOrColumnItemConfig {\n        const result: ResolvedRowOrColumnItemConfig = {\n            type: original.type,\n            content: content !== undefined ? copyContent(content) : copyContent(original.content),\n            size: original.size,\n            sizeUnit: original.sizeUnit,\n            minSize: original.minSize,\n            minSizeUnit: original.minSizeUnit,\n            id: original.id,\n            isClosable: original.isClosable,\n        }\n        return result;\n    }\n\n    export function copyContent(original: readonly ChildItemConfig[]): ChildItemConfig[] {\n        const count = original.length;\n        const result = new Array<ChildItemConfig>(count);\n        for (let i = 0; i < count; i++) {\n            result[i] = ResolvedItemConfig.createCopy(original[i]) as ChildItemConfig;\n        }\n        return result;\n    }\n\n    export function createDefault(type: 'row' | 'column'): ResolvedRowOrColumnItemConfig {\n        const result: ResolvedRowOrColumnItemConfig = {\n            type,\n            content: [],\n            size: ResolvedItemConfig.defaults.size,\n            sizeUnit: ResolvedItemConfig.defaults.sizeUnit,\n            minSize: ResolvedItemConfig.defaults.minSize,\n            minSizeUnit: ResolvedItemConfig.defaults.minSizeUnit,\n            id: ResolvedItemConfig.defaults.id,\n            isClosable: ResolvedItemConfig.defaults.isClosable,\n        }\n        return result;\n    }\n}\n\n/**\n * RootItemConfig is the topmost ResolvedItemConfig specified by the user.\n * Note that it does not have a corresponding contentItem.  It specifies the one and only child of the Ground ContentItem\n * Note that RootItemConfig can be an ComponentItem itemConfig.  However when the Ground ContentItem's child is created\n * a ComponentItem itemConfig will create a Stack with a child ComponentItem.\n * @public\n*/\nexport type ResolvedRootItemConfig = ResolvedRowOrColumnItemConfig | ResolvedStackItemConfig | ResolvedComponentItemConfig;\n\n/** @public */\nexport namespace ResolvedRootItemConfig {\n    export function createCopy(config: ResolvedRootItemConfig): ResolvedRootItemConfig {\n        return ResolvedItemConfig.createCopy(config) as ResolvedRootItemConfig;\n    }\n\n    export function isRootItemConfig(itemConfig: ResolvedItemConfig): itemConfig is ResolvedRootItemConfig {\n        switch (itemConfig.type) {\n            case ItemType.row:\n            case ItemType.column:\n            case ItemType.stack:\n            case ItemType.component:\n                return true;\n            case ItemType.ground:\n                return false;\n            default:\n                throw new UnreachableCaseError('CROCOSPCICIC13687', itemConfig.type);\n        }\n    }\n}\n\n/** @internal */\nexport interface ResolvedGroundItemConfig extends ResolvedItemConfig {\n    readonly type: 'ground';\n    readonly size: 100,\n    readonly sizeUnit: SizeUnitEnum.Percent,\n    readonly minSize: 0,\n    readonly minSizeUnit: SizeUnitEnum.Pixel,\n    readonly id: '',\n    readonly isClosable: false,\n    readonly title: '',\n    readonly reorderEnabled: false,\n}\n\n/** @internal */\nexport namespace ResolvedGroundItemConfig {\n    export function create(rootItemConfig: ResolvedRootItemConfig | undefined):ResolvedGroundItemConfig {\n        const content = rootItemConfig === undefined ? [] : [rootItemConfig];\n        return {\n            type: ItemType.ground,\n            content,\n            size: 100,\n            sizeUnit: SizeUnitEnum.Percent,\n            minSize: 0,\n            minSizeUnit: SizeUnitEnum.Pixel,\n            id: '',\n            isClosable: false,\n            title: '',\n            reorderEnabled: false,\n        }\n    }\n}\n\n/** @public */\nexport interface ResolvedLayoutConfig {\n    readonly root: ResolvedRootItemConfig | undefined;\n    readonly openPopouts: ResolvedPopoutLayoutConfig[];\n    readonly dimensions: ResolvedLayoutConfig.Dimensions;\n    readonly settings: ResolvedLayoutConfig.Settings;\n    readonly header: ResolvedLayoutConfig.Header;\n    readonly resolved: true,\n}\n\n/** @public */\nexport namespace ResolvedLayoutConfig {\n    export interface Settings {\n        // see Config.Settings for comments\n        readonly constrainDragToContainer: boolean;\n        readonly reorderEnabled: boolean; // also in ResolvedItemConfig which takes precedence\n        readonly popoutWholeStack: boolean;\n        readonly blockedPopoutsThrowError: boolean;\n        /** @deprecated Will be removed in version 3. */\n        readonly closePopoutsOnUnload: boolean;\n        readonly responsiveMode: ResponsiveMode;\n        readonly tabOverlapAllowance: number;\n        readonly reorderOnTabMenuClick: boolean;\n        readonly tabControlOffset: number;\n        readonly popInOnClose: boolean;\n    }\n\n    export namespace Settings {\n        export const defaults: ResolvedLayoutConfig.Settings = {\n            constrainDragToContainer: true,\n            reorderEnabled: true,\n            popoutWholeStack: false,\n            blockedPopoutsThrowError: true,\n            closePopoutsOnUnload: true,\n            responsiveMode: ResponsiveMode.none, // was onload\n            tabOverlapAllowance: 0,\n            reorderOnTabMenuClick: true,\n            tabControlOffset: 10,\n            popInOnClose: false,\n        } as const;\n\n        export function createCopy(original: Settings): Settings {\n            return {\n                constrainDragToContainer: original.constrainDragToContainer,\n                reorderEnabled: original.reorderEnabled,\n                popoutWholeStack: original.popoutWholeStack,\n                blockedPopoutsThrowError: original.blockedPopoutsThrowError,\n                closePopoutsOnUnload: original.closePopoutsOnUnload,\n                responsiveMode: original.responsiveMode,\n                tabOverlapAllowance: original.tabOverlapAllowance,\n                reorderOnTabMenuClick: original.reorderOnTabMenuClick,\n                tabControlOffset: original.tabControlOffset,\n                popInOnClose: original.popInOnClose,\n            }\n        }\n    }\n\n    export interface Dimensions {\n        // see LayoutConfig.Dimensions for comments\n        readonly borderWidth: number;\n        readonly borderGrabWidth: number,\n        readonly defaultMinItemHeight: number;\n        readonly defaultMinItemHeightUnit: SizeUnitEnum;\n        readonly defaultMinItemWidth: number;\n        readonly defaultMinItemWidthUnit: SizeUnitEnum;\n        readonly headerHeight: number;\n        readonly dragProxyWidth: number;\n        readonly dragProxyHeight: number;\n    }\n\n    export namespace Dimensions {\n        export function createCopy(original: Dimensions): Dimensions {\n            return {\n                borderWidth: original.borderWidth,\n                borderGrabWidth: original.borderGrabWidth,\n                defaultMinItemHeight: original.defaultMinItemHeight,\n                defaultMinItemHeightUnit: original.defaultMinItemHeightUnit,\n                defaultMinItemWidth: original.defaultMinItemWidth,\n                defaultMinItemWidthUnit: original.defaultMinItemWidthUnit,\n                headerHeight: original.headerHeight,\n                dragProxyWidth: original.dragProxyWidth,\n                dragProxyHeight: original.dragProxyHeight,\n            }\n        }\n\n        export const defaults: ResolvedLayoutConfig.Dimensions = {\n            borderWidth: 5,\n            borderGrabWidth: 5,\n            defaultMinItemHeight: 0,\n            defaultMinItemHeightUnit: SizeUnitEnum.Pixel,\n            defaultMinItemWidth: 10,\n            defaultMinItemWidthUnit: SizeUnitEnum.Pixel,\n            headerHeight: 20,\n            dragProxyWidth: 300,\n            dragProxyHeight: 200\n        } as const;\n    }\n\n    export interface Header {\n        readonly show: false | Side;\n        readonly popout: false | string;\n        readonly dock: string;\n        readonly maximise: false | string;\n        readonly minimise: string;\n        readonly close: false | string;\n        readonly tabDropdown: false | string;\n    }\n\n    export namespace Header {\n        export function createCopy(original: Header): Header {\n            return {\n                show: original.show,\n                popout: original.popout,\n                dock: original.dock,\n                close: original.close,\n                maximise: original.maximise,\n                minimise: original.minimise,\n                tabDropdown: original.tabDropdown,\n            }\n        }\n\n        export const defaults: ResolvedLayoutConfig.Header = {\n            show: Side.top,\n            popout: 'open in new window',\n            dock: 'dock',\n            maximise: 'maximise',\n            minimise: 'minimise',\n            close: 'close',\n            tabDropdown: 'additional tabs'\n        } as const;\n    }\n\n    export function isPopout(config: ResolvedLayoutConfig): config is ResolvedPopoutLayoutConfig {\n        return 'parentId' in config;\n    }\n\n    export function createDefault(): ResolvedLayoutConfig {\n        const result: ResolvedLayoutConfig = {\n            root: undefined,\n            openPopouts: [],\n            dimensions: ResolvedLayoutConfig.Dimensions.defaults,\n            settings: ResolvedLayoutConfig.Settings.defaults,\n            header: ResolvedLayoutConfig.Header.defaults,\n            resolved: true,\n        }\n        return result;\n    }\n\n    export function createCopy(config: ResolvedLayoutConfig): ResolvedLayoutConfig {\n        if (isPopout(config)) {\n            return ResolvedPopoutLayoutConfig.createCopy(config);\n        } else {\n            const result: ResolvedLayoutConfig = {\n                root: config.root === undefined ? undefined : ResolvedRootItemConfig.createCopy(config.root),\n                openPopouts: ResolvedLayoutConfig.copyOpenPopouts(config.openPopouts),\n                settings: ResolvedLayoutConfig.Settings.createCopy(config.settings),\n                dimensions: ResolvedLayoutConfig.Dimensions.createCopy(config.dimensions),\n                header: ResolvedLayoutConfig.Header.createCopy(config.header),\n                resolved: config.resolved,\n            }\n            return result;\n        }\n    }\n\n    export function copyOpenPopouts(original: ResolvedPopoutLayoutConfig[]): ResolvedPopoutLayoutConfig[] {\n        const count = original.length;\n        const result = new Array<ResolvedPopoutLayoutConfig>(count);\n        for (let i = 0; i < count; i++) {\n            result[i] = ResolvedPopoutLayoutConfig.createCopy(original[i]);\n        }\n        return result;\n    }\n\n    /**\n     * Takes a GoldenLayout configuration object and\n     * replaces its keys and values recursively with\n     * one letter counterparts\n     */\n    export function minifyConfig(layoutConfig: ResolvedLayoutConfig): ResolvedLayoutConfig {\n        return ConfigMinifier.translateObject(layoutConfig, true) as ResolvedLayoutConfig;\n    }\n\n    /**\n     * Takes a configuration Object that was previously minified\n     * using minifyConfig and returns its original version\n     */\n    export function unminifyConfig(minifiedConfig: ResolvedLayoutConfig): ResolvedLayoutConfig {\n        return ConfigMinifier.translateObject(minifiedConfig, false) as ResolvedLayoutConfig;\n    }\n}\n\n/** @public */\nexport interface ResolvedPopoutLayoutConfig extends ResolvedLayoutConfig {\n    readonly parentId: string | null;\n    readonly indexInParent: number | null;\n    readonly window: ResolvedPopoutLayoutConfig.Window;\n}\n\n/** @public */\nexport namespace ResolvedPopoutLayoutConfig {\n    export interface Window {\n        readonly width: number | null,\n        readonly height: number | null,\n        readonly left: number | null,\n        readonly top: number | null,\n    }\n\n    export namespace Window {\n        export function createCopy(original: Window): Window {\n            return {\n                width: original.width,\n                height: original.height,\n                left: original.left,\n                top: original.top,\n            }\n        }\n\n        export const defaults: ResolvedPopoutLayoutConfig.Window = {\n            width: null,\n            height: null,\n            left: null,\n            top: null,\n        } as const;\n    }\n\n    export function createCopy(original: ResolvedPopoutLayoutConfig): ResolvedPopoutLayoutConfig {\n        const result: ResolvedPopoutLayoutConfig = {\n            root: original.root === undefined ? undefined : ResolvedRootItemConfig.createCopy(original.root),\n            openPopouts: ResolvedLayoutConfig.copyOpenPopouts(original.openPopouts),\n            settings: ResolvedLayoutConfig.Settings.createCopy(original.settings),\n            dimensions: ResolvedLayoutConfig.Dimensions.createCopy(original.dimensions),\n            header: ResolvedLayoutConfig.Header.createCopy(original.header),\n            parentId: original.parentId,\n            indexInParent: original.indexInParent,\n            window: ResolvedPopoutLayoutConfig.Window.createCopy(original.window),\n            resolved: original.resolved,\n        }\n        return result;\n    }\n}\n","import { AssertError } from '../errors/internal-error';\n\n/** @public */\nexport const enum I18nStringId {\n    PopoutCannotBeCreatedWithGroundItemConfig,\n    PleaseRegisterAConstructorFunction,\n    ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned,\n    ComponentIsAlreadyRegistered,\n    ComponentIsNotVirtuable,\n    VirtualComponentDoesNotHaveRootHtmlElement,\n    ItemConfigIsNotTypeComponent,\n    InvalidNumberPartInSizeString,\n    UnknownUnitInSizeString,\n    UnsupportedUnitInSizeString,\n}\n\n/** @public */\nexport namespace I18nStrings {\n    /** @internal */\n    let initialised = false;\n\n    /** @internal */\n    interface Info {\n        readonly id: I18nStringId;\n        readonly default: string;\n    }\n\n    /** @internal */\n    type InfosObject = { [id in keyof typeof I18nStringId]: Info };\n\n    /** @internal */\n    const infosObject: InfosObject = {\n        PopoutCannotBeCreatedWithGroundItemConfig: {\n            id: I18nStringId.PopoutCannotBeCreatedWithGroundItemConfig,\n            default: 'Popout cannot be created with ground ItemConfig'\n        },\n        PleaseRegisterAConstructorFunction: {\n            id: I18nStringId.PleaseRegisterAConstructorFunction,\n            default: 'Please register a constructor function'\n        },\n        ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned: {\n            id: I18nStringId.ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned,\n            default: 'Component type not registered and BindComponentEvent handler not assigned',\n        },\n        ComponentIsAlreadyRegistered: {\n            id: I18nStringId.ComponentIsAlreadyRegistered,\n            default: 'Component is already registered',\n        },\n        ComponentIsNotVirtuable: {\n            id: I18nStringId.ComponentIsNotVirtuable,\n            default: 'Component is not virtuable. Requires rootHtmlElement field/getter',\n        },\n        VirtualComponentDoesNotHaveRootHtmlElement: {\n            id: I18nStringId.VirtualComponentDoesNotHaveRootHtmlElement,\n            default: 'Virtual component does not have getter \"rootHtmlElement\"',\n        },\n        ItemConfigIsNotTypeComponent: {\n            id: I18nStringId.ItemConfigIsNotTypeComponent,\n            default: 'ItemConfig is not of type component',\n        },\n\n        InvalidNumberPartInSizeString: {\n            id: I18nStringId.InvalidNumberPartInSizeString,\n            default: 'Invalid number part in size string',\n        },\n        UnknownUnitInSizeString: {\n            id: I18nStringId.UnknownUnitInSizeString,\n            default: 'Unknown unit in size string',\n        },\n        UnsupportedUnitInSizeString: {\n            id: I18nStringId.UnsupportedUnitInSizeString,\n            default: 'Unsupported unit in size string',\n        },\n    }\n\n    export const idCount = Object.keys(infosObject).length;\n    /** @internal */\n    const infos = Object.values(infosObject);\n\n    export function checkInitialise(): void {\n        if (!initialised) {\n            for (let i = 0; i < idCount; i++) {\n                const info = infos[i];\n                if (info.id !== i) {\n                    throw new AssertError('INSI00110', `${i}: ${info.id}`);\n                } else {\n                    i18nStrings[i] = info.default;\n                }\n            }\n        }\n        initialised = true;\n    }\n}\n\n/** @public */\nexport const i18nStrings = new Array<string>(I18nStrings.idCount);\n","import { WidthAndHeight } from './types';\n\n/** @internal */\nexport function numberToPixels(value: number): string {\n    return value.toString(10) + 'px';\n}\n\n/** @internal */\nexport function pixelsToNumber(value: string): number {\n    const numberStr = value.replace(\"px\", \"\");\n    return parseFloat(numberStr);\n}\n\n/** @internal */\nexport interface SplitStringAtFirstNonNumericCharResult {\n    numericPart: string;\n    firstNonNumericCharPart: string;\n}\n\n/** @internal */\nexport function splitStringAtFirstNonNumericChar(value: string): SplitStringAtFirstNonNumericCharResult {\n    value = value.trimStart();\n\n    const length = value.length;\n    if (length === 0) {\n        return { numericPart: '', firstNonNumericCharPart: '' }\n    } else {\n        let firstNonDigitPartIndex = length;\n        let gotDecimalPoint = false;\n        for (let i = 0; i < length; i++) {\n            const char = value[i];\n            if (!isDigit(char)) {\n                if (char !== '.') {\n                    firstNonDigitPartIndex = i;\n                    break;\n                } else {\n                    if (gotDecimalPoint) {\n                        firstNonDigitPartIndex = i;\n                        break;\n                    } else {\n                        gotDecimalPoint = true;\n                    }\n                }\n            }\n        }\n        const digitsPart = value.substring(0, firstNonDigitPartIndex);\n        const firstNonDigitPart = value.substring(firstNonDigitPartIndex).trim();\n\n        return { numericPart: digitsPart, firstNonNumericCharPart: firstNonDigitPart };\n    }\n}\n\n/** @internal */\nexport function isDigit(char: string) {\n    return char >= '0' && char <= '9';\n}\n\n/** @internal */\nexport function getElementWidth(element: HTMLElement): number {\n    return element.offsetWidth;\n}\n\n/** @internal */\nexport function setElementWidth(element: HTMLElement, width: number): void {\n    const widthAsPixels = numberToPixels(width);\n    element.style.width = widthAsPixels;\n}\n\n/** @internal */\nexport function getElementHeight(element: HTMLElement): number {\n    return element.offsetHeight;\n}\n\n/** @internal */\nexport function setElementHeight(element: HTMLElement, height: number): void {\n    const heightAsPixels = numberToPixels(height);\n    element.style.height = heightAsPixels;\n}\n\n/** @internal */\nexport function getElementWidthAndHeight(element: HTMLElement): WidthAndHeight {\n    return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n    };\n}\n\n/** @internal */\nexport function setElementDisplayVisibility(element: HTMLElement, visible: boolean): void {\n    if (visible) {\n        element.style.display = '';\n    } else {\n        element.style.display = 'none';\n    }\n}\n\n/** @internal */\nexport function ensureElementPositionAbsolute(element: HTMLElement): void {\n    const absolutePosition = 'absolute';\n    if (element.style.position !== absolutePosition) {\n        element.style.position = absolutePosition;\n    }\n}\n\n/**\n * Replacement for JQuery $.extend(target, obj)\n * @internal\n*/\nexport function extend(target: Record<string, unknown>, obj: Record<string, unknown>): Record<string, unknown> {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            target[key] = obj[key];\n        }\n    }\n    return target;\n}\n\n/**\n * Replacement for JQuery $.extend(true, target, obj)\n * @internal\n*/\nexport function deepExtend(target: Record<string, unknown>, obj: Record<string, unknown> | undefined): Record<string, unknown> {\n    if (obj !== undefined) {\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                const value = obj[key];\n                const existingTarget = target[key];\n                target[key] = deepExtendValue(existingTarget, value);\n            }\n        }\n    }\n\n    return target;\n}\n\n/** @internal */\nexport function deepExtendValue(existingTarget: unknown, value: unknown): unknown {\n    if (typeof value !== 'object') {\n        return value;\n    } else {\n        if (Array.isArray(value)) {\n            const length = value.length;\n            const targetArray = new Array<unknown>(length);\n            for (let i = 0; i < length; i++) {\n                const element = value[i];\n                targetArray[i] = deepExtendValue({}, element);\n            }\n            return targetArray;\n        } else {\n            if (value === null) {\n                return null;\n            } else {\n                const valueObj = value as Record<string, unknown>;\n                if (existingTarget === undefined) {\n                    return deepExtend({}, valueObj); // overwrite\n                } else {\n                    if (typeof existingTarget !== \"object\") {\n                        return deepExtend({}, valueObj); // overwrite\n                    } else {\n                        if (Array.isArray(existingTarget)) {\n                            return deepExtend({}, valueObj); // overwrite\n                        } else {\n                            if (existingTarget === null) {\n                                return deepExtend({}, valueObj); // overwrite\n                            } else {\n                                const existingTargetObj = existingTarget as Record<string, unknown>;\n                                return deepExtend(existingTargetObj, valueObj); // merge\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n/** @internal */\nexport function removeFromArray<T>(item: T, array: T[]): void {\n    const index = array.indexOf(item);\n\n    if (index === -1) {\n        throw new Error('Can\\'t remove item from array. Item is not in the array');\n    }\n\n    array.splice(index, 1);\n}\n\n/** @internal */\nexport function getUniqueId(): string {\n    return (Math.random() * 1000000000000000)\n        .toString(36)\n        .replace('.', '');\n}\n\n/** @internal */\nexport function getErrorMessage(e: unknown): string {\n    if (e instanceof Error) {\n        return e.message;\n    } else {\n        if (typeof e === 'string') {\n            return e;\n        } else {\n            return 'Unknown Error';\n        }\n    }\n}\n","/** @public */\nexport abstract class ExternalError extends Error {\n    /** @internal */\n    constructor(public readonly type: string, message: string) {\n        super(message);\n    }\n}\n\n/** @public */\nexport class ConfigurationError extends ExternalError {\n    /** @internal */\n    constructor(message: string, public readonly node?: string) {\n        super('Configuration', message);\n    }\n}\n\n/** @public */\nexport class PopoutBlockedError extends ExternalError {\n    /** @internal */\n    constructor(message: string) {\n        super('PopoutBlocked', message);\n    }\n}\n\n/** @public */\nexport class ApiError extends ExternalError {\n    /** @internal */\n    constructor(message: string) {\n        super('API', message);\n    }\n}\n\n/** @public */\nexport class BindError extends ExternalError {\n    /** @internal */\n    constructor(message: string) {\n        super('Bind', message);\n    }\n}\n","import { ConfigurationError } from '../errors/external-error';\nimport { AssertError, UnexpectedUndefinedError, UnreachableCaseError } from '../errors/internal-error';\nimport { I18nStringId, i18nStrings } from '../utils/i18n-strings';\nimport { ItemType, JsonValue, ResponsiveMode, Side, SizeUnitEnum } from '../utils/types';\nimport { deepExtendValue, splitStringAtFirstNonNumericChar } from '../utils/utils';\nimport {\n    ResolvedComponentItemConfig,\n    ResolvedHeaderedItemConfig,\n    ResolvedItemConfig,\n    ResolvedLayoutConfig,\n    ResolvedPopoutLayoutConfig,\n    ResolvedRootItemConfig,\n    ResolvedRowOrColumnItemConfig,\n    ResolvedStackItemConfig\n} from \"./resolved-config\";\n\n/** @public */\nexport interface ItemConfig {\n    /**\n     * The type of the item. Possible values are 'row', 'column', 'stack', 'component'.\n     */\n    type: ItemType;\n\n    /**\n     * An array of configurations for items that will be created as children of this item.\n     */\n    content?: ItemConfig[];\n\n    /**\n     * The width of this item, relative to the other children of its parent in percent\n     * @deprecated use {@link (ItemConfig:interface).size} instead\n     */\n    width?: number;\n\n    /**\n     * The minimum width of this item in pixels\n     * CAUTION - Not tested - do not use\n     * @deprecated use {@link (ItemConfig:interface).minSize} instead\n     */\n    minWidth?: number;\n\n    /**\n     * The height of this item, relative to the other children of its parent in percent\n     * @deprecated use {@link (ItemConfig:interface).size} instead\n     */\n    height?: number;\n\n    /**\n     * The minimum height of this item in pixels\n     * CAUTION - Not tested - do not use\n     * @deprecated use {@link (ItemConfig:interface).minSize} instead\n     */\n    minHeight?: number;\n\n    /**\n     * The size of this item.\n     * For rows, it specifies height. For columns, it specifies width.\n     * Has format \\<number\\>\\<{@link SizeUnit}\\>. Currently only supports units `fr` and `%`.\n     *\n     * Space is first proportionally allocated to items with sizeUnit `%`.\n     * If there is any space left over (less than 100% allocated), then the\n     * remainder is allocated to the items with unit `fr` according to the fractional size.\n     * If more than 100% is allocated, then an extra 50% is allocated to items with unit `fr` and\n     * is allocated to each item according to its fractional size. All item sizes are then adjusted\n     * to bring the total back to 100%\n     */\n    size?: string;\n\n    /**\n     * The size of this item.\n     * For rows, it specifies height. For columns, it specifies width.\n     * Has format <number><sizeUnit>. Currently only supports units `px`\n     */\n    minSize?: string;\n\n    /**\n     * A string that can be used to identify a ContentItem.\n     * Do NOT assign an array.  This only exists for legacy purposes.  If an array is assigned, the first element\n     * will become the id.\n     */\n    id?: string;\n\n    /**\n     * Determines if the item is closable. If false, the x on the items tab will be hidden and container.close()\n     * will return false\n     * Default: true\n     */\n    isClosable?: boolean;\n\n    /**\n     * The title of the item as displayed on its tab and on popout windows\n     * Default: componentType.toString() or ''\n     * @deprecated only Component has a title\n     */\n    title?: string;\n}\n\n/** @public */\nexport namespace ItemConfig {\n    /** @internal */\n    export const enum SizeWidthHeightSpecificationType {\n        None,\n        Size,\n        WidthOrHeight,\n    }\n\n    /** @internal */\n    export function resolve(itemConfig: ItemConfig, rowAndColumnChildLegacySizeDefault: boolean): ResolvedItemConfig {\n        switch (itemConfig.type) {\n            case ItemType.ground:\n                throw new ConfigurationError('ItemConfig cannot specify type ground', JSON.stringify(itemConfig));\n            case ItemType.row:\n            case ItemType.column:\n                return RowOrColumnItemConfig.resolve(itemConfig as RowOrColumnItemConfig, rowAndColumnChildLegacySizeDefault);\n\n            case ItemType.stack:\n                return StackItemConfig.resolve(itemConfig as StackItemConfig, rowAndColumnChildLegacySizeDefault);\n\n            case ItemType.component:\n                return ComponentItemConfig.resolve(itemConfig as ComponentItemConfig, rowAndColumnChildLegacySizeDefault);\n\n            default:\n                throw new UnreachableCaseError('UCUICR55499', itemConfig.type);\n        }\n    }\n\n    /** @internal */\n    export function resolveContent(content: ItemConfig[] | undefined): ResolvedItemConfig[] {\n        if (content === undefined) {\n            return [];\n        } else {\n            const count = content.length;\n            const result = new Array<ResolvedItemConfig>(count);\n            for (let i = 0; i < count; i++) {\n                result[i] = ItemConfig.resolve(content[i], false);\n            }\n            return result;\n        }\n    }\n\n    /** @internal */\n    export function resolveId(id: string | string[] | undefined): string {\n        if (id === undefined) {\n            return ResolvedItemConfig.defaults.id;\n        } else {\n            if (Array.isArray(id)) {\n                if (id.length === 0) {\n                    return ResolvedItemConfig.defaults.id;\n                } else {\n                    return id[0];\n                }\n            } else {\n                return id;\n            }\n        }\n    }\n\n    /** @internal */\n    export function resolveSize(\n        size: string | undefined,\n        width: number | undefined,\n        height: number | undefined,\n        rowAndColumnChildLegacySizeDefault: boolean):\n    SizeWithUnit {\n        // Remove support for rowAndColumnChildLegacySizeDefault in a major version release\n\n        if (size !== undefined) {\n            return parseSize(size, [SizeUnitEnum.Percent, SizeUnitEnum.Fractional]);\n        } else {\n            if (width !== undefined || height !== undefined) {\n                if (width !== undefined) {\n                    return { size: width, sizeUnit: SizeUnitEnum.Percent };\n                } else {\n                    if (height !== undefined) {\n                        return { size: height, sizeUnit: SizeUnitEnum.Percent };\n                    } else {\n                        throw new UnexpectedUndefinedError('CRS33390');\n                    }\n                }\n            } else {\n                if (rowAndColumnChildLegacySizeDefault) {\n                    return { size: 50, sizeUnit: SizeUnitEnum.Percent };\n                } else {\n                    return { size: ResolvedItemConfig.defaults.size, sizeUnit: ResolvedItemConfig.defaults.sizeUnit };\n                }\n            }\n        }\n    }\n\n    /** @internal */\n    export function resolveMinSize(minSize: string | undefined, minWidth: number | undefined, minHeight: number | undefined): UndefinableSizeWithUnit {\n        if (minSize !== undefined) {\n            return parseSize(minSize, [SizeUnitEnum.Pixel]);\n        } else {\n            const minWidthDefined = minWidth !== undefined;\n            const minHeightDefined = minHeight !== undefined;\n            if (minWidthDefined || minHeightDefined) {\n                if (minWidthDefined) {\n                    return { size: minWidth, sizeUnit: SizeUnitEnum.Pixel };\n                } else {\n                    return { size: minHeight, sizeUnit: SizeUnitEnum.Pixel };\n                }\n            } else {\n                return { size: ResolvedItemConfig.defaults.minSize, sizeUnit: ResolvedItemConfig.defaults.minSizeUnit };\n            }\n        }\n    }\n\n    /** @internal */\n    export function calculateSizeWidthHeightSpecificationType(config: ItemConfig): SizeWidthHeightSpecificationType {\n        if (config.size !== undefined) {\n            return SizeWidthHeightSpecificationType.Size;\n        } else {\n            if (config.width !== undefined || config.height !== undefined) {\n                return SizeWidthHeightSpecificationType.WidthOrHeight;\n            } else {\n                return SizeWidthHeightSpecificationType.None;\n            }\n        }\n    }\n\n    export function isGround(config: ItemConfig): config is ItemConfig {\n        return config.type === ItemType.ground;\n    }\n    export function isRow(config: ItemConfig): config is ItemConfig {\n        return config.type === ItemType.row;\n    }\n    export function isColumn(config: ItemConfig): config is ItemConfig {\n        return config.type === ItemType.column;\n    }\n    export function isStack(config: ItemConfig): config is ItemConfig {\n        return config.type === ItemType.stack;\n    }\n    export function isComponent(config: ItemConfig): config is ComponentItemConfig {\n        return config.type === ItemType.component;\n    }\n}\n\n// Stack or Component\n/** @public */\nexport interface HeaderedItemConfig extends ItemConfig {\n    /** @deprecated use {@link (HeaderedItemConfig:namespace).(Header:interface).show} instead */\n    hasHeaders?: boolean;\n    header?: HeaderedItemConfig.Header;\n    maximised?: boolean;\n}\n\n/** @public */\nexport namespace HeaderedItemConfig {\n    const legacyMaximisedId = '__glMaximised';\n\n    export interface Header {\n        show?: false | Side;\n        popout?: false | string;\n        dock?: false | string;\n        maximise?: false | string;\n        close?: string;\n        minimise?: string;\n        tabDropdown?: false | string;\n    }\n\n    export namespace Header {\n        export function resolve(header: Header | undefined, hasHeaders: boolean | undefined): ResolvedHeaderedItemConfig.Header | undefined {\n            if (header === undefined && hasHeaders === undefined) {\n                return undefined;\n            } else {\n                const result: ResolvedHeaderedItemConfig.Header = {\n                    show: header?.show ?? (hasHeaders === undefined ? undefined : hasHeaders ? ResolvedLayoutConfig.Header.defaults.show : false),\n                    popout: header?.popout,\n                    maximise: header?.maximise,\n                    close: header?.close,\n                    minimise: header?.minimise,\n                    tabDropdown: header?.tabDropdown,\n                }\n                return result;\n            }\n        }\n    }\n\n    /** @internal */\n    export function resolveIdAndMaximised(config: HeaderedItemConfig): { id: string, maximised: boolean} {\n        let id: string;\n        // To support legacy configs with Id saved as an array of string, assign config.id to a type which includes string array\n        let legacyId: string | string[] | undefined = config.id;\n        let legacyMaximised = false;\n        if (legacyId === undefined) {\n            id = ResolvedItemConfig.defaults.id;\n        } else {\n            if (Array.isArray(legacyId)) {\n                const idx = legacyId.findIndex((id) => id === legacyMaximisedId)\n                if (idx > 0) {\n                    legacyMaximised = true;\n                    legacyId = legacyId.splice(idx, 1);\n                }\n                if (legacyId.length > 0) {\n                    id = legacyId[0];\n                } else {\n                    id = ResolvedItemConfig.defaults.id;\n                }\n            } else {\n                id = legacyId;\n            }\n        }\n\n        let maximised: boolean;\n        if (config.maximised !== undefined) {\n            maximised = config.maximised;\n        } else {\n            maximised = legacyMaximised;\n        }\n\n        return { id, maximised }\n    }\n}\n\n/** @public */\nexport interface StackItemConfig extends HeaderedItemConfig {\n    type: 'stack';\n    content: ComponentItemConfig[];\n    /** The index of the item in content which is to be active*/\n    activeItemIndex?: number;\n}\n\n/** @public */\nexport namespace StackItemConfig {\n    /** @internal */\n    export function resolve(itemConfig: StackItemConfig, rowAndColumnChildLegacySizeDefault: boolean): ResolvedStackItemConfig {\n        const { id, maximised } = HeaderedItemConfig.resolveIdAndMaximised(itemConfig);\n        const { size, sizeUnit } = ItemConfig.resolveSize(itemConfig.size, itemConfig.width, itemConfig.height, rowAndColumnChildLegacySizeDefault);\n        const { size: minSize, sizeUnit: minSizeUnit } = ItemConfig.resolveMinSize(itemConfig.minSize, itemConfig.minWidth, itemConfig.minHeight);\n\n        const result: ResolvedStackItemConfig = {\n            type: ItemType.stack,\n            content: resolveContent(itemConfig.content),\n            size,\n            sizeUnit,\n            minSize,\n            minSizeUnit,\n            id,\n            maximised,\n            isClosable: itemConfig.isClosable ?? ResolvedItemConfig.defaults.isClosable,\n            activeItemIndex: itemConfig.activeItemIndex ?? ResolvedStackItemConfig.defaultActiveItemIndex,\n            header: HeaderedItemConfig.Header.resolve(itemConfig.header, itemConfig.hasHeaders),\n        };\n        return result;\n    }\n\n    /** @internal */\n    export function fromResolved(resolvedConfig: ResolvedStackItemConfig): StackItemConfig {\n        const result: StackItemConfig = {\n            type: ItemType.stack,\n            content: fromResolvedContent(resolvedConfig.content),\n            size: formatSize(resolvedConfig.size, resolvedConfig.sizeUnit),\n            minSize: formatUndefinableSize(resolvedConfig.minSize, resolvedConfig.minSizeUnit),\n            id: resolvedConfig.id,\n            maximised: resolvedConfig.maximised,\n            isClosable: resolvedConfig.isClosable,\n            activeItemIndex: resolvedConfig.activeItemIndex,\n            header: ResolvedHeaderedItemConfig.Header.createCopy(resolvedConfig.header),\n        };\n\n        return result;\n    }\n\n    /** @internal */\n    function resolveContent(content: ComponentItemConfig[] | undefined): ResolvedComponentItemConfig[] {\n        if (content === undefined) {\n            return [];\n        } else {\n            const count = content.length;\n            const result = new Array<ResolvedComponentItemConfig>(count);\n            for (let i = 0; i < count; i++) {\n                const childItemConfig = content[i];\n                const itemConfig = ItemConfig.resolve(childItemConfig, false);\n                if (!ResolvedItemConfig.isComponentItem(itemConfig)) {\n                    throw new AssertError('UCUSICRC91114', JSON.stringify(itemConfig));\n                } else {\n                    result[i] = itemConfig;\n                }\n            }\n            return result;\n        }\n    }\n\n    /** @internal */\n    function fromResolvedContent(resolvedContent: ResolvedComponentItemConfig[]): ComponentItemConfig[] {\n        const count = resolvedContent.length;\n        const result = new Array<ComponentItemConfig>(count);\n        for (let i = 0; i < count; i++) {\n            const resolvedContentConfig = resolvedContent[i];\n            result[i] = ComponentItemConfig.fromResolved(resolvedContentConfig);\n        }\n        return result;\n    }\n}\n\n/** @public */\nexport interface ComponentItemConfig extends HeaderedItemConfig {\n    type: 'component';\n    readonly content?: [];\n\n    /**\n     * The title of the item as displayed on its tab and on popout windows\n     * Default: componentType.toString() or ''\n     */\n    title?: string;\n\n    /**\n     * The type of the component.\n     * @deprecated use {@link (ComponentItemConfig:interface).componentType} instead\n     */\n    componentName?: string;\n\n    /**\n     * The type of the component.\n     * `componentType` must be of type `string` if it is registered with any of the following functions:\n     * * {@link (GoldenLayout:class).registerComponent} (deprecated)\n     * * {@link (GoldenLayout:class).registerComponentConstructor}\n     * * {@link (GoldenLayout:class).registerComponentFactoryFunction}\n     */\n    componentType: JsonValue;\n    /**\n     * The state information with which a component will be initialised with.\n     * Will be passed to the component constructor function and will be the value returned by\n     * container.initialState.\n     */\n    componentState?: JsonValue;\n\n    /**\n     * Default: true\n     */\n    reorderEnabled?: boolean;  // Takes precedence over LayoutConfig.reorderEnabled.\n}\n\n/** @public */\nexport namespace ComponentItemConfig {\n    /** @internal */\n    export function resolve(itemConfig: ComponentItemConfig, rowAndColumnChildLegacySizeDefault: boolean): ResolvedComponentItemConfig {\n        let componentType: JsonValue | undefined = itemConfig.componentType;\n        if (componentType === undefined) {\n            componentType = itemConfig.componentName;\n        }\n        if (componentType === undefined) {\n            throw new Error('ComponentItemConfig.componentType is undefined');\n        } else {\n            const { id, maximised } = HeaderedItemConfig.resolveIdAndMaximised(itemConfig);\n            let title: string;\n            if (itemConfig.title === undefined || itemConfig.title === '') {\n                title = ComponentItemConfig.componentTypeToTitle(componentType);\n            } else {\n                title = itemConfig.title;\n            }\n            const { size, sizeUnit } = ItemConfig.resolveSize(itemConfig.size, itemConfig.width, itemConfig.height, rowAndColumnChildLegacySizeDefault);\n            const { size: minSize, sizeUnit: minSizeUnit } = ItemConfig.resolveMinSize(itemConfig.minSize, itemConfig.minWidth, itemConfig.minHeight);\n            const result: ResolvedComponentItemConfig = {\n                type: itemConfig.type,\n                content: [],\n                size,\n                sizeUnit,\n                minSize,\n                minSizeUnit,\n                id,\n                maximised,\n                isClosable: itemConfig.isClosable ?? ResolvedItemConfig.defaults.isClosable,\n                reorderEnabled: itemConfig.reorderEnabled ?? ResolvedComponentItemConfig.defaultReorderEnabled,\n                title,\n                header: HeaderedItemConfig.Header.resolve(itemConfig.header, itemConfig.hasHeaders),\n                componentType,\n                componentState: itemConfig.componentState ?? {},\n            };\n            return result;\n        }\n    }\n\n    /** @internal */\n    export function fromResolved(resolvedConfig: ResolvedComponentItemConfig): ComponentItemConfig {\n        const result: ComponentItemConfig = {\n            type: ItemType.component,\n            size: formatSize(resolvedConfig.size, resolvedConfig.sizeUnit),\n            minSize: formatUndefinableSize(resolvedConfig.minSize, resolvedConfig.minSizeUnit),\n            id: resolvedConfig.id,\n            maximised: resolvedConfig.maximised,\n            isClosable: resolvedConfig.isClosable,\n            reorderEnabled: resolvedConfig.reorderEnabled,\n            title: resolvedConfig.title,\n            header: ResolvedHeaderedItemConfig.Header.createCopy(resolvedConfig.header),\n            componentType: resolvedConfig.componentType,\n            componentState: deepExtendValue(undefined, resolvedConfig.componentState) as JsonValue,\n        }\n\n        return result;\n    }\n\n    export function componentTypeToTitle(componentType: JsonValue): string {\n        const componentTypeType = typeof componentType;\n        switch (componentTypeType) {\n            case 'string': return componentType as string;\n            case 'number': return (componentType as number).toString();\n            case 'boolean': return (componentType as boolean).toString();\n            default: return '';\n        }\n    }\n}\n\n// RowOrColumn\n/** @public */\nexport interface RowOrColumnItemConfig extends ItemConfig {\n    type: 'row' | 'column';\n    content: (RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig)[];\n}\n\n/** @public */\nexport namespace RowOrColumnItemConfig {\n    export type ChildItemConfig = RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig;\n\n    export function isChildItemConfig(itemConfig: ItemConfig): itemConfig is ChildItemConfig {\n        switch (itemConfig.type) {\n            case ItemType.row:\n            case ItemType.column:\n            case ItemType.stack:\n            case ItemType.component:\n                return true;\n            case ItemType.ground:\n                return false;\n            default:\n                throw new UnreachableCaseError('UROCOSPCICIC13687', itemConfig.type);\n        }\n    }\n\n    /** @internal */\n    export function resolve(itemConfig: RowOrColumnItemConfig, rowAndColumnChildLegacySizeDefault: boolean): ResolvedRowOrColumnItemConfig {\n        const { size, sizeUnit } = ItemConfig.resolveSize(itemConfig.size, itemConfig.width, itemConfig.height, rowAndColumnChildLegacySizeDefault);\n        const { size: minSize, sizeUnit: minSizeUnit } = ItemConfig.resolveMinSize(itemConfig.minSize, itemConfig.minWidth, itemConfig.minHeight);\n        const result: ResolvedRowOrColumnItemConfig = {\n            type: itemConfig.type,\n            content: RowOrColumnItemConfig.resolveContent(itemConfig.content),\n            size,\n            sizeUnit,\n            minSize,\n            minSizeUnit,\n            id: ItemConfig.resolveId(itemConfig.id),\n            isClosable: itemConfig.isClosable ?? ResolvedItemConfig.defaults.isClosable,\n        }\n        return result;\n    }\n\n    /** @internal */\n    export function fromResolved(resolvedConfig: ResolvedRowOrColumnItemConfig): RowOrColumnItemConfig {\n        const result: RowOrColumnItemConfig = {\n            type: resolvedConfig.type,\n            content: fromResolvedContent(resolvedConfig.content),\n            size: formatSize(resolvedConfig.size, resolvedConfig.sizeUnit),\n            minSize: formatUndefinableSize(resolvedConfig.minSize, resolvedConfig.minSizeUnit),\n            id: resolvedConfig.id,\n            isClosable: resolvedConfig.isClosable,\n        }\n\n        return result;\n    }\n\n    /** @internal */\n    export function resolveContent(content: ChildItemConfig[] | undefined): ResolvedRowOrColumnItemConfig.ChildItemConfig[] {\n        if (content === undefined) {\n            return [];\n        } else {\n            const count = content.length;\n            const childItemConfigs = new Array<RowOrColumnItemConfig.ChildItemConfig>(count);\n            let widthOrHeightSpecifiedAtLeastOnce = false;\n            let sizeSpecifiedAtLeastOnce = false;\n            for (let i = 0; i < count; i++) {\n                const childItemConfig = content[i];\n                if (!RowOrColumnItemConfig.isChildItemConfig(childItemConfig)) {\n                    throw new ConfigurationError('ItemConfig is not Row, Column or Stack', childItemConfig);\n                } else {\n                    if (!sizeSpecifiedAtLeastOnce) {\n                        const sizeWidthHeightSpecificationType = ItemConfig.calculateSizeWidthHeightSpecificationType(childItemConfig);\n                        switch (sizeWidthHeightSpecificationType) {\n                            case ItemConfig.SizeWidthHeightSpecificationType.None:\n                                break;\n                            case ItemConfig.SizeWidthHeightSpecificationType.WidthOrHeight:\n                                widthOrHeightSpecifiedAtLeastOnce = true;\n                                break;\n                            case ItemConfig.SizeWidthHeightSpecificationType.Size:\n                                sizeSpecifiedAtLeastOnce = true;\n                                break;\n                            default:\n                                throw new UnreachableCaseError('ROCICRC87556', sizeWidthHeightSpecificationType);\n                        }\n                    }\n                    childItemConfigs[i] = childItemConfig;\n                }\n            }\n\n            let legacySizeDefault: boolean;\n            if (sizeSpecifiedAtLeastOnce) {\n                legacySizeDefault = false;\n            } else {\n                if (widthOrHeightSpecifiedAtLeastOnce) {\n                    legacySizeDefault = true;\n                } else {\n                    legacySizeDefault = false;\n                }\n            }\n\n            const result = new Array<ResolvedRowOrColumnItemConfig.ChildItemConfig>(count);\n            for (let i = 0; i < count; i++) {\n                const childItemConfig = childItemConfigs[i];\n                const resolvedChildItemConfig = ItemConfig.resolve(childItemConfig, legacySizeDefault);\n                if (!ResolvedRowOrColumnItemConfig.isChildItemConfig(resolvedChildItemConfig)) {\n                    throw new AssertError('UROCOSPIC99512', JSON.stringify(resolvedChildItemConfig));\n                } else {\n                    result[i] = resolvedChildItemConfig;\n                }\n            }\n            return result;\n        }\n    }\n\n    /** @internal */\n    function fromResolvedContent(resolvedContent: readonly ResolvedRowOrColumnItemConfig.ChildItemConfig[]): RowOrColumnItemConfig.ChildItemConfig[] {\n        const count = resolvedContent.length;\n        const result = new Array<RowOrColumnItemConfig.ChildItemConfig>(count);\n        for (let i = 0; i < count; i++) {\n            const resolvedContentConfig = resolvedContent[i];\n            const type = resolvedContentConfig.type;\n            let contentConfig: RowOrColumnItemConfig.ChildItemConfig;\n            switch (type) {\n                case ItemType.row:\n                case ItemType.column:\n                    contentConfig = RowOrColumnItemConfig.fromResolved(resolvedContentConfig);\n                    break;\n                case ItemType.stack:\n                    contentConfig = StackItemConfig.fromResolved(resolvedContentConfig);\n                    break;\n                case ItemType.component:\n                    contentConfig = ComponentItemConfig.fromResolved(resolvedContentConfig);\n                    break;\n                default:\n                    throw new UnreachableCaseError('ROCICFRC44797', type);\n            }\n            result[i] = contentConfig;\n        }\n        return result;\n    }\n}\n\n/** @public */\nexport type RootItemConfig = RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig;\n\n/** @public */\nexport namespace RootItemConfig {\n    export function isRootItemConfig(itemConfig: ItemConfig): itemConfig is RootItemConfig {\n        switch (itemConfig.type) {\n            case ItemType.row:\n            case ItemType.column:\n            case ItemType.stack:\n            case ItemType.component:\n                return true;\n            case ItemType.ground:\n                return false;\n            default:\n                throw new UnreachableCaseError('URICIR23687', itemConfig.type);\n        }\n    }\n\n    /** @internal */\n    export function resolve(itemConfig: RootItemConfig | undefined): ResolvedRootItemConfig | undefined {\n        if (itemConfig === undefined) {\n            return undefined;\n        } else {\n            const result = ItemConfig.resolve(itemConfig, false);\n            if (!ResolvedRootItemConfig.isRootItemConfig(result)) {\n                throw new ConfigurationError('ItemConfig is not Row, Column or Stack', JSON.stringify(itemConfig));\n            } else {\n                return result;\n            }\n        }\n    }\n\n    /** @internal */\n    export function fromResolvedOrUndefined(resolvedItemConfig: ResolvedRootItemConfig | undefined): RootItemConfig | undefined {\n        if (resolvedItemConfig === undefined) {\n            return undefined;\n        } else {\n            const type = resolvedItemConfig.type;\n            switch (type) {\n                case ItemType.row:\n                case ItemType.column:\n                    return RowOrColumnItemConfig.fromResolved(resolvedItemConfig);\n                case ItemType.stack:\n                    return StackItemConfig.fromResolved(resolvedItemConfig);\n                case ItemType.component:\n                    return ComponentItemConfig.fromResolved(resolvedItemConfig);\n                default:\n                    throw new UnreachableCaseError('RICFROU89921', type);\n            }\n        }\n    }\n}\n\n/** @public */\nexport interface LayoutConfig {\n    root: RootItemConfig | undefined;\n    /** @deprecated Use {@link (LayoutConfig:interface).root} */\n    content?: (RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig)[];\n    openPopouts?: PopoutLayoutConfig[];\n    dimensions?: LayoutConfig.Dimensions;\n    settings?: LayoutConfig.Settings;\n    /** @deprecated use {@link (LayoutConfig:interface).header} instead */\n    labels?: LayoutConfig.Labels;\n    header?: LayoutConfig.Header;\n}\n\n/** Use to specify LayoutConfig with defaults or deserialise a LayoutConfig.\n * Deserialisation will handle backwards compatibility.\n * Note that LayoutConfig should be used for serialisation (not LayoutConfig)\n * @public\n */\nexport namespace LayoutConfig {\n    export interface Settings {\n        /**\n         * @deprecated use ${@link (LayoutConfig:namespace).(Header:interface).show} instead\n         */\n        hasHeaders?: boolean;\n\n        /**\n         * Constrains the area in which items can be dragged to the layout's container. Will be set to false\n         * automatically when layout.createDragSource() is called.\n         * Default: true\n         */\n        constrainDragToContainer?: boolean;\n\n        /**\n         * If true, the user can re-arrange the layout by dragging items by their tabs to the desired location.\n         * Can be overridden by ItemConfig.reorderEnabled for specific ItemConfigs\n         * Default: true\n         */\n        reorderEnabled?: boolean;\n\n        /**\n         * Decides what will be opened in a new window if the user clicks the popout icon. If true the entire stack will\n         * be transferred to the new window, if false only the active component will be opened.\n         * Default: false\n         */\n        popoutWholeStack?: boolean;\n\n        /**\n         * Specifies if an error is thrown when a popout is blocked by the browser (e.g. by opening it programmatically).\n         * If false, the popout call will fail silently.\n         * Default: true\n         */\n        blockedPopoutsThrowError?: boolean;\n\n        /**\n         * Specifies if all popouts should be closed when the page that created them is closed. Popouts don't have a\n         * strong dependency on their parent and can exist on their own, but can be quite annoying to close by hand. In\n         * addition, any changes made to popouts won't be stored after the parent is closed.\n         * Default: true\n         * @deprecated Will be removed in version 3.\n         */\n        closePopoutsOnUnload?: boolean;\n\n        /**\n         * Specifies if the popout icon should be displayed in the header-bar.\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).popout} instead\n         */\n        showPopoutIcon?: boolean;\n\n        /**\n         * Specifies if the maximise icon should be displayed in the header-bar.\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).maximise} instead\n         */\n        showMaximiseIcon?: boolean;\n\n        /**\n         * Specifies if the close icon should be displayed in the header-bar.\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).close} instead\n         */\n        showCloseIcon?: boolean;\n\n        /**\n         * Specifies Responsive Mode (more info needed).\n         * Default: none\n         */\n        responsiveMode?: ResponsiveMode;\n\n        /**\n         * Specifies Maximum pixel overlap per tab.\n         * Default: 0\n         */\n        tabOverlapAllowance?: number;\n\n        /**\n         *\n         * Default: true\n         */\n        reorderOnTabMenuClick?: boolean;\n\n        /**\n         * Default: 10\n         */\n        tabControlOffset?: number;\n\n        /**\n         * Specifies whether to pop in elements when closing a popout window.\n         * Default: false\n         */\n        popInOnClose?: boolean;\n    }\n\n    export namespace Settings {\n        export function resolve(settings: Settings | undefined): ResolvedLayoutConfig.Settings {\n            const result: ResolvedLayoutConfig.Settings = {\n                constrainDragToContainer: settings?.constrainDragToContainer ?? ResolvedLayoutConfig.Settings.defaults.constrainDragToContainer,\n                reorderEnabled: settings?.reorderEnabled ?? ResolvedLayoutConfig.Settings.defaults.reorderEnabled,\n                popoutWholeStack: settings?.popoutWholeStack ?? ResolvedLayoutConfig.Settings.defaults.popoutWholeStack,\n                blockedPopoutsThrowError: settings?.blockedPopoutsThrowError ?? ResolvedLayoutConfig.Settings.defaults.blockedPopoutsThrowError,\n                closePopoutsOnUnload: settings?.closePopoutsOnUnload ?? ResolvedLayoutConfig.Settings.defaults.closePopoutsOnUnload,\n                responsiveMode: settings?.responsiveMode ?? ResolvedLayoutConfig.Settings.defaults.responsiveMode,\n                tabOverlapAllowance: settings?.tabOverlapAllowance ?? ResolvedLayoutConfig.Settings.defaults.tabOverlapAllowance,\n                reorderOnTabMenuClick: settings?.reorderOnTabMenuClick ?? ResolvedLayoutConfig.Settings.defaults.reorderOnTabMenuClick,\n                tabControlOffset: settings?.tabControlOffset ?? ResolvedLayoutConfig.Settings.defaults.tabControlOffset,\n                popInOnClose: settings?.popInOnClose ?? ResolvedLayoutConfig.Settings.defaults.popInOnClose,\n            }\n            return result;\n        }\n    }\n\n    export interface Dimensions {\n        /**\n         * The width of the borders between the layout items in pixel. Please note: The actual draggable area is wider\n         * than the visible one, making it safe to set this to small values without affecting usability.\n         * Default: 5\n         */\n        borderWidth?: number;\n\n        /**\n         * Default: 15\n         */\n        borderGrabWidth?: number,\n\n        /**\n         * The minimum height an item can be resized to (in pixel).\n         * @deprecated use {@link (LayoutConfig:namespace).(Dimensions:interface).defaultMinItemHeight} instead\n         */\n        minItemHeight?: number;\n\n        /**\n         * The minimum height an item can be resized to.\n         * Default: 0\n         */\n        defaultMinItemHeight?: string;\n\n        /**\n         * The minimum width an item can be resized to (in pixel).\n         * @deprecated use {@link (LayoutConfig:namespace).(Dimensions:interface).defaultMinItemWidth} instead\n         */\n        minItemWidth?: number;\n\n        /**\n         * The minimum width an item can be resized to.\n         * Default: 10px\n         */\n        defaultMinItemWidth?: string;\n\n        /**\n         * The height of the header elements in pixel. This can be changed, but your theme's header css needs to be\n         * adjusted accordingly.\n         * Default: 20\n         */\n        headerHeight?: number;\n\n        /**\n         * The width of the element that appears when an item is dragged (in pixel).\n         * Default: 300\n         */\n        dragProxyWidth?: number;\n\n        /**\n         * The height of the element that appears when an item is dragged (in pixel).\n         * Default: 200\n         */\n        dragProxyHeight?: number;\n    }\n\n    export namespace Dimensions {\n        /** @internal */\n        export function resolve(dimensions: Dimensions | undefined): ResolvedLayoutConfig.Dimensions {\n            const { size: defaultMinItemHeight, sizeUnit: defaultMinItemHeightUnit } = Dimensions.resolveDefaultMinItemHeight(dimensions);\n            const { size: defaultMinItemWidth, sizeUnit: defaultMinItemWidthUnit } = Dimensions.resolveDefaultMinItemWidth(dimensions);\n            const result: ResolvedLayoutConfig.Dimensions = {\n                borderWidth: dimensions?.borderWidth ?? ResolvedLayoutConfig.Dimensions.defaults.borderWidth,\n                borderGrabWidth: dimensions?.borderGrabWidth ?? ResolvedLayoutConfig.Dimensions.defaults.borderGrabWidth,\n                defaultMinItemHeight,\n                defaultMinItemHeightUnit,\n                defaultMinItemWidth,\n                defaultMinItemWidthUnit,\n                headerHeight: dimensions?.headerHeight ?? ResolvedLayoutConfig.Dimensions.defaults.headerHeight,\n                dragProxyWidth: dimensions?.dragProxyWidth ?? ResolvedLayoutConfig.Dimensions.defaults.dragProxyWidth,\n                dragProxyHeight: dimensions?.dragProxyHeight ?? ResolvedLayoutConfig.Dimensions.defaults.dragProxyHeight,\n            }\n            return result;\n        }\n\n        /** @internal */\n        export function fromResolved(resolvedDimensions: ResolvedLayoutConfig.Dimensions): Dimensions {\n            const result: Dimensions = {\n                borderWidth: resolvedDimensions.borderWidth,\n                borderGrabWidth: resolvedDimensions.borderGrabWidth,\n                defaultMinItemHeight: formatSize(resolvedDimensions.defaultMinItemHeight, resolvedDimensions.defaultMinItemHeightUnit),\n                defaultMinItemWidth: formatSize(resolvedDimensions.defaultMinItemWidth, resolvedDimensions.defaultMinItemWidthUnit),\n                headerHeight: resolvedDimensions.headerHeight,\n                dragProxyWidth: resolvedDimensions.dragProxyWidth,\n                dragProxyHeight: resolvedDimensions.dragProxyHeight,\n            };\n\n            return result;\n        }\n\n        /** @internal */\n        export function resolveDefaultMinItemHeight(dimensions: Dimensions | undefined): SizeWithUnit {\n            const height = dimensions?.defaultMinItemHeight;\n            if (height === undefined) {\n                return { size: ResolvedLayoutConfig.Dimensions.defaults.defaultMinItemHeight, sizeUnit: ResolvedLayoutConfig.Dimensions.defaults.defaultMinItemHeightUnit };\n            } else {\n                return parseSize(height, [SizeUnitEnum.Pixel]);\n            }\n        }\n\n        /** @internal */\n        export function resolveDefaultMinItemWidth(dimensions: Dimensions | undefined): SizeWithUnit {\n            const width = dimensions?.defaultMinItemWidth;\n            if (width === undefined) {\n                return { size: ResolvedLayoutConfig.Dimensions.defaults.defaultMinItemWidth, sizeUnit: ResolvedLayoutConfig.Dimensions.defaults.defaultMinItemWidthUnit };\n            } else {\n                return parseSize(width, [SizeUnitEnum.Pixel]);\n            }\n        }\n    }\n\n    export interface Labels {\n        /**\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).close} instead\n         */\n        close?: string;\n\n        /**\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).maximise} instead\n         */\n        maximise?: string;\n\n        /**\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).minimise} instead\n         */\n        minimise?: string;\n\n        /**\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).popin} instead\n         */\n        popin?: string;\n\n        /**\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).popout} instead\n         */\n        popout?: string;\n\n        /**\n         * @deprecated use {@link (LayoutConfig:namespace).(Header:interface).tabDropdown} instead\n         */\n        tabDropdown?: string;\n    }\n\n    export interface Header {\n        /**\n         * Specifies whether header should be displayed, and if so, on which side.\n         * If false, the layout will be displayed with splitters only.\n         * Default: 'top'\n         */\n        show?: false | Side;\n        /**\n         * The tooltip text that appears when hovering over the popout icon or false if popout button not displayed.\n         * Default: 'open in new window'\n         */\n        popout?: false | string;\n        /**\n         * The tooltip text that appears when hovering over the popin icon.\n         * Default: 'pop in'\n         */\n        popin?: string;\n        /**\n         * The tooltip text that appears when hovering over the maximise icon or false if maximised button not displayed.\n         * Default: 'maximise'\n         */\n        maximise?: false | string;\n        /**\n         * The tooltip text that appears when hovering over the close icon.\n         * Default: 'close'\n         */\n        close?: false | string;\n        /**\n         * The tooltip text that appears when hovering over the minimise icon.\n         * Default: 'minimise'\n         */\n        minimise?: string;\n        /**\n         *\n         * Default: 'additional tabs'\n         */\n        tabDropdown?: false | string;\n    }\n\n    export namespace Header {\n        /** @internal */\n        export function resolve(header: Header | undefined,\n            settings: LayoutConfig.Settings | undefined, labels: LayoutConfig.Labels | undefined\n        ): ResolvedLayoutConfig.Header {\n            let show: false | Side;\n            if (header?.show !== undefined) {\n                show = header.show;\n            } else {\n                if (settings !== undefined && settings.hasHeaders !== undefined) {\n                    show = settings.hasHeaders ? ResolvedLayoutConfig.Header.defaults.show : false;\n                } else {\n                    show = ResolvedLayoutConfig.Header.defaults.show;\n                }\n            }\n            const result: ResolvedLayoutConfig.Header = {\n                show,\n                popout: header?.popout ?? labels?.popout ??\n                    (settings?.showPopoutIcon === false ? false : ResolvedLayoutConfig.Header.defaults.popout),\n                dock: header?.popin ?? labels?.popin ?? ResolvedLayoutConfig.Header.defaults.dock,\n                maximise: header?.maximise ?? labels?.maximise ??\n                    (settings?.showMaximiseIcon === false ? false : ResolvedLayoutConfig.Header.defaults.maximise),\n                close: header?.close ?? labels?.close ??\n                    (settings?.showCloseIcon === false ? false : ResolvedLayoutConfig.Header.defaults.close),\n                minimise: header?.minimise ?? labels?.minimise ?? ResolvedLayoutConfig.Header.defaults.minimise,\n                tabDropdown: header?.tabDropdown ?? labels?.tabDropdown ?? ResolvedLayoutConfig.Header.defaults.tabDropdown,\n            }\n            return result;\n        }\n    }\n\n    export function isPopout(config: LayoutConfig): config is PopoutLayoutConfig {\n        return 'parentId' in config || 'indexInParent' in config || 'window' in config;\n    }\n\n    /** @internal */\n    export function resolve(layoutConfig: LayoutConfig): ResolvedLayoutConfig {\n        if (isPopout(layoutConfig)) {\n            return PopoutLayoutConfig.resolve(layoutConfig);\n        } else {\n            let root: RootItemConfig | undefined;\n            if (layoutConfig.root !== undefined) {\n                root = layoutConfig.root;\n            } else {\n                if (layoutConfig.content !== undefined && layoutConfig.content.length > 0) {\n                    root = layoutConfig.content[0];\n                } else {\n                    root = undefined;\n                }\n            }\n            const config: ResolvedLayoutConfig = {\n                resolved: true,\n                root: RootItemConfig.resolve(root),\n                openPopouts: LayoutConfig.resolveOpenPopouts(layoutConfig.openPopouts),\n                dimensions: LayoutConfig.Dimensions.resolve(layoutConfig.dimensions),\n                settings: LayoutConfig.Settings.resolve(layoutConfig.settings),\n                header: LayoutConfig.Header.resolve(layoutConfig.header, layoutConfig.settings, layoutConfig.labels),\n            }\n            return config;\n        }\n    }\n\n    export function fromResolved(config: ResolvedLayoutConfig): LayoutConfig {\n        const result: LayoutConfig = {\n            root: RootItemConfig.fromResolvedOrUndefined(config.root),\n            openPopouts: PopoutLayoutConfig.fromResolvedArray(config.openPopouts),\n            settings: ResolvedLayoutConfig.Settings.createCopy(config.settings),\n            dimensions: LayoutConfig.Dimensions.fromResolved(config.dimensions),\n            header: ResolvedLayoutConfig.Header.createCopy(config.header),\n        };\n        return result;\n    }\n\n    export function isResolved(configOrResolvedConfig: ResolvedLayoutConfig | LayoutConfig): configOrResolvedConfig is ResolvedLayoutConfig {\n        const config = configOrResolvedConfig as ResolvedLayoutConfig;\n        return config.resolved !== undefined && (config.resolved === true);\n    }\n\n    /** @internal */\n    export function resolveOpenPopouts(popoutConfigs: PopoutLayoutConfig[] | undefined): ResolvedPopoutLayoutConfig[] {\n        if (popoutConfigs === undefined) {\n            return [];\n        } else {\n            const count = popoutConfigs.length;\n            const result = new Array<ResolvedPopoutLayoutConfig>(count);\n            for (let i = 0; i < count; i++) {\n                result[i] = PopoutLayoutConfig.resolve(popoutConfigs[i]);\n            }\n            return result;\n        }\n    }\n}\n\n/** @public */\nexport interface PopoutLayoutConfig extends LayoutConfig {\n    /** The id of the element the item will be appended to on popIn\n    * If null, append to topmost layout element\n    */\n    parentId: string | null | undefined;\n    /** The position of this element within its parent\n    * If null, position is last\n    */\n    indexInParent: number | null | undefined;\n    /** @deprecated use {@link (PopoutLayoutConfig:interface).window} */\n    dimensions: PopoutLayoutConfig.Dimensions | undefined; // for backwards compatibility\n    window: PopoutLayoutConfig.Window | undefined;\n}\n\n/** @public */\nexport namespace PopoutLayoutConfig {\n    // Previous versions kept window information in Dimensions key.  Only use for backwards compatibility\n    /** @deprecated use {@link (PopoutLayoutConfig:namespace).(Window:interface)} */\n    export interface Dimensions extends LayoutConfig.Dimensions {\n        /** @deprecated use {@link (PopoutLayoutConfig:namespace).(Window:interface).width} */\n        width?: number | null,\n        /** @deprecated use {@link (PopoutLayoutConfig:namespace).(Window:interface).height} */\n        height?: number | null,\n        /** @deprecated use {@link (PopoutLayoutConfig:namespace).(Window:interface).left} */\n        left?: number | null,\n        /** @deprecated use {@link (PopoutLayoutConfig:namespace).(Window:interface).top} */\n        top?: number | null,\n    }\n\n    export interface Window {\n        width?: number,\n        height?: number,\n        left?: number,\n        top?: number,\n    }\n\n    export namespace Window {\n        /** @internal */\n        export function resolve(window: Window | undefined,\n            dimensions: Dimensions | undefined): ResolvedPopoutLayoutConfig.Window\n        {\n            let result: ResolvedPopoutLayoutConfig.Window;\n            const defaults = ResolvedPopoutLayoutConfig.Window.defaults;\n            if (window !== undefined) {\n                result = {\n                    width: window.width ?? defaults.width,\n                    height: window.height ?? defaults.height,\n                    left: window.left ?? defaults.left,\n                    top: window.top ?? defaults.top,\n                }\n            } else {\n                result = {\n                    width: dimensions?.width ?? defaults.width,\n                    height: dimensions?.height ?? defaults.height,\n                    left: dimensions?.left ?? defaults.left,\n                    top: dimensions?.top ?? defaults.top,\n                }\n            }\n            return result;\n        }\n\n        /** @internal */\n        export function fromResolved(resolvedWindow: ResolvedPopoutLayoutConfig.Window): Window {\n            const result: Window = {\n                width: resolvedWindow.width === null ? undefined : resolvedWindow.width,\n                height: resolvedWindow.height === null ? undefined : resolvedWindow.height,\n                left: resolvedWindow.left === null ? undefined : resolvedWindow.left,\n                top: resolvedWindow.top === null ? undefined : resolvedWindow.top,\n            }\n\n            return result;\n        }\n    }\n\n    /** @internal */\n    export function resolve(popoutConfig: PopoutLayoutConfig): ResolvedPopoutLayoutConfig {\n        let root: RootItemConfig | undefined;\n        if (popoutConfig.root !== undefined) {\n            root = popoutConfig.root;\n        } else {\n            if (popoutConfig.content !== undefined && popoutConfig.content.length > 0) {\n                root = popoutConfig.content[0];\n            } else {\n                root = undefined;\n            }\n        }\n\n        const config: ResolvedPopoutLayoutConfig = {\n            root: RootItemConfig.resolve(root),\n            openPopouts: LayoutConfig.resolveOpenPopouts(popoutConfig.openPopouts),\n            dimensions: LayoutConfig.Dimensions.resolve(popoutConfig.dimensions),\n            settings: LayoutConfig.Settings.resolve(popoutConfig.settings),\n            header: LayoutConfig.Header.resolve(popoutConfig.header, popoutConfig.settings, popoutConfig.labels),\n            parentId: popoutConfig.parentId ?? null,\n            indexInParent: popoutConfig.indexInParent ?? null,\n            window: PopoutLayoutConfig.Window.resolve(popoutConfig.window, popoutConfig.dimensions),\n            resolved: true,\n        }\n        return config;\n    }\n\n    /** @internal */\n    export function fromResolved(resolvedConfig: ResolvedPopoutLayoutConfig): PopoutLayoutConfig {\n        const result: PopoutLayoutConfig = {\n            root: RootItemConfig.fromResolvedOrUndefined(resolvedConfig.root),\n            openPopouts: fromResolvedArray(resolvedConfig.openPopouts),\n            dimensions: LayoutConfig.Dimensions.fromResolved(resolvedConfig.dimensions),\n            settings: ResolvedLayoutConfig.Settings.createCopy(resolvedConfig.settings),\n            header: ResolvedLayoutConfig.Header.createCopy(resolvedConfig.header),\n            parentId: resolvedConfig.parentId,\n            indexInParent: resolvedConfig.indexInParent,\n            window: PopoutLayoutConfig.Window.fromResolved(resolvedConfig.window),\n        }\n\n        return result;\n    }\n\n    /** @internal */\n    export function fromResolvedArray(resolvedArray: ResolvedPopoutLayoutConfig[]): PopoutLayoutConfig[] {\n        const resolvedOpenPopoutCount = resolvedArray.length;\n        const result = new Array<PopoutLayoutConfig>(resolvedOpenPopoutCount);\n        for (let i = 0; i < resolvedOpenPopoutCount; i++) {\n            const resolvedOpenPopout = resolvedArray[i];\n            result[i] = PopoutLayoutConfig.fromResolved(resolvedOpenPopout);\n        }\n\n        return result;\n    }\n}\n\n/** @internal */\nexport interface SizeWithUnit {\n    size: number;\n    sizeUnit: SizeUnitEnum;\n}\n\n/** @internal */\nexport interface UndefinableSizeWithUnit {\n    size: number | undefined;\n    sizeUnit: SizeUnitEnum;\n}\n\n/** @internal */\nexport function parseSize(sizeString: string, allowableSizeUnits: readonly SizeUnitEnum[]): SizeWithUnit {\n    const { numericPart: digitsPart, firstNonNumericCharPart: firstNonDigitPart } = splitStringAtFirstNonNumericChar(sizeString);\n    const size = Number.parseInt(digitsPart, 10);\n    if (isNaN(size)) {\n        throw new ConfigurationError(`${i18nStrings[I18nStringId.InvalidNumberPartInSizeString]}: ${sizeString}`);\n    } else {\n        const sizeUnit = SizeUnitEnum.tryParse(firstNonDigitPart);\n        if (sizeUnit === undefined) {\n            throw new ConfigurationError(`${i18nStrings[I18nStringId.UnknownUnitInSizeString]}: ${sizeString}`)\n        } else {\n            if (!allowableSizeUnits.includes(sizeUnit)) {\n                throw new ConfigurationError(`${i18nStrings[I18nStringId.UnsupportedUnitInSizeString]}: ${sizeString}`)\n            } else {\n                return { size, sizeUnit };\n            }\n        }\n    }\n}\n\n/** @internal */\nexport function formatSize(size: number, sizeUnit: SizeUnitEnum) {\n    return size.toString(10) + SizeUnitEnum.format(sizeUnit);\n}\n\n/** @internal */\nexport function formatUndefinableSize(size: number| undefined, sizeUnit: SizeUnitEnum) {\n    if (size === undefined) {\n        return undefined;\n    } else {\n        return size.toString(10) + SizeUnitEnum.format(sizeUnit);\n    }\n}\n\n/** @public @deprecated - use {@link (LayoutConfig:interface)} */\nexport type Config = LayoutConfig;\n","import { BrowserPopout } from '../controls/browser-popout';\nimport { Tab } from '../controls/tab';\nimport { ComponentItem } from '../items/component-item';\n\n/**\n * A generic and very fast EventEmitter implementation. On top of emitting the actual event it emits an\n * {@link (EventEmitter:namespace).ALL_EVENT} event for every event triggered. This allows to hook into it and proxy events forwards\n * @public\n */\nexport class EventEmitter {\n    /** @internal */\n    private _allEventSubscriptions: EventEmitter.UnknownCallback[] = [];\n    /** @internal */\n    private _subscriptionsMap = new Map<string, EventEmitter.UnknownCallback[]>();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    tryBubbleEvent(name: string, args: unknown[]): void {\n        // overridden by ContentItem\n    }\n\n    /**\n     * Emit an event and notify listeners\n     *\n     * @param eventName - The name of the event\n     * @param args - Additional arguments that will be passed to the listener\n     */\n    emit<K extends keyof EventEmitter.EventParamsMap>(eventName: K, ...args: EventEmitter.EventParamsMap[K]): void {\n        let subcriptions = this._subscriptionsMap.get(eventName);\n\n        if (subcriptions !== undefined) {\n            subcriptions = subcriptions.slice();\n            for (let i = 0; i < subcriptions.length; i++) {\n                const subscription = subcriptions[i];\n                subscription(...args);\n            }\n        }\n\n        this.emitAllEvent(eventName, args);\n        this.tryBubbleEvent(eventName, args);\n    }\n\n    /** @internal */\n    emitUnknown(eventName: string, ...args: EventEmitter.UnknownParams): void {\n        let subs = this._subscriptionsMap.get(eventName);\n\n        if (subs !== undefined) {\n            subs = subs.slice();\n            for (let i = 0; i < subs.length; i++) {\n                subs[i](...args);\n            }\n        }\n\n        this.emitAllEvent(eventName, args);\n        this.tryBubbleEvent(eventName, args);\n    }\n\n    /* @internal **/\n    emitBaseBubblingEvent<K extends keyof EventEmitter.EventParamsMap>(eventName: K): void {\n        const event = new EventEmitter.BubblingEvent(eventName, this);\n        this.emitUnknown(eventName, event);\n    }\n\n    /** @internal */\n    emitUnknownBubblingEvent(eventName: string): void {\n        const event = new EventEmitter.BubblingEvent(eventName, this);\n        this.emitUnknown(eventName, event);\n    }\n\n    /**\n     * Removes a listener for an event.\n     * @param eventName - The name of the event\n     * @param callback - The previously registered callback method (optional)\n     */\n    removeEventListener<K extends keyof EventEmitter.EventParamsMap>(eventName: K, callback: EventEmitter.Callback<K>): void {\n        const unknownCallback = callback as EventEmitter.UnknownCallback;\n        this.removeUnknownEventListener(eventName, unknownCallback);\n    }\n\n    off<K extends keyof EventEmitter.EventParamsMap>(eventName: K, callback: EventEmitter.Callback<K>): void {\n        this.removeEventListener(eventName, callback);\n    }\n\n    /**\n     * Alias for off\n     */\n    unbind = this.removeEventListener;\n\n    /**\n     * Alias for emit\n     */\n    trigger = this.emit;\n\n    /**\n     * Listen for events\n     *\n     * @param eventName - The name of the event to listen to\n     * @param callback - The callback to execute when the event occurs\n     */\n    addEventListener<K extends keyof EventEmitter.EventParamsMap>(eventName: K, callback: EventEmitter.Callback<K>): void {\n        const unknownCallback = callback as EventEmitter.UnknownCallback;\n        this.addUnknownEventListener(eventName, unknownCallback);\n    }\n\n    on<K extends keyof EventEmitter.EventParamsMap>(eventName: K, callback: EventEmitter.Callback<K>): void {\n        this.addEventListener(eventName, callback);\n    }\n\n    /** @internal */\n    private addUnknownEventListener(eventName: string, callback: EventEmitter.UnknownCallback): void {\n        if (eventName === EventEmitter.ALL_EVENT) {\n            this._allEventSubscriptions.push(callback);\n        } else {\n            let subscriptions = this._subscriptionsMap.get(eventName);\n            if (subscriptions !== undefined) {\n                subscriptions.push(callback);\n            } else {\n                subscriptions = [callback];\n                this._subscriptionsMap.set(eventName, subscriptions);\n            }\n        }\n    }\n\n    /** @internal */\n    private removeUnknownEventListener(eventName: string, callback: EventEmitter.UnknownCallback): void {\n        if (eventName === EventEmitter.ALL_EVENT) {\n            this.removeSubscription(eventName, this._allEventSubscriptions, callback);\n        } else {\n            const subscriptions = this._subscriptionsMap.get(eventName);\n            if (subscriptions === undefined) {\n                throw new Error('No subscribtions to unsubscribe for event ' + eventName);\n            } else {\n                this.removeSubscription(eventName, subscriptions, callback);\n            }\n        }\n    }\n\n    /** @internal */\n    private removeSubscription(eventName: string, subscriptions: EventEmitter.UnknownCallback[], callback: EventEmitter.UnknownCallback) {\n        const idx = subscriptions.indexOf(callback);\n        if (idx < 0) {\n            throw new Error('Nothing to unbind for ' + eventName);\n        } else {\n            subscriptions.splice(idx, 1);\n        }\n    }\n\n    /** @internal */\n    private emitAllEvent(eventName: string, args: unknown[]) {\n        const allEventSubscriptionsCount = this._allEventSubscriptions.length;\n        if (allEventSubscriptionsCount > 0) {\n            const unknownArgs = args.slice() as EventEmitter.UnknownParams;\n            unknownArgs.unshift(eventName);\n\n            const allEventSubcriptions = this._allEventSubscriptions.slice();\n\n            for (let i = 0; i < allEventSubscriptionsCount; i++) {\n                allEventSubcriptions[i](...unknownArgs);\n            }\n        }\n    }\n}\n\n/** @public */\nexport namespace EventEmitter {\n    /**\n     * The name of the event that's triggered for every event\n     */\n    export const ALL_EVENT = '__all';\n\n    export const headerClickEventName = 'stackHeaderClick';\n    export const headerTouchStartEventName = 'stackHeaderTouchStart';\n\n    /** @internal */\n    export type UnknownCallback = (this: void, ...args: UnknownParams) => void;\n    export type Callback<K extends keyof EventEmitter.EventParamsMap> = (this: void, ...args: EventParamsMap[K]) => void;\n\n    export interface EventParamsMap {\n        \"__all\": UnknownParams;\n        \"activeContentItemChanged\": ComponentItemParam;\n        \"close\": NoParams;\n        \"closed\": NoParams;\n        \"destroy\": NoParams;\n        \"drag\": DragParams;\n        \"dragStart\": DragStartParams;\n        \"dragStop\": DragStopParams;\n        \"hide\": NoParams;\n        \"initialised\": NoParams;\n        \"itemDropped\": ComponentItemParam;\n        \"maximised\": NoParams;\n        \"minimised\": NoParams;\n        \"open\": NoParams;\n        \"popIn\": NoParams;\n        \"resize\": NoParams;\n        \"show\": NoParams;\n        /** @deprecated - use show instead */\n        \"shown\": NoParams;\n        \"stateChanged\": NoParams;\n        \"tab\": TabParam;\n        \"tabCreated\": TabParam;\n        \"titleChanged\": StringParam;\n        \"windowClosed\": PopoutParam;\n        \"windowOpened\": PopoutParam;\n        \"beforeComponentRelease\": BeforeComponentReleaseParams;\n        \"beforeItemDestroyed\": BubblingEventParam;\n        \"itemCreated\": BubblingEventParam;\n        \"itemDestroyed\": BubblingEventParam;\n        \"focus\": BubblingEventParam;\n        \"blur\": BubblingEventParam;\n        \"stackHeaderClick\": ClickBubblingEventParam;\n        \"stackHeaderTouchStart\": TouchStartBubblingEventParam;\n        \"userBroadcast\": UnknownParams;\n    }\n\n    export type UnknownParams = unknown[];\n    export type NoParams = [];\n    export type UnknownParam = [unknown];\n    export type PopoutParam = [BrowserPopout];\n    export type ComponentItemParam = [ComponentItem];\n    export type TabParam = [Tab];\n    export type BubblingEventParam = [EventEmitter.BubblingEvent]\n    export type StringParam = [string];\n    export type DragStartParams = [originalX: number, originalY: number];\n    export type DragStopParams = [event: PointerEvent | undefined];\n    export type DragParams = [offsetX: number, offsetY: number, event: PointerEvent];\n    export type BeforeComponentReleaseParams = [component: unknown];\n    export type ClickBubblingEventParam = [ClickBubblingEvent];\n    export type TouchStartBubblingEventParam = [TouchStartBubblingEvent];\n\n    export class BubblingEvent {\n        /** @internal */\n        private _isPropagationStopped = false;\n\n        get name(): string { return this._name; }\n        get target(): EventEmitter { return this._target; }\n        /** @deprecated Use {@link (EventEmitter:namespace).(BubblingEvent:class).target} instead */\n        get origin(): EventEmitter { return this._target; }\n        get isPropagationStopped(): boolean { return this._isPropagationStopped; }\n\n        /** @internal */\n        constructor(\n            /** @internal */\n            private readonly _name: string,\n            /** @internal */\n            private readonly _target: EventEmitter) {\n        }\n\n        stopPropagation(): void {\n            this._isPropagationStopped = true;\n        }\n    }\n\n    export class ClickBubblingEvent extends BubblingEvent {\n        get mouseEvent(): MouseEvent { return this._mouseEvent; }\n\n        /** @internal */\n        constructor(name: string, target: EventEmitter,\n            /** @internal */\n            private readonly _mouseEvent: MouseEvent\n        ) {\n            super(name, target);\n        }\n    }\n\n    export class TouchStartBubblingEvent extends BubblingEvent {\n        get touchEvent(): TouchEvent { return this._touchEvent; }\n\n        /** @internal */\n        constructor(name: string, target: EventEmitter,\n            /** @internal */\n            private readonly _touchEvent: TouchEvent\n        ) {\n            super(name, target);\n        }\n    }\n}\n","import { ResolvedLayoutConfig, ResolvedPopoutLayoutConfig } from '../config/resolved-config';\nimport { PopoutBlockedError } from '../errors/external-error';\nimport { UnexpectedNullError, UnexpectedUndefinedError } from '../errors/internal-error';\nimport { ContentItem } from '../items/content-item';\nimport { LayoutManager } from '../layout-manager';\nimport { EventEmitter } from '../utils/event-emitter';\nimport { Rect } from '../utils/types';\nimport { deepExtend, getErrorMessage, getUniqueId } from '../utils/utils';\n\n/**\n * Pops a content item out into a new browser window.\n * This is achieved by\n *\n *    - Creating a new configuration with the content item as root element\n *    - Serializing and minifying the configuration\n *    - Opening the current window's URL with the configuration as a GET parameter\n *    - GoldenLayout when opened in the new window will look for the GET parameter\n *      and use it instead of the provided configuration\n * @public\n */\n\nexport class BrowserPopout extends EventEmitter {\n    /** @internal */\n    private _popoutWindow: Window | null;\n    /** @internal */\n    private _isInitialised;\n    /** @internal */\n    private _checkReadyInterval: ReturnType<typeof setTimeout> | undefined;\n\n    /**\n     * @param _config - GoldenLayout item config\n     * @param _initialWindowSize - A map with width, height, top and left\n     * @internal\n     */\n    constructor(\n        /** @internal */\n        private _config: ResolvedPopoutLayoutConfig,\n        /** @internal */\n        private _initialWindowSize: Rect,\n        /** @internal */\n        private _layoutManager: LayoutManager,\n    ) {\n        super();\n\n        this._isInitialised = false;\n        this._popoutWindow = null;\n        this.createWindow();\n    }\n\n    toConfig(): ResolvedPopoutLayoutConfig {\n        if (this._isInitialised === false) {\n            throw new Error('Can\\'t create config, layout not yet initialised');\n        }\n\n        const glInstance = this.getGlInstance();\n        const glInstanceConfig = glInstance.saveLayout();\n\n        let left: number | null;\n        let top: number | null;\n        if (this._popoutWindow === null) {\n            left = null;\n            top = null;\n        } else {\n            left = this._popoutWindow.screenX ?? this._popoutWindow.screenLeft;\n            top = this._popoutWindow.screenY ?? this._popoutWindow.screenTop;\n        }\n\n        const window: ResolvedPopoutLayoutConfig.Window = {\n            width: this.getGlInstance().width,\n            height: this.getGlInstance().height,\n            left,\n            top,\n        };\n\n        const config: ResolvedPopoutLayoutConfig = {\n            root: glInstanceConfig.root,\n            openPopouts: glInstanceConfig.openPopouts,\n            settings: glInstanceConfig.settings,\n            dimensions: glInstanceConfig.dimensions,\n            header: glInstanceConfig.header,\n            window,\n            parentId: this._config.parentId,\n            indexInParent: this._config.indexInParent,\n            resolved: true,\n        };\n\n        return config;\n    }\n\n    getGlInstance(): LayoutManager {\n        if (this._popoutWindow === null) {\n            throw new UnexpectedNullError('BPGGI24693');\n        }\n        return this._popoutWindow.__glInstance;\n    }\n\n    /**\n     * Retrieves the native BrowserWindow backing this popout.\n     * Might throw an UnexpectedNullError exception when the window is not initialized yet.\n     * @public\n     */\n    getWindow(): Window {\n        if (this._popoutWindow === null) {\n            throw new UnexpectedNullError('BPGW087215');\n        }\n        return this._popoutWindow;\n    }\n\n    close(): void {\n        if (this.getGlInstance()) {\n            this.getGlInstance().closeWindow();\n        } else {\n            try {\n                this.getWindow().close();\n            } catch (e) {\n                //\n            }\n        }\n    }\n\n    /**\n     * Returns the popped out item to its original position. If the original\n     * parent isn't available anymore it falls back to the layout's topmost element\n     */\n    popIn(): void {\n        let parentItem: ContentItem;\n        let index = this._config.indexInParent;\n\n        if (!this._config.parentId) {\n            return;\n        }\n\n        /*\n        * The deepExtend call seems a bit pointless, but it's crucial to\n        * copy the config returned by this.getGlInstance().toConfig()\n        * onto a new object. Internet Explorer keeps the references\n        * to objects on the child window, resulting in the following error\n        * once the child window is closed:\n        *\n        * The callee (server [not server application]) is not available and disappeared\n        */\n        const glInstanceLayoutConfig = this.getGlInstance().saveLayout();\n        const copiedGlInstanceLayoutConfig = deepExtend({}, glInstanceLayoutConfig) as ResolvedLayoutConfig;\n        const copiedRoot = copiedGlInstanceLayoutConfig.root;\n        if (copiedRoot === undefined) {\n            throw new UnexpectedUndefinedError('BPPIR19998');\n        }\n        const groundItem = this._layoutManager.groundItem;\n        if (groundItem === undefined) {\n            throw new UnexpectedUndefinedError('BPPIG34972');\n        }\n        parentItem = groundItem.getItemsByPopInParentId(this._config.parentId)[0];\n\n        /*\n        * Fallback if parentItem is not available. Either add it to the topmost\n        * item or make it the topmost item if the layout is empty\n        */\n        if (!parentItem) {\n            if (groundItem.contentItems.length > 0) {\n                parentItem = groundItem.contentItems[0];\n            } else {\n                parentItem = groundItem;\n            }\n            index = 0;\n        }\n\n        const newContentItem = this._layoutManager.createAndInitContentItem(copiedRoot, parentItem);\n\n        parentItem.addChild(newContentItem, index);\n        if (this._layoutManager.layoutConfig.settings.popInOnClose) {\n            this._onClose();\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Creates the URL and window parameter\n     * and opens a new window\n     * @internal\n     */\n    private createWindow(): void {\n        const url = this.createUrl();\n\n        /**\n         * Bogus title to prevent re-usage of existing window with the\n         * same title. The actual title will be set by the new window's\n         * GoldenLayout instance if it detects that it is in subWindowMode\n         */\n        const target = Math.floor(Math.random() * 1000000).toString(36);\n\n        /**\n         * The options as used in the window.open string\n         */\n        const features = this.serializeWindowFeatures({\n            width: this._initialWindowSize.width,\n            height: this._initialWindowSize.height,\n            innerWidth: this._initialWindowSize.width,\n            innerHeight: this._initialWindowSize.height,\n            menubar: 'no',\n            toolbar: 'no',\n            location: 'no',\n            personalbar: 'no',\n            resizable: 'yes',\n            scrollbars: 'no',\n            status: 'no'\n        });\n\n        this._popoutWindow = globalThis.open(url, target, features);\n\n        if (!this._popoutWindow) {\n            if (this._layoutManager.layoutConfig.settings.blockedPopoutsThrowError === true) {\n                const error = new PopoutBlockedError('Popout blocked');\n                throw error;\n            } else {\n                return;\n            }\n        }\n\n        this._popoutWindow.addEventListener('load', () => this.positionWindow(), { passive: true })\n        this._popoutWindow.addEventListener('beforeunload', () => {\n            if (this._layoutManager.layoutConfig.settings.popInOnClose) {\n                this.popIn();\n            } else {\n                this._onClose();\n            }\n        }, { passive: true })\n\n        /**\n         * Polling the childwindow to find out if GoldenLayout has been initialised\n         * doesn't seem optimal, but the alternatives - adding a callback to the parent\n         * window or raising an event on the window object - both would introduce knowledge\n         * about the parent to the child window which we'd rather avoid\n         */\n        this._checkReadyInterval = setInterval(() => this.checkReady(), 10);\n    }\n\n    /** @internal */\n    private checkReady() {\n        if (this._popoutWindow === null) {\n            throw new UnexpectedNullError('BPCR01844');\n        } else {\n            if (this._popoutWindow.__glInstance && this._popoutWindow.__glInstance.isInitialised) {\n                this.onInitialised();\n                if (this._checkReadyInterval !== undefined) {\n                    clearInterval(this._checkReadyInterval);\n                    this._checkReadyInterval = undefined;\n                }\n            }\n        }\n    }\n\n    /**\n     * Serialises a map of key:values to a window options string\n     *\n     * @param windowOptions -\n     *\n     * @returns serialised window options\n     * @internal\n     */\n    private serializeWindowFeatures(windowOptions: Record<string, string | number>): string {\n        const windowOptionsString: string[] = [];\n\n        for (const key in windowOptions) {\n            windowOptionsString.push(key + '=' + windowOptions[key].toString());\n        }\n\n        return windowOptionsString.join(',');\n    }\n\n    /**\n     * Creates the URL for the new window, including the\n     * config GET parameter\n     *\n     * @returns URL\n     * @internal\n     */\n    private createUrl(): string {\n        const storageKey = 'gl-window-config-' + getUniqueId();\n        const config = ResolvedLayoutConfig.minifyConfig(this._config);\n\n        try {\n            localStorage.setItem(storageKey, JSON.stringify(config));\n        } catch (e) {\n            throw new Error('Error while writing to localStorage ' + getErrorMessage(e));\n        }\n\n        const url = new URL(location.href);\n        url.searchParams.set('gl-window', storageKey);\n        return url.toString();\n    }\n\n    /**\n     * Move the newly created window roughly to\n     * where the component used to be.\n     * @internal\n     */\n    private positionWindow() {\n        if (this._popoutWindow === null) {\n            throw new Error('BrowserPopout.positionWindow: null popoutWindow');\n        } else {\n            this._popoutWindow.moveTo(this._initialWindowSize.left, this._initialWindowSize.top);\n            this._popoutWindow.focus();\n        }\n    }\n\n    /**\n     * Callback when the new window is opened and the GoldenLayout instance\n     * within it is initialised\n     * @internal\n     */\n    private onInitialised(): void {\n        this._isInitialised = true;\n        this.getGlInstance().on('popIn', () => this.popIn());\n        this.emit('initialised');\n    }\n\n    /**\n     * Invoked 50ms after the window unload event\n     * @internal\n     */\n    private _onClose() {\n        setTimeout(() => this.emit('closed'), 50);\n    }\n}\n","import { Header } from './header';\n\n/** @internal */\nexport class HeaderButton {\n    private _element: HTMLElement;\n    private _clickEventListener = (ev: MouseEvent) => this.onClick(ev);\n    private _touchStartEventListener = (ev: TouchEvent) => this.onTouchStart(ev);\n\n    get element(): HTMLElement { return this._element; }\n\n    constructor(private _header: Header, label: string, cssClass: string, private _pushEvent: HeaderButton.PushEvent) {\n        this._element = document.createElement('div');\n        this._element.classList.add(cssClass);\n        this._element.title = label;\n        this._header.on('destroy', () => this.destroy());\n        this._element.addEventListener('click', this._clickEventListener, { passive: true });\n        this._element.addEventListener('touchstart', this._touchStartEventListener, { passive: true });\n        this._header.controlsContainerElement.appendChild(this._element);\n    }\n\n    destroy(): void {\n        this._element.removeEventListener('click', this._clickEventListener);\n        this._element.removeEventListener('touchstart', this._touchStartEventListener);\n        this._element.parentNode?.removeChild(this._element);\n    }\n\n    private onClick(ev: MouseEvent) {\n        this._pushEvent(ev);\n    }\n\n    private onTouchStart(ev: TouchEvent) {\n        this._pushEvent(ev);\n    }\n}\n\n/** @internal */\nexport namespace HeaderButton {\n    export type PushEvent = (this: void, ev: Event) => void;\n}\n","import { DomConstants } from './dom-constants';\nimport { EventEmitter } from './event-emitter';\n\n/** @internal */\nexport class DragListener extends EventEmitter {\n    private _timeout: ReturnType<typeof setTimeout> | undefined;\n    private _allowableTargets: HTMLElement[];\n    private _oDocument: Document;\n    private _eBody: HTMLElement;\n    private _nDelay: number;\n    private _nDistance: number;\n    private _nX: number;\n    private _nY: number;\n    private _nOriginalX: number;\n    private _nOriginalY: number;\n    private _dragging: boolean;\n    private _pointerTracking = false;\n\n    private _pointerDownEventListener = (ev: PointerEvent) => this.onPointerDown(ev);\n    private _pointerMoveEventListener = (ev: PointerEvent) => this.onPointerMove(ev);\n    private _pointerUpEventListener = (ev: PointerEvent) => this.onPointerUp(ev);\n\n    constructor(private _eElement: HTMLElement, extraAllowableChildTargets: HTMLElement[]) {\n        super();\n\n        this._timeout = undefined;\n\n        this._allowableTargets = [_eElement, ...extraAllowableChildTargets];\n        this._oDocument = document;\n        this._eBody = document.body;\n\n        /**\n         * The delay after which to start the drag in milliseconds\n         * Do NOT make too short (previous value of 200 was not long enough for my touchpad)\n         * Should generally rely on the mouse move to start drag.  Not this delay.\n         */\n        this._nDelay = 1800;\n\n        /**\n         * The distance the mouse needs to be moved to qualify as a drag\n         * Previous comment: works better with delay only\n         * ???\n         * Probably somehow needs tuning for different devices\n         */\n        this._nDistance = 10;\n\n        this._nX = 0;\n        this._nY = 0;\n\n        this._nOriginalX = 0;\n        this._nOriginalY = 0;\n\n        this._dragging = false;\n\n        this._eElement.addEventListener('pointerdown', this._pointerDownEventListener, { passive: true });\n    }\n\n    destroy(): void {\n        this.checkRemovePointerTrackingEventListeners();\n\n        this._eElement.removeEventListener('pointerdown', this._pointerDownEventListener);\n    }\n\n    cancelDrag(): void {\n        this.processDragStop(undefined);\n    }\n\n    private onPointerDown(oEvent: PointerEvent) {\n        if (this._allowableTargets.includes(oEvent.target as HTMLElement) && oEvent.isPrimary) {\n            const coordinates = this.getPointerCoordinates(oEvent);\n            this.processPointerDown(coordinates);\n        }\n    }\n\n    private processPointerDown(coordinates: DragListener.PointerCoordinates) {\n        this._nOriginalX = coordinates.x;\n        this._nOriginalY = coordinates.y;\n\n        this._oDocument.addEventListener('pointermove', this._pointerMoveEventListener);\n        this._oDocument.addEventListener('pointerup', this._pointerUpEventListener, { passive: true });\n        this._pointerTracking = true;\n\n        this._timeout = setTimeout(\n            () => {\n                try {\n                    this.startDrag()\n                }\n                catch (err) {\n                    console.error(err);\n                    throw err;\n                }\n            }\n            , this._nDelay);\n    }\n\n    private onPointerMove(oEvent: PointerEvent) {\n        if (this._pointerTracking) {\n            this.processDragMove(oEvent);\n            oEvent.preventDefault();\n        }\n    }\n\n    private processDragMove(dragEvent: PointerEvent) {\n        this._nX = dragEvent.pageX - this._nOriginalX;\n        this._nY = dragEvent.pageY - this._nOriginalY;\n\n        if (this._dragging === false) {\n            if (\n                Math.abs(this._nX) > this._nDistance ||\n                Math.abs(this._nY) > this._nDistance\n            ) {\n                this.startDrag();\n            }\n        }\n\n        if (this._dragging) {\n            this.emit('drag', this._nX, this._nY, dragEvent);\n        }\n    }\n\n    private onPointerUp(oEvent: PointerEvent) {\n        this.processDragStop(oEvent);\n    }\n\n    private processDragStop(dragEvent?: PointerEvent) {\n        if (this._timeout !== undefined) {\n            clearTimeout(this._timeout);\n            this._timeout = undefined;\n        }\n\n        this.checkRemovePointerTrackingEventListeners();\n    \n        if (this._dragging === true) {\n            this._eBody.classList.remove(DomConstants.ClassName.Dragging);\n            this._eElement.classList.remove(DomConstants.ClassName.Dragging);\n            this._oDocument.querySelector('iframe')?.style.setProperty('pointer-events', '');\n            this._dragging = false;\n            this.emit('dragStop', dragEvent);\n        }\n    }\n\n    private checkRemovePointerTrackingEventListeners(): void {\n        if (this._pointerTracking) {\n            this._oDocument.removeEventListener('pointermove', this._pointerMoveEventListener);\n            this._oDocument.removeEventListener('pointerup', this._pointerUpEventListener);\n            this._pointerTracking = false;\n        }    \n    }\n\n    private startDrag() {\n        if (this._timeout !== undefined) {\n            clearTimeout(this._timeout);\n            this._timeout = undefined;\n        }\n        this._dragging = true;\n        this._eBody.classList.add(DomConstants.ClassName.Dragging);\n        this._eElement.classList.add(DomConstants.ClassName.Dragging);\n        this._oDocument.querySelector('iframe')?.style.setProperty('pointer-events', 'none');\n        this.emit('dragStart', this._nOriginalX, this._nOriginalY);\n    }\n\n    private getPointerCoordinates(event: PointerEvent) {\n        const result: DragListener.PointerCoordinates = {\n            x: event.pageX,\n            y: event.pageY\n        };\n        return result;\n    }\n\n}\n\n/** @internal */\nexport namespace DragListener {\n    export interface PointerCoordinates {\n        x: number,\n        y: number,\n    }\n}","import { UnexpectedUndefinedError } from '../errors/internal-error';\nimport { ComponentItem } from '../items/component-item';\nimport { LayoutManager } from '../layout-manager';\nimport { DomConstants } from '../utils/dom-constants';\nimport { DragListener } from '../utils/drag-listener';\n\n/**\n * Represents an individual tab within a Stack's header\n * @public\n */\nexport class Tab {\n    /** @internal */\n    private readonly _element: HTMLDivElement;\n    /** @internal */\n    private readonly _titleElement: HTMLSpanElement;\n    /** @internal */\n    private readonly _closeElement: HTMLDivElement | undefined;\n\n    /** @internal */\n    private _dragListener: DragListener | undefined;\n    /** @internal */\n    private _isActive = false;\n\n    /** @internal */\n    private readonly _tabClickListener = (ev: MouseEvent) => this.onTabClickDown(ev);\n    /** @internal */\n    private readonly _tabTouchStartListener = (ev: TouchEvent) => this.onTabTouchStart(ev);\n    /** @internal */\n    private readonly _closeClickListener = () => this.onCloseClick();\n    /** @internal */\n    private readonly _closeTouchStartListener = () => this.onCloseTouchStart();\n    // /** @internal */\n    // private readonly _closeMouseDownListener = () => this.onCloseMousedown();\n    /** @internal */\n    private readonly _dragStartListener = (x: number, y: number) => this.onDragStart(x, y);\n    /** @internal */\n    private readonly _contentItemDestroyListener = () => this.onContentItemDestroy();\n    /** @internal */\n    private readonly _tabTitleChangedListener = (title: string) => this.setTitle(title)\n\n    get isActive(): boolean { return this._isActive; }\n    // get header(): Header { return this._header; }\n    get componentItem(): ComponentItem { return this._componentItem; }\n    /** @deprecated use {@link (Tab:class).componentItem} */\n    get contentItem(): ComponentItem { return this._componentItem; }\n    get element(): HTMLElement { return this._element; }\n    get titleElement(): HTMLElement { return this._titleElement; }\n    get closeElement(): HTMLElement | undefined { return this._closeElement; }\n    get reorderEnabled(): boolean { return this._dragListener !== undefined; }\n    set reorderEnabled(value: boolean) {\n        if (value !== this.reorderEnabled) {\n            if (value) {\n                this.enableReorder();\n            } else {\n                this.disableReorder();\n            }\n        }\n    }\n\n    /** @internal */\n    constructor(\n        /** @internal */\n        private readonly _layoutManager: LayoutManager,\n        /** @internal */\n        private _componentItem: ComponentItem,\n        /** @internal */\n        private _closeEvent: Tab.CloseEvent | undefined,\n        /** @internal */\n        private _focusEvent: Tab.FocusEvent | undefined,\n        /** @internal */\n        private _dragStartEvent: Tab.DragStartEvent | undefined\n    ) {\n        this._element = document.createElement('div');\n        this._element.classList.add(DomConstants.ClassName.Tab);\n        this._titleElement = document.createElement('span'); \n        this._titleElement.classList.add(DomConstants.ClassName.Title);\n        this._closeElement = document.createElement('div'); \n        this._closeElement.classList.add(DomConstants.ClassName.CloseTab);\n        this._element.appendChild(this._titleElement);\n        this._element.appendChild(this._closeElement);\n\n        if (_componentItem.isClosable) {\n            this._closeElement.style.display = '';\n        } else {\n            this._closeElement.style.display = 'none';\n        }\n\n        this.setTitle(_componentItem.title);\n        this._componentItem.on('titleChanged', this._tabTitleChangedListener);\n\n        const reorderEnabled = _componentItem.reorderEnabled ?? this._layoutManager.layoutConfig.settings.reorderEnabled;\n\n        if (reorderEnabled) {\n            this.enableReorder();\n        }\n\n        this._element.addEventListener('click', this._tabClickListener, { passive: true });\n        this._element.addEventListener('touchstart', this._tabTouchStartListener, { passive: true });\n\n        if (this._componentItem.isClosable) {\n            this._closeElement.addEventListener('click', this._closeClickListener, { passive: true });\n            this._closeElement.addEventListener('touchstart', this._closeTouchStartListener, { passive: true });\n            // this._closeElement.addEventListener('mousedown', this._closeMouseDownListener, { passive: true });\n        } else {\n            this._closeElement.remove();\n            this._closeElement = undefined;\n        }\n\n        this._componentItem.setTab(this);\n        this._layoutManager.emit('tabCreated', this);\n    }\n\n    /**\n     * Sets the tab's title to the provided string and sets\n     * its title attribute to a pure text representation (without\n     * html tags) of the same string.\n     */\n    setTitle(title: string): void {\n        this._titleElement.innerText = title;\n        this._element.title = title;\n    }\n\n    /**\n     * Sets this tab's active state. To programmatically\n     * switch tabs, use Stack.setActiveComponentItem( item ) instead.\n     */\n    setActive(isActive: boolean): void {\n        if (isActive === this._isActive) {\n            return;\n        }\n        this._isActive = isActive;\n\n        if (isActive) {\n            this._element.classList.add(DomConstants.ClassName.Active);\n        } else {\n            this._element.classList.remove(DomConstants.ClassName.Active);\n        }\n    }\n\n    /**\n     * Destroys the tab\n     * @internal\n     */\n    destroy(): void {\n        this._closeEvent = undefined;\n        this._focusEvent = undefined;\n        this._dragStartEvent = undefined;\n        this._element.removeEventListener('click', this._tabClickListener);\n        this._element.removeEventListener('touchstart', this._tabTouchStartListener);\n        this._closeElement?.removeEventListener('click', this._closeClickListener);\n        this._closeElement?.removeEventListener('touchstart', this._closeTouchStartListener);\n        // this._closeElement?.removeEventListener('mousedown', this._closeMouseDownListener);\n        this._componentItem.off('titleChanged', this._tabTitleChangedListener);\n        if (this.reorderEnabled) {\n            this.disableReorder();\n        }\n        this._element.remove();\n    }\n\n    /** @internal */\n    setBlurred(): void {\n        this._element.classList.remove(DomConstants.ClassName.Focused);\n        this._titleElement.classList.remove(DomConstants.ClassName.Focused);\n    }\n\n    /** @internal */\n    setFocused(): void {\n        this._element.classList.add(DomConstants.ClassName.Focused);\n        this._titleElement.classList.add(DomConstants.ClassName.Focused);\n    }\n\n    /**\n     * Callback for the DragListener\n     * @param x - The tabs absolute x position\n     * @param y - The tabs absolute y position\n     * @internal\n     */\n    private onDragStart(x: number, y: number): void {\n        if (this._dragListener === undefined) {\n            throw new UnexpectedUndefinedError('TODSDLU10093');\n        } else {\n            if (this._dragStartEvent === undefined) {\n                throw new UnexpectedUndefinedError('TODS23309');\n            } else {\n                this._dragStartEvent(x, y, this._dragListener, this.componentItem);\n            }\n        }\n\n    }\n\n    /** @internal */\n    private onContentItemDestroy() {\n        if (this._dragListener !== undefined) {\n            this._dragListener.destroy();\n            this._dragListener = undefined;\n        }\n    }\n\n    /**\n     * Callback when the tab is clicked\n     * @internal\n     */\n    private onTabClickDown(event: MouseEvent) {\n        const target = event.target;\n        if (target === this._element || target === this._titleElement) {\n            // left mouse button\n            if (event.button === 0) {\n                // event.stopPropagation();\n                this.notifyFocus();\n\n                // middle mouse button\n            } else if (event.button === 1 && this._componentItem.isClosable) {\n                // event.stopPropagation();\n                this.notifyClose();\n            }\n        }\n    }\n\n    /** @internal */\n    private onTabTouchStart(event: TouchEvent) {\n        if (event.target === this._element) {\n            this.notifyFocus();\n        }\n    }\n\n    /**\n     * Callback when the tab's close button is clicked\n     * @internal\n     */\n    private onCloseClick() {\n        this.notifyClose();\n    }\n\n    /** @internal */\n    private onCloseTouchStart() {\n        this.notifyClose();\n    }\n\n    /**\n     * Callback to capture tab close button mousedown\n     * to prevent tab from activating.\n     * @internal\n     */\n    // private onCloseMousedown(): void {\n    //     // event.stopPropagation();\n    // }\n\n    /** @internal */\n    private notifyClose() {\n        if (this._closeEvent === undefined) {\n            throw new UnexpectedUndefinedError('TNC15007');\n        } else {\n            this._closeEvent(this._componentItem);\n        }\n    }\n\n    /** @internal */\n    private notifyFocus() {\n        if (this._focusEvent === undefined) {\n            throw new UnexpectedUndefinedError('TNA15007');\n        } else {\n            this._focusEvent(this._componentItem);\n        }\n    }\n\n    /** @internal */\n    private enableReorder() {\n        this._dragListener = new DragListener(this._element, [this._titleElement]);\n        this._dragListener.on('dragStart', this._dragStartListener);\n        this._componentItem.on('destroy', this._contentItemDestroyListener);\n    }\n\n    /** @internal */\n    private disableReorder() {\n        if (this._dragListener === undefined) {\n            throw new UnexpectedUndefinedError('TDR87745');\n        } else {\n            this._componentItem.off('destroy', this._contentItemDestroyListener);\n            this._dragListener.off('dragStart', this._dragStartListener);\n            this._dragListener = undefined;\n        }\n    }\n}\n\n/** @public */\nexport namespace Tab {\n    /** @internal */\n    export type CloseEvent = (componentItem: ComponentItem) => void;\n    /** @internal */\n    export type FocusEvent = (componentItem: ComponentItem) => void;\n    /** @internal */\n    export type DragStartEvent = (x: number, y: number, dragListener: DragListener, componentItem: ComponentItem) => void;\n}\n","import { AssertError } from '../errors/internal-error';\nimport { ComponentItem } from '../items/component-item';\nimport { LayoutManager } from '../layout-manager';\nimport { DomConstants } from '../utils/dom-constants';\nimport { DragListener } from '../utils/drag-listener';\nimport { numberToPixels, pixelsToNumber } from '../utils/utils';\nimport { Tab } from './tab';\n\n/** @internal */\nexport class TabsContainer {\n    // There is one tab per ComponentItem in stack.  However they may not be ordered the same\n    private readonly _tabs: Tab[] = [];\n\n    private readonly _dropdownElement: HTMLElement;\n    private readonly _element: HTMLElement;\n    private _lastVisibleTabIndex = -1;\n    private _dropdownActive = false;\n\n    get tabs(): Tab[] { return this._tabs; }\n    get tabCount(): number { return this._tabs.length; }\n    get lastVisibleTabIndex(): number { return this._lastVisibleTabIndex; }\n\n    get element(): HTMLElement { return this._element; }\n    get dropdownElement(): HTMLElement { return this._dropdownElement; }\n    get dropdownActive(): boolean { return this._dropdownActive; }\n\n    constructor(private _layoutManager: LayoutManager,\n        private _componentRemoveEvent: TabsContainer.ComponentItemRemoveEvent,\n        private _componentFocusEvent: TabsContainer.ComponentItemFocusEvent,\n        private _componentDragStartEvent: TabsContainer.ComponentItemDragStartEvent,\n        private _dropdownActiveChangedEvent: TabsContainer.DropdownActiveChangedEvent,\n    ) {\n        this._element = document.createElement('section');\n        this._element.classList.add(DomConstants.ClassName.Tabs);\n\n        this._dropdownElement = document.createElement('section');\n        this._dropdownElement.classList.add(DomConstants.ClassName.TabDropdownList);\n        this._dropdownElement.style.display = 'none';\n    }\n\n    destroy(): void {\n        for (let i = 0; i < this._tabs.length; i++) {\n            this._tabs[i].destroy();\n        }\n    }\n\n    /**\n     * Creates a new tab and associates it with a contentItem\n     * @param index - The position of the tab\n     */\n    createTab(componentItem: ComponentItem, index: number): void {\n        //If there's already a tab relating to the\n        //content item, don't do anything\n        for (let i = 0; i < this._tabs.length; i++) {\n            if (this._tabs[i].componentItem === componentItem) {\n                return;\n            }\n        }\n\n        const tab = new Tab(this._layoutManager,\n            componentItem,\n            (item) => this.handleTabCloseEvent(item),\n            (item) => this.handleTabFocusEvent(item),\n            (x, y, dragListener, item) => this.handleTabDragStartEvent(x, y, dragListener, item));\n\n        if (index === undefined) {\n            index = this._tabs.length;\n        }\n\n        this._tabs.splice(index, 0, tab);\n\n        if (index < this._element.childNodes.length) {\n            this._element.insertBefore(tab.element, this._element.childNodes[index]);\n        } else {\n            this._element.appendChild(tab.element);\n        }\n    }\n\n    removeTab(componentItem: ComponentItem): void {\n        // componentItem cannot be ActiveComponentItem\n        for (let i = 0; i < this._tabs.length; i++) {\n            if (this._tabs[i].componentItem === componentItem) {\n                const tab = this._tabs[i];\n                tab.destroy();\n                this._tabs.splice(i, 1);\n                return;\n            }\n        }\n\n        throw new Error('contentItem is not controlled by this header');\n    }\n\n    processActiveComponentChanged(newActiveComponentItem: ComponentItem): void {\n        let activeIndex = -1;\n        for (let i = 0; i < this._tabs.length; i++) {\n            const isActive = this._tabs[i].componentItem === newActiveComponentItem;\n            this._tabs[i].setActive(isActive);\n            if (isActive) {\n                activeIndex = i;\n            }\n        }\n\n        if (activeIndex < 0) {\n            throw new AssertError('HSACI56632');\n        } else {\n            if (this._layoutManager.layoutConfig.settings.reorderOnTabMenuClick) {\n                /**\n                 * If the tab selected was in the dropdown, move everything down one to make way for this one to be the first.\n                 * This will make sure the most used tabs stay visible.\n                 */\n                if (this._lastVisibleTabIndex !== -1 && activeIndex > this._lastVisibleTabIndex) {\n                    const activeTab = this._tabs[activeIndex];\n                    for (let j = activeIndex; j > 0; j--) {\n                        this._tabs[j] = this._tabs[j - 1];\n                    }\n                    this._tabs[0] = activeTab;\n\n                    // updateTabSizes will always be called after this and it will reposition tab elements\n                }\n            }\n        }\n    }\n\n    /**\n     * Pushes the tabs to the tab dropdown if the available space is not sufficient\n     */\n    updateTabSizes(availableWidth: number, activeComponentItem: ComponentItem | undefined): void {\n        let dropDownActive = false;\n        const success = this.tryUpdateTabSizes(dropDownActive, availableWidth, activeComponentItem);\n        if (!success) {\n            dropDownActive = true;\n            // this will always succeed\n            this.tryUpdateTabSizes(dropDownActive, availableWidth, activeComponentItem)\n        }\n\n        if (dropDownActive !== this._dropdownActive) {\n            this._dropdownActive = dropDownActive;\n            this._dropdownActiveChangedEvent();\n        }\n    }\n\n    tryUpdateTabSizes(dropdownActive: boolean, availableWidth: number, activeComponentItem: ComponentItem | undefined): boolean {\n        if (this._tabs.length > 0) {\n            if (activeComponentItem === undefined) {\n                throw new Error('non-empty tabs must have active component item');\n            }\n\n            let cumulativeTabWidth = 0;\n            let tabOverlapAllowanceExceeded = false;\n            const tabOverlapAllowance = this._layoutManager.layoutConfig.settings.tabOverlapAllowance;\n            const activeIndex = this._tabs.indexOf(activeComponentItem.tab);\n            const activeTab = this._tabs[activeIndex];\n            this._lastVisibleTabIndex = -1;\n\n            for (let i = 0; i < this._tabs.length; i++) {\n                const tabElement = this._tabs[i].element;\n\n                //Put the tab in the tabContainer so its true width can be checked\n                if (tabElement.parentElement !== this._element) {\n                    this._element.appendChild(tabElement);\n                }\n                const tabMarginRightPixels = getComputedStyle(activeTab.element).marginRight;\n                const tabMarginRight = pixelsToNumber(tabMarginRightPixels);\n                const tabWidth = tabElement.offsetWidth + tabMarginRight;\n\n                cumulativeTabWidth += tabWidth;\n\n                //Include the active tab's width if it isn't already\n                //This is to ensure there is room to show the active tab\n                let visibleTabWidth = 0;\n                if (activeIndex <= i) {\n                    visibleTabWidth = cumulativeTabWidth;\n                } else {\n                    const activeTabMarginRightPixels = getComputedStyle(activeTab.element).marginRight;\n                    const activeTabMarginRight = pixelsToNumber(activeTabMarginRightPixels);\n                    visibleTabWidth = cumulativeTabWidth + activeTab.element.offsetWidth + activeTabMarginRight;\n                }\n\n                // If the tabs won't fit, check the overlap allowance.\n                if (visibleTabWidth > availableWidth) {\n\n                    //Once allowance is exceeded, all remaining tabs go to menu.\n                    if (!tabOverlapAllowanceExceeded) {\n\n                        //No overlap for first tab or active tab\n                        //Overlap spreads among non-active, non-first tabs\n                        let overlap: number;\n                        if (activeIndex > 0 && activeIndex <= i) {\n                            overlap = (visibleTabWidth - availableWidth) / (i - 1);\n                        } else {\n                            overlap = (visibleTabWidth - availableWidth) / i;\n                        }\n\n                        //Check overlap against allowance.\n                        if (overlap < tabOverlapAllowance) {\n                            for (let j = 0; j <= i; j++) {\n                                const marginLeft = (j !== activeIndex && j !== 0) ? '-' + numberToPixels(overlap) : '';\n                                this._tabs[j].element.style.zIndex = numberToPixels(i - j);\n                                this._tabs[j].element.style.marginLeft = marginLeft;\n                            }\n                            this._lastVisibleTabIndex = i;\n                            if (tabElement.parentElement !== this._element) {\n                                this._element.appendChild(tabElement);\n                            }\n                        } else {\n                            tabOverlapAllowanceExceeded = true;\n                        }\n\n                    } else if (i === activeIndex) {\n                        //Active tab should show even if allowance exceeded. (We left room.)\n                        tabElement.style.zIndex = 'auto';\n                        tabElement.style.marginLeft = '';\n                        if (tabElement.parentElement !== this._element) {\n                            this._element.appendChild(tabElement);\n                        }\n                    }\n\n                    if (tabOverlapAllowanceExceeded && i !== activeIndex) {\n                        if (dropdownActive) {\n                            //Tab menu already shown, so we just add to it.\n                            tabElement.style.zIndex = 'auto';\n                            tabElement.style.marginLeft = '';\n\n                            if (tabElement.parentElement !== this._dropdownElement) {\n                                this._dropdownElement.appendChild(tabElement);\n                            }\n                        } else {\n                            //We now know the tab menu must be shown, so we have to recalculate everything.\n                            return false;\n                        }\n                    }\n\n                } else {\n                    this._lastVisibleTabIndex = i;\n                    tabElement.style.zIndex = 'auto';\n                    tabElement.style.marginLeft = '';\n                    if (tabElement.parentElement !== this._element) {\n                        this._element.appendChild(tabElement);\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Shows drop down for additional tabs when there are too many to display.\n     */\n    showAdditionalTabsDropdown(): void {\n        this._dropdownElement.style.display = '';\n    }\n\n    /**\n     * Hides drop down for additional tabs when there are too many to display.\n     */\n    hideAdditionalTabsDropdown(): void {\n        this._dropdownElement.style.display = 'none';\n    }\n\n    private handleTabCloseEvent(componentItem: ComponentItem) {\n        this._componentRemoveEvent(componentItem);\n    }\n\n    private handleTabFocusEvent(componentItem: ComponentItem) {\n        this._componentFocusEvent(componentItem);\n    }\n\n    private handleTabDragStartEvent(x: number, y: number, dragListener: DragListener, componentItem: ComponentItem) {\n        this._componentDragStartEvent(x, y, dragListener, componentItem);\n    }\n\n}\n\n/** @internal */\nexport namespace TabsContainer {\n    export type ComponentItemRemoveEvent = (this: void, componentItem: ComponentItem) => void;\n    export type ComponentItemFocusEvent = (this: void, componentItem: ComponentItem) => void;\n    export type ComponentItemDragStartEvent = (this: void, x: number, y: number, dragListener: DragListener, componentItem: ComponentItem) => void;\n    export type DropdownActiveChangedEvent = (this: void) => void;\n}\n","import { UnexpectedUndefinedError } from '../errors/internal-error';\nimport { ComponentItem } from '../items/component-item';\nimport { Stack } from '../items/stack';\nimport { LayoutManager } from '../layout-manager';\nimport { DomConstants } from '../utils/dom-constants';\nimport { DragListener } from '../utils/drag-listener';\nimport { EventEmitter } from '../utils/event-emitter';\nimport { Side } from '../utils/types';\nimport { numberToPixels, setElementDisplayVisibility } from '../utils/utils';\nimport { HeaderButton } from './header-button';\nimport { Tab } from './tab';\nimport { TabsContainer } from './tabs-container';\n\n/**\n * This class represents a header above a Stack ContentItem.\n * @public\n */\nexport class Header extends EventEmitter {\n    /** @internal */\n    private readonly _tabsContainer: TabsContainer;\n    /** @internal */\n    private readonly _element: HTMLElement;\n    /** @internal */\n    private readonly _controlsContainerElement: HTMLElement;\n\n    /** @internal */\n    private readonly _show: boolean;\n    /** @internal */\n    private readonly _popoutEnabled: boolean;\n    /** @internal */\n    private readonly _popoutLabel: string;\n    /** @internal */\n    private readonly _maximiseEnabled: boolean;\n    /** @internal */\n    private readonly _maximiseLabel: string;\n    /** @internal */\n    private readonly _minimiseEnabled: boolean;\n    /** @internal */\n    private readonly _minimiseLabel: string;\n    /** @internal */\n    private readonly _closeEnabled: boolean;\n    /** @internal */\n    private readonly _closeLabel: string;\n    /** @internal */\n    private readonly _tabDropdownEnabled: boolean;\n    /** @internal */\n    private readonly _tabDropdownLabel: string;\n\n    /** @internal */\n    private readonly _tabControlOffset: number;\n\n    /** @internal */\n    private readonly _clickListener = (ev: MouseEvent) => this.onClick(ev);\n    /** @internal */\n    private readonly _touchStartListener = (ev: TouchEvent) => this.onTouchStart(ev);\n    /** @internal */\n    private readonly _documentMouseUpListener: (this: void) => void;\n\n    /** @internal */\n    private _rowColumnClosable = true;\n    /** @internal */\n    private _canRemoveComponent: boolean;\n    /** @internal */\n    private _side: Side;\n    /** @internal */\n    private _leftRightSided: boolean;\n    /** @internal */\n    private readonly _closeButton: HeaderButton | null = null;\n    /** @internal */\n    private readonly _popoutButton: HeaderButton | null = null;\n    /** @internal */\n    private readonly _tabDropdownButton: HeaderButton;\n    /** @internal */\n    private readonly _maximiseButton: HeaderButton | undefined;\n    // /** @internal */\n    // private _activeComponentItem: ComponentItem | null = null; // only used to identify active tab\n\n    get show(): boolean { return this._show; }\n    get side(): Side { return this._side; }\n    get leftRightSided(): boolean { return this._leftRightSided; }\n\n    get layoutManager(): LayoutManager { return this._layoutManager; }\n    get parent(): Stack { return this._parent; }\n    get tabs(): Tab[] { return this._tabsContainer.tabs; }\n    get lastVisibleTabIndex(): number { return this._tabsContainer.lastVisibleTabIndex; }\n\n    get element(): HTMLElement { return this._element; }\n    get tabsContainerElement(): HTMLElement { return this._tabsContainer.element; }\n    get controlsContainerElement(): HTMLElement { return this._controlsContainerElement; }\n\n    /** @internal */\n    constructor(\n        /** @internal */\n        private _layoutManager: LayoutManager,\n        /** @internal */\n        private _parent: Stack,\n        settings: Header.Settings,\n        /** @internal */\n        private readonly _configClosable: boolean,\n        /** @internal */\n        private _getActiveComponentItemEvent: Header.GetActiveComponentItemEvent,\n        closeEvent: Header.CloseEvent,\n        /** @internal */\n        private _popoutEvent: Header.PopoutEvent | undefined,\n        /** @internal */\n        private _maximiseToggleEvent: Header.MaximiseToggleEvent | undefined,\n        /** @internal */\n        private _clickEvent: Header.ClickEvent | undefined,\n        /** @internal */\n        private _touchStartEvent: Header.TouchStartEvent | undefined,\n        /** @internal */\n        private _componentRemoveEvent: Header.ComponentRemoveEvent | undefined,\n        /** @internal */\n        private _componentFocusEvent: Header.ComponentFocusEvent | undefined,\n        /** @internal */\n        private _componentDragStartEvent: Header.ComponentDragStartEvent | undefined,\n    ) {\n        super();\n\n        this._tabsContainer = new TabsContainer(this._layoutManager,\n            (item) => this.handleTabInitiatedComponentRemoveEvent(item),\n            (item) => this.handleTabInitiatedComponentFocusEvent(item),\n            (x, y, dragListener, item) => this.handleTabInitiatedDragStartEvent(x, y, dragListener, item),\n            () => this.processTabDropdownActiveChanged(),\n        );\n\n        this._show = settings.show;\n        this._popoutEnabled = settings.popoutEnabled;\n        this._popoutLabel = settings.popoutLabel;\n        this._maximiseEnabled = settings.maximiseEnabled;\n        this._maximiseLabel = settings.maximiseLabel;\n        this._minimiseEnabled = settings.minimiseEnabled;\n        this._minimiseLabel = settings.minimiseLabel;\n        this._closeEnabled = settings.closeEnabled;\n        this._closeLabel = settings.closeLabel;\n        this._tabDropdownEnabled = settings.tabDropdownEnabled;\n        this._tabDropdownLabel = settings.tabDropdownLabel;\n        this.setSide(settings.side);\n\n        this._canRemoveComponent = this._configClosable;\n\n        this._element = document.createElement('section');\n        this._element.classList.add(DomConstants.ClassName.Header);\n        this._controlsContainerElement = document.createElement('section');\n        this._controlsContainerElement.classList.add(DomConstants.ClassName.Controls);\n        this._element.appendChild(this._tabsContainer.element);\n        this._element.appendChild(this._controlsContainerElement);\n        this._element.appendChild(this._tabsContainer.dropdownElement);\n\n        this._element.addEventListener('click', this._clickListener, { passive: true });\n        this._element.addEventListener('touchstart', this._touchStartListener, { passive: true });\n\n        this._documentMouseUpListener = () => this._tabsContainer.hideAdditionalTabsDropdown()\n        globalThis.document.addEventListener('mouseup', this._documentMouseUpListener, { passive: true });\n\n        this._tabControlOffset = this._layoutManager.layoutConfig.settings.tabControlOffset;\n\n        if (this._tabDropdownEnabled) {\n            this._tabDropdownButton = new HeaderButton(this, this._tabDropdownLabel, DomConstants.ClassName.TabDropdown,\n                () => this._tabsContainer.showAdditionalTabsDropdown()\n            );\n        }\n\n        if (this._popoutEnabled) {\n            this._popoutButton = new HeaderButton(this, this._popoutLabel, DomConstants.ClassName.Popout, () => this.handleButtonPopoutEvent());\n        }\n\n        /**\n         * Maximise control - set the component to the full size of the layout\n         */\n        if (this._maximiseEnabled) {\n            this._maximiseButton = new HeaderButton(this, this._maximiseLabel, DomConstants.ClassName.Maximise,\n                (ev) => this.handleButtonMaximiseToggleEvent(ev)\n            );\n        }\n\n        /**\n         * Close button\n         */\n        if (this._configClosable) {\n            this._closeButton = new HeaderButton(this, this._closeLabel, DomConstants.ClassName.Close, () => closeEvent());\n        }\n\n        this.processTabDropdownActiveChanged();\n    }\n\n    /**\n     * Destroys the entire header\n     * @internal\n     */\n    destroy(): void {\n        this.emit('destroy');\n\n        this._popoutEvent = undefined;\n        this._maximiseToggleEvent = undefined;\n        this._clickEvent = undefined;\n        this._touchStartEvent = undefined;\n        this._componentRemoveEvent = undefined;\n        this._componentFocusEvent = undefined;\n        this._componentDragStartEvent = undefined;\n\n        this._tabsContainer.destroy();\n\n        globalThis.document.removeEventListener('mouseup', this._documentMouseUpListener);\n        this._element.remove();\n    }\n\n    /**\n     * Creates a new tab and associates it with a contentItem\n     * @param index - The position of the tab\n     * @internal\n     */\n    createTab(componentItem: ComponentItem, index: number): void {\n        this._tabsContainer.createTab(componentItem, index);\n    }\n\n    /**\n     * Finds a tab based on the contentItem its associated with and removes it.\n     * Cannot remove tab if it has the active ComponentItem\n     * @internal\n     */\n    removeTab(componentItem: ComponentItem): void {\n        this._tabsContainer.removeTab(componentItem);\n    }\n\n    /** @internal */\n    processActiveComponentChanged(newActiveComponentItem: ComponentItem): void {\n        this._tabsContainer.processActiveComponentChanged(newActiveComponentItem);\n        this.updateTabSizes();\n    }\n\n    /** @internal */\n    setSide(value: Side): void {\n        this._side = value;\n        this._leftRightSided = [Side.right, Side.left].includes(this._side);\n    }\n\n    /**\n     * Programmatically set closability.\n     * @param value - Whether to enable/disable closability.\n     * @returns Whether the action was successful\n     * @internal\n     */\n    setRowColumnClosable(value: boolean): void {\n        this._rowColumnClosable = value;\n        this.updateClosability();\n    }\n\n    /**\n     * Updates the header's closability. If a stack/header is able\n     * to close, but has a non closable component added to it, the stack is no\n     * longer closable until all components are closable.\n     * @internal\n     */\n    updateClosability(): void {\n        let isClosable: boolean;\n        if (!this._configClosable) {\n            isClosable = false;\n        } else {\n            if (!this._rowColumnClosable) {\n                isClosable = false;\n            } else {\n                isClosable = true;\n                const len = this.tabs.length;\n                for (let i = 0; i < len; i++) {\n                    const tab = this._tabsContainer.tabs[i];\n                    const item = tab.componentItem;\n                    if (!item.isClosable) {\n                        isClosable = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (this._closeButton !== null) {\n            setElementDisplayVisibility(this._closeButton.element, isClosable);\n        }\n        if (this._popoutButton !== null) {\n            setElementDisplayVisibility(this._popoutButton.element, isClosable);\n        }\n\n        this._canRemoveComponent = isClosable || this._tabsContainer.tabCount > 1;\n    }\n\n    /** @internal */\n    applyFocusedValue(value: boolean): void {\n        if (value) {\n            this._element.classList.add(DomConstants.ClassName.Focused);\n        } else {\n            this._element.classList.remove(DomConstants.ClassName.Focused);\n        }\n    }\n\n    /** @internal */\n    processMaximised(): void {\n        if (this._maximiseButton === undefined) {\n            throw new UnexpectedUndefinedError('HPMAX16997');\n        } else {\n            this._maximiseButton.element.setAttribute('title', this._minimiseLabel);\n        }\n    }\n\n    /** @internal */\n    processMinimised(): void {\n        if (this._maximiseButton === undefined) {\n            throw new UnexpectedUndefinedError('HPMIN16997');\n        } else {\n            this._maximiseButton.element.setAttribute('title', this._maximiseLabel);\n        }\n    }\n\n    /**\n     * Pushes the tabs to the tab dropdown if the available space is not sufficient\n     * @internal\n     */\n    updateTabSizes(): void {\n        if (this._tabsContainer.tabCount > 0) {\n            const headerHeight = this._show ? this._layoutManager.layoutConfig.dimensions.headerHeight : 0;\n\n            if (this._leftRightSided) {\n                this._element.style.height = '';\n                this._element.style.width = numberToPixels(headerHeight);\n            } else {\n                this._element.style.width = '';\n                this._element.style.height = numberToPixels(headerHeight);\n            }\n            let availableWidth: number;\n            if (this._leftRightSided) {\n                availableWidth = this._element.offsetHeight - this._controlsContainerElement.offsetHeight - this._tabControlOffset;\n            } else {\n                availableWidth = this._element.offsetWidth - this._controlsContainerElement.offsetWidth - this._tabControlOffset;\n            }\n\n            this._tabsContainer.updateTabSizes(availableWidth, this._getActiveComponentItemEvent());\n        }\n    }\n\n    /** @internal */\n    private handleTabInitiatedComponentRemoveEvent(componentItem: ComponentItem) {\n        if (this._canRemoveComponent) {\n            if (this._componentRemoveEvent === undefined) {\n                throw new UnexpectedUndefinedError('HHTCE22294');\n            } else {\n                this._componentRemoveEvent(componentItem);\n            }\n        }\n    }\n\n    /** @internal */\n    private handleTabInitiatedComponentFocusEvent(componentItem: ComponentItem) {\n        if (this._componentFocusEvent === undefined) {\n            throw new UnexpectedUndefinedError('HHTAE22294');\n        } else {\n            this._componentFocusEvent(componentItem);\n        }\n    }\n\n    /** @internal */\n    private handleTabInitiatedDragStartEvent(x: number, y: number, dragListener: DragListener, componentItem: ComponentItem) {\n        if (!this._canRemoveComponent) {\n            dragListener.cancelDrag();\n        } else {\n            if (this._componentDragStartEvent === undefined) {\n                throw new UnexpectedUndefinedError('HHTDSE22294');\n            } else {\n                this._componentDragStartEvent(x, y, dragListener, componentItem);\n            }\n        }\n    }\n\n    /** @internal */\n    private processTabDropdownActiveChanged() {\n        if (this._tabDropdownButton !== undefined) {\n            setElementDisplayVisibility(this._tabDropdownButton.element, this._tabsContainer.dropdownActive);\n        }\n    }\n\n    /** @internal */\n    private handleButtonPopoutEvent() {\n        if (this._layoutManager.layoutConfig.settings.popoutWholeStack) {\n            if (this._popoutEvent === undefined) {\n                throw new UnexpectedUndefinedError('HHBPOE17834');\n            } else {\n                this._popoutEvent();\n            }\n        } else {\n            const activeComponentItem = this._getActiveComponentItemEvent();\n            if (activeComponentItem) {\n                activeComponentItem.popout();\n            }\n            // else: if the stack is empty there won't be an active item (and nothing to popout)\n        }\n    }\n\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private handleButtonMaximiseToggleEvent(ev: Event) {\n        if (this._maximiseToggleEvent === undefined) {\n            throw new UnexpectedUndefinedError('HHBMTE16834');\n        } else {\n            this._maximiseToggleEvent();\n        }\n    }\n\n    /**\n     * Invoked when the header's background is clicked (not it's tabs or controls)\n     * @internal\n     */\n    private onClick(event: MouseEvent) {\n        if (event.target === this._element) {\n            this.notifyClick(event);\n        }\n    }\n\n    /**\n     * Invoked when the header's background is touched (not it's tabs or controls)\n     * @internal\n     */\n    private onTouchStart(event: TouchEvent) {\n        if (event.target === this._element) {\n            this.notifyTouchStart(event);\n        }\n    }\n\n    /** @internal */\n    private notifyClick(ev: MouseEvent) {\n        if (this._clickEvent === undefined) {\n            throw new UnexpectedUndefinedError('HNHC46834');\n        } else {\n            this._clickEvent(ev);\n        }\n    }\n\n    /** @internal */\n    private notifyTouchStart(ev: TouchEvent) {\n        if (this._touchStartEvent === undefined) {\n            throw new UnexpectedUndefinedError('HNHTS46834');\n        } else {\n            this._touchStartEvent(ev);\n        }\n    }\n}\n\n/** @public */\nexport namespace Header {\n    /** @internal */\n    export type GetActiveComponentItemEvent = (this: void) => ComponentItem | undefined;\n    /** @internal */\n    export type CloseEvent = (this: void) => void;\n    /** @internal */\n    export type PopoutEvent = (this: void) => void;\n    /** @internal */\n    export type MaximiseToggleEvent = (this: void) => void;\n    /** @internal */\n    export type ClickEvent = (this: void, ev: MouseEvent) => void;\n    /** @internal */\n    export type TouchStartEvent = (this: void, ev: TouchEvent) => void;\n    /** @internal */\n    export type ComponentRemoveEvent = (this: void, componentItem: ComponentItem) => void;\n    /** @internal */\n    export type ComponentFocusEvent = (this: void, componentItem: ComponentItem) => void;\n    /** @internal */\n    export type ComponentDragStartEvent = (this: void, x: number, y: number, dragListener: DragListener, componentItem: ComponentItem) => void;\n    /** @internal */\n    export type StateChangedEvent = (this: void) => void;\n\n    /** @internal */\n    export interface Settings {\n        show: boolean;\n        side: Side;\n        popoutEnabled: boolean;\n        popoutLabel: string;\n        maximiseEnabled: boolean;\n        maximiseLabel: string;\n        minimiseEnabled: boolean;\n        minimiseLabel: string;\n        closeEnabled: boolean;\n        closeLabel: string;\n        tabDropdownEnabled: boolean;\n        tabDropdownLabel: string;\n    }\n}\n","import { ComponentItemConfig, ItemConfig } from '../config/config';\nimport { ResolvedComponentItemConfig } from '../config/resolved-config';\nimport { Tab } from '../controls/tab';\nimport { AssertError, UnexpectedNullError } from '../errors/internal-error';\nimport { ComponentItem } from '../items/component-item';\nimport { ContentItem } from '../items/content-item';\nimport { LayoutManager } from '../layout-manager';\nimport { EventEmitter } from '../utils/event-emitter';\nimport { JsonValue, LogicalZIndex, LogicalZIndexToDefaultMap } from '../utils/types';\nimport { deepExtend, setElementHeight, setElementWidth } from '../utils/utils';\n\n/** @public */\nexport class ComponentContainer extends EventEmitter {\n    /** @internal */\n    private _componentType: JsonValue;\n    /** @internal */\n    private _boundComponent: ComponentContainer.BindableComponent;\n    /** @internal */\n    private _width: number;\n    /** @internal */\n    private _height: number;\n    /** @internal */\n    private _isClosable;\n    /** @internal */\n    private _initialState: JsonValue | undefined;\n    /** @internal */\n    private _state: JsonValue | undefined;\n    /** @internal */\n    private _visible;\n    /** @internal */\n    private _isShownWithZeroDimensions;\n    /** @internal */\n    private _tab: Tab;\n    /** @internal */\n    private _stackMaximised = false;\n    /** @internal */\n    private _logicalZIndex: LogicalZIndex;\n\n    stateRequestEvent: ComponentContainer.StateRequestEventHandler | undefined;\n    virtualRectingRequiredEvent: ComponentContainer.VirtualRectingRequiredEvent | undefined;\n    virtualVisibilityChangeRequiredEvent: ComponentContainer.VirtualVisibilityChangeRequiredEvent | undefined;\n    virtualZIndexChangeRequiredEvent: ComponentContainer.VirtualZIndexChangeRequiredEvent | undefined;\n\n    get width(): number { return this._width; }\n    get height(): number { return this._height; }\n    get parent(): ComponentItem { return this._parent; }\n    /** @internal @deprecated use {@link (ComponentContainer:class).componentType} */\n    get componentName(): JsonValue { return this._componentType; }\n    get componentType(): JsonValue { return this._componentType; }\n    get virtual(): boolean { return this._boundComponent.virtual; }\n    get component(): ComponentContainer.Component { return this._boundComponent.component; }\n    get tab(): Tab { return this._tab; }\n    get title(): string { return this._parent.title; }\n    get layoutManager(): LayoutManager { return this._layoutManager; }\n    get isHidden(): boolean { return !this._visible; }\n    get visible(): boolean { return this._visible; }\n    get state(): JsonValue | undefined { return this._state; }\n    /** Return the initial component state */\n    get initialState(): JsonValue | undefined { return this._initialState; }\n    /** The inner DOM element where the container's content is intended to live in */\n    get element(): HTMLElement { return this._element; }\n\n    /** @internal */\n    constructor(\n        /** @internal */\n        private readonly _config: ResolvedComponentItemConfig,\n        /** @internal */\n        private readonly _parent: ComponentItem,\n        /** @internal */\n        private readonly _layoutManager: LayoutManager,\n        /** @internal */\n        private readonly _element: HTMLElement,\n        /** @internal */\n        private readonly _updateItemConfigEvent: ComponentContainer.UpdateItemConfigEventHandler,\n        /** @internal */\n        private readonly _showEvent: ComponentContainer.ShowEventHandler,\n        /** @internal */\n        private readonly _hideEvent: ComponentContainer.HideEventHandler,\n        /** @internal */\n        private readonly _focusEvent: ComponentContainer.FocusEventHandler,\n        /** @internal */\n        private readonly _blurEvent: ComponentContainer.BlurEventHandler,\n    ) {\n        super();\n\n        this._width = 0;\n        this._height = 0;\n        this._visible = true;\n        this._isShownWithZeroDimensions = true;\n\n        this._componentType = _config.componentType;\n        this._isClosable = _config.isClosable;\n        this._initialState = _config.componentState;\n        this._state = this._initialState;\n\n        this._boundComponent = this.layoutManager.bindComponent(this, _config);\n\n        this.updateElementPositionPropertyFromBoundComponent();\n    }\n\n    /** @internal */\n    destroy(): void {\n        this.releaseComponent();\n        this.stateRequestEvent = undefined;\n        this.emit('destroy');\n    }\n\n    /** @deprecated use {@link (ComponentContainer:class).element } */\n    getElement(): HTMLElement {\n        return this._element;\n    }\n\n    /**\n     * Hides the container's component item (and hence, the container) if not already hidden.\n     * Emits hide event prior to hiding the container.\n     */\n    hide(): void {\n        this._hideEvent();\n    }\n\n    /**\n     * Shows the container's component item (and hence, the container) if not visible.\n     * Emits show event prior to hiding the container.\n     */\n    show(): void {\n        this._showEvent();\n    }\n\n    /**\n     * Focus this component in Layout.\n     */\n    focus(suppressEvent = false): void {\n        this._focusEvent(suppressEvent);\n    }\n\n    /**\n     * Remove focus from this component in Layout.\n     */\n    blur(suppressEvent = false): void {\n        this._blurEvent(suppressEvent);\n    }\n\n    /**\n     * Set the size from within the container. Traverses up\n     * the item tree until it finds a row or column element\n     * and resizes its items accordingly.\n     *\n     * If this container isn't a descendant of a row or column\n     * it returns false\n     * @param width - The new width in pixel\n     * @param height - The new height in pixel\n     *\n     * @returns resizeSuccesful\n     *\n     * @internal\n     */\n    setSize(width: number, height: number): boolean {\n        let ancestorItem: ContentItem | null = this._parent;\n        if (ancestorItem.isColumn || ancestorItem.isRow || ancestorItem.parent === null) {\n            throw new AssertError('ICSSPRC', 'ComponentContainer cannot have RowColumn Parent');\n        } else {\n            let ancestorChildItem: ContentItem;\n            do {\n                ancestorChildItem = ancestorItem;\n                ancestorItem = ancestorItem.parent;\n            } while (ancestorItem !== null && !ancestorItem.isColumn && !ancestorItem.isRow);\n\n            if (ancestorItem === null) {\n                // no Row or Column found\n                return false;\n            } else {\n                // ancestorItem is Row or Column\n                const direction = ancestorItem.isColumn ? 'height' : 'width';\n                const currentSize = this[direction];\n                if (currentSize === null) {\n                    throw new UnexpectedNullError('ICSSCS11194');\n                } else {\n                    const newSize = direction === 'height' ? height : width;\n\n                    const totalPixel = currentSize * (1 / (ancestorChildItem.size / 100));\n                    const percentage = (newSize / totalPixel) * 100;\n                    const delta = (ancestorChildItem.size - percentage) / (ancestorItem.contentItems.length - 1);\n\n                    for (let i = 0; i < ancestorItem.contentItems.length; i++) {\n                        const ancestorItemContentItem = ancestorItem.contentItems[i];\n                        if (ancestorItemContentItem === ancestorChildItem) {\n                            ancestorItemContentItem.size = percentage;\n                        } else {\n                            ancestorItemContentItem.size += delta;\n                        }\n                    }\n\n                    ancestorItem.updateSize(false);\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    /**\n     * Closes the container if it is closable. Can be called by\n     * both the component within at as well as the contentItem containing\n     * it. Emits a close event before the container itself is closed.\n     */\n    close(): void {\n        if (this._isClosable) {\n            this.emit('close');\n            this._parent.close();\n        }\n    }\n\n    /** Replaces component without affecting layout */\n    replaceComponent(itemConfig: ComponentItemConfig): void {\n        this.releaseComponent();\n\n        if (!ItemConfig.isComponent(itemConfig)) {\n            throw new Error('ReplaceComponent not passed a component ItemConfig')\n        } else {\n            const config = ComponentItemConfig.resolve(itemConfig, false);\n            this._initialState = config.componentState;\n            this._state = this._initialState;\n            this._componentType = config.componentType;\n\n            this._updateItemConfigEvent(config);\n\n            this._boundComponent = this.layoutManager.bindComponent(this, config);\n            this.updateElementPositionPropertyFromBoundComponent();\n\n            if (this._boundComponent.virtual) {\n                if (this.virtualVisibilityChangeRequiredEvent !== undefined) {\n                    this.virtualVisibilityChangeRequiredEvent(this, this._visible);\n                }\n                if (this.virtualRectingRequiredEvent !== undefined) {\n                    this._layoutManager.fireBeforeVirtualRectingEvent(1);\n                    try {\n                        this.virtualRectingRequiredEvent(this, this._width, this._height);\n                    } finally {\n                        this._layoutManager.fireAfterVirtualRectingEvent();\n                    }\n                }\n                this.setBaseLogicalZIndex();\n            }\n\n            this.emit('stateChanged');\n        }\n    }\n\n    /**\n     * Returns the initial component state or the latest passed in setState()\n     * @returns state\n     * @deprecated Use {@link (ComponentContainer:class).initialState}\n     */\n    getState(): JsonValue | undefined {\n        return this._state;\n    }\n\n    /**\n     * Merges the provided state into the current one\n     * @deprecated Use {@link (ComponentContainer:class).stateRequestEvent}\n     */\n    extendState(state: Record<string, unknown>): void {\n        const extendedState = deepExtend(this._state as Record<string, unknown>, state);\n        this.setState(extendedState as JsonValue);\n    }\n\n    /**\n     * Sets the component state\n     * @deprecated Use {@link (ComponentContainer:class).stateRequestEvent}\n     */\n    setState(state: JsonValue): void {\n        this._state = state;\n        this._parent.emitBaseBubblingEvent('stateChanged');\n    }\n\n    /**\n     * Set's the components title\n     */\n    setTitle(title: string): void {\n        this._parent.setTitle(title);\n    }\n\n    /** @internal */\n    setTab(tab: Tab): void {\n        this._tab = tab;\n        this.emit('tab', tab)\n    }\n\n    /** @internal */\n    setVisibility(value: boolean): void {\n        if (this._boundComponent.virtual) {\n            if (this.virtualVisibilityChangeRequiredEvent !== undefined) {\n                this.virtualVisibilityChangeRequiredEvent(this, value);\n            }\n        }\n\n        if (value) {\n            if (!this._visible) {\n                this._visible = true;\n                if (this._height === 0 && this._width === 0) {\n                    this._isShownWithZeroDimensions = true;\n                } else {\n                    this._isShownWithZeroDimensions = false;\n                    this.setSizeToNodeSize(this._width, this._height, true);\n                    this.emitShow();\n                }\n            } else {\n                if (this._isShownWithZeroDimensions && (this._height !== 0 || this._width !== 0)) {\n                    this._isShownWithZeroDimensions = false;\n                    this.setSizeToNodeSize(this._width, this._height, true);\n                    this.emitShow();\n                }\n            }\n        } else {\n            if (this._visible) {\n                this._visible = false;\n                this._isShownWithZeroDimensions = false;\n                this.emitHide();\n            }\n        }\n    }\n\n    setBaseLogicalZIndex(): void {\n        this.setLogicalZIndex(LogicalZIndex.base);\n    }\n\n    setLogicalZIndex(logicalZIndex: LogicalZIndex): void {\n        if (logicalZIndex !== this._logicalZIndex) {\n            this._logicalZIndex = logicalZIndex;\n\n            this.notifyVirtualZIndexChangeRequired();\n        }\n    }\n\n    /**\n     * Set the container's size, but considered temporary (for dragging)\n     * so don't emit any events.\n     * @internal\n     */\n    enterDragMode(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        setElementWidth(this._element, width);\n        setElementHeight(this._element, height);\n\n        this.setLogicalZIndex(LogicalZIndex.drag);\n\n        this.drag();\n    }\n\n    /** @internal */\n    exitDragMode(): void {\n        this.setBaseLogicalZIndex();\n    }\n\n    /** @internal */\n    enterStackMaximised(): void {\n        this._stackMaximised = true;\n        this.setLogicalZIndex(LogicalZIndex.stackMaximised);\n    }\n\n    /** @internal */\n    exitStackMaximised(): void {\n        this.setBaseLogicalZIndex();\n        this._stackMaximised = false;\n    }\n\n    /** @internal */\n    drag(): void {\n        if (this._boundComponent.virtual) {\n            if (this.virtualRectingRequiredEvent !== undefined) {\n                this._layoutManager.fireBeforeVirtualRectingEvent(1);\n                try {\n                    this.virtualRectingRequiredEvent(this, this._width, this._height);\n                } finally {\n                    this._layoutManager.fireAfterVirtualRectingEvent();\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets the container's size. Called by the container's component item.\n     * To instead set the size programmatically from within the component itself,\n     * use the public setSize method\n     * @param width - in px\n     * @param height - in px\n     * @param force - set even if no change\n     * @internal\n     */\n    setSizeToNodeSize(width: number, height: number, force: boolean): void {\n        if (width !== this._width || height !== this._height || force) {\n            this._width = width;\n            this._height = height;\n            setElementWidth(this._element, width);\n            setElementHeight(this._element, height);\n\n            if (this._boundComponent.virtual) {\n                this.addVirtualSizedContainerToLayoutManager();\n            } else {\n                this.emit('resize');\n                this.checkShownFromZeroDimensions();\n            }\n        }\n    }\n\n    /** @internal */\n    notifyVirtualRectingRequired(): void {\n        if (this.virtualRectingRequiredEvent !== undefined) {\n            this.virtualRectingRequiredEvent(this, this._width, this._height);\n            this.emit('resize');\n            this.checkShownFromZeroDimensions();\n        }\n    }\n\n    /** @internal */\n    private notifyVirtualZIndexChangeRequired(): void {\n        if (this.virtualZIndexChangeRequiredEvent !== undefined) {\n            const logicalZIndex = this._logicalZIndex;\n            const defaultZIndex = LogicalZIndexToDefaultMap[logicalZIndex];\n            this.virtualZIndexChangeRequiredEvent(this, logicalZIndex, defaultZIndex);\n        }\n    }\n\n    /** @internal */\n    private updateElementPositionPropertyFromBoundComponent() {\n        if (this._boundComponent.virtual) {\n            this._element.style.position = 'static';\n        } else {\n            this._element.style.position = ''; // set it back to attribute value\n        }\n    }\n\n    /** @internal */\n    private addVirtualSizedContainerToLayoutManager() {\n        this._layoutManager.beginVirtualSizedContainerAdding();\n        try {\n            this._layoutManager.addVirtualSizedContainer(this);\n        } finally {\n            this._layoutManager.endVirtualSizedContainerAdding();\n        }\n    }\n\n    /** @internal */\n    private checkShownFromZeroDimensions() {\n        if (this._isShownWithZeroDimensions && (this._height !== 0 || this._width !== 0)) {\n            this._isShownWithZeroDimensions = false;\n            this.emitShow();\n        }\n    }\n\n    /** @internal */\n    private emitShow(): void {\n        this.emit('shown');\n        this.emit('show');\n    }\n\n    /** @internal */\n    private emitHide(): void {\n        this.emit('hide');\n    }\n\n    /** @internal */\n    private releaseComponent() {\n        if (this._stackMaximised) {\n            this.exitStackMaximised();\n        }\n        this.emit('beforeComponentRelease', this._boundComponent.component);\n        this.layoutManager.unbindComponent(this, this._boundComponent.virtual, this._boundComponent.component);\n    }\n}\n\n/** @public @deprecated use {@link ComponentContainer} */\nexport type ItemContainer = ComponentContainer;\n\n/** @public */\nexport namespace ComponentContainer {\n    export type Component = unknown;\n\n    export interface BindableComponent {\n        component: Component;\n        virtual: boolean;\n    }\n\n    export type StateRequestEventHandler = (this: void) => JsonValue | undefined;\n    export type VirtualRectingRequiredEvent = (this: void, container: ComponentContainer, width: number, height: number) => void;\n    export type VirtualVisibilityChangeRequiredEvent = (this: void, container: ComponentContainer, visible: boolean) => void;\n    export type VirtualZIndexChangeRequiredEvent =\n        (this: void, container: ComponentContainer, logicalZIndex: LogicalZIndex, defaultZIndex: string) => void;\n    /** @internal */\n    export type ShowEventHandler = (this: void) => void;\n    /** @internal */\n    export type HideEventHandler = (this: void) => void;\n    /** @internal */\n    export type FocusEventHandler = (this: void, suppressEvent: boolean) => void;\n    /** @internal */\n    export type BlurEventHandler = (this: void, suppressEvent: boolean) => void;\n    /** @internal */\n    export type UpdateItemConfigEventHandler = (itemConfig: ResolvedComponentItemConfig) => void;\n}\n","import { ResolvedItemConfig } from '../config/resolved-config'\nimport { BrowserPopout } from '../controls/browser-popout'\nimport { AssertError, UnexpectedNullError } from '../errors/internal-error'\nimport { LayoutManager } from '../layout-manager'\nimport { EventEmitter } from '../utils/event-emitter'\nimport { AreaLinkedRect, ItemType, SizeUnitEnum } from '../utils/types'\nimport { getUniqueId, setElementDisplayVisibility } from '../utils/utils'\nimport { ComponentItem } from './component-item'\nimport { ComponentParentableItem } from './component-parentable-item'\nimport { Stack } from './stack'\n\n/**\n * This is the baseclass that all content items inherit from.\n * Most methods provide a subset of what the sub-classes do.\n *\n * It also provides a number of functions for tree traversal\n * @public\n */\n\nexport abstract class ContentItem extends EventEmitter {\n    /** @internal */\n    private _type: ItemType;\n    /** @internal */\n    private _id: string;\n    /** @internal */\n    private _popInParentIds: string[] = [];\n    /** @internal */\n    private _contentItems: ContentItem[];\n    /** @internal */\n    private _isClosable;\n    /** @internal */\n    private _pendingEventPropagations: Record<string, unknown>;\n    /** @internal */\n    private _throttledEvents: string[];\n    /** @internal */\n    private _isInitialised;\n\n    /** @internal */\n    size: number;\n    /** @internal */\n    sizeUnit: SizeUnitEnum;\n    /** @internal */\n    minSize: number | undefined;\n    /** @internal */\n    minSizeUnit: SizeUnitEnum;\n\n    isGround: boolean\n    isRow: boolean\n    isColumn: boolean\n    isStack: boolean\n    isComponent: boolean\n\n    get type(): ItemType { return this._type; }\n    get id(): string { return this._id; }\n    set id(value: string) { this._id = value; }\n    /** @internal */\n    get popInParentIds(): string[] { return this._popInParentIds; }\n    get parent(): ContentItem | null { return this._parent; }\n    get contentItems(): ContentItem[] { return this._contentItems; }\n    get isClosable(): boolean { return this._isClosable; }\n    get element(): HTMLElement { return this._element; }\n    get isInitialised(): boolean { return this._isInitialised; }\n\n    static isStack(item: ContentItem): item is Stack {\n        return item.isStack;\n    }\n\n    static isComponentItem(item: ContentItem): item is ComponentItem {\n        return item.isComponent;\n    }\n\n    static isComponentParentableItem(item: ContentItem): item is ComponentParentableItem {\n        return item.isStack || item.isGround;\n    }\n\n    /** @internal */\n    constructor(public readonly layoutManager: LayoutManager,\n        config: ResolvedItemConfig,\n        /** @internal */\n        private _parent: ContentItem | null,\n        /** @internal */\n        private readonly _element: HTMLElement\n    ) {\n        super();\n\n        this._type = config.type;\n        this._id = config.id;\n\n        this._isInitialised = false;\n        this.isGround = false;\n        this.isRow = false;\n        this.isColumn = false;\n        this.isStack = false;\n        this.isComponent = false;\n\n        this.size = config.size;\n        this.sizeUnit = config.sizeUnit;\n        this.minSize = config.minSize;\n        this.minSizeUnit = config.minSizeUnit;\n\n        this._isClosable = config.isClosable;\n\n        this._pendingEventPropagations = {};\n        this._throttledEvents = ['stateChanged'];\n\n        this._contentItems = this.createContentItems(config.content);\n    }\n\n    /**\n     * Updaters the size of the component and its children, called recursively\n     * @param force - In some cases the size is not updated if it has not changed. In this case, events\n     * (such as ComponentContainer.virtualRectingRequiredEvent) are not fired. Setting force to true, ensures the size is updated regardless, and\n     * the respective events are fired. This is sometimes necessary when a component's size has not changed but it has become visible, and the\n     * relevant events need to be fired.\n     * @internal\n     */\n    abstract updateSize(force: boolean): void;\n\n    /**\n     * Removes a child node (and its children) from the tree\n     * @param contentItem - The child item to remove\n     * @param keepChild - Whether to destroy the removed item\n     */\n    removeChild(contentItem: ContentItem, keepChild = false): void {\n        /*\n         * Get the position of the item that's to be removed within all content items this node contains\n         */\n        const index = this._contentItems.indexOf(contentItem);\n\n        /*\n         * Make sure the content item to be removed is actually a child of this item\n         */\n        if (index === -1) {\n            throw new Error('Can\\'t remove child item. Unknown content item');\n        }\n\n        /**\n\t\t * Call destroy on the content item.\n\t\t * All children are destroyed as well\n\t\t */\n        if (!keepChild) {\n\t\t\tthis._contentItems[index].destroy();\n        }\n\n        /**\n         * Remove the content item from this nodes array of children\n         */\n        this._contentItems.splice(index, 1);\n\n        /**\n         * If this node still contains other content items, adjust their size\n         */\n        if (this._contentItems.length > 0) {\n            this.updateSize(false);\n        } else {\n            /**\n             * If this was the last content item, remove this node as well\n             */\n            if (!this.isGround && this._isClosable === true) {\n                if (this._parent === null) {\n                    throw new UnexpectedNullError('CIUC00874');\n                } else {\n                    this._parent.removeChild(this);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets up the tree structure for the newly added child\n     * The responsibility for the actual DOM manipulations lies\n     * with the concrete item\n     *\n     * @param contentItem -\n     * @param index - If omitted item will be appended\n     * @param suspendResize - Used by descendent implementations\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addChild(contentItem: ContentItem, index?: number | null, suspendResize?: boolean): number {\n        index ??= this._contentItems.length;\n\n        this._contentItems.splice(index, 0, contentItem);\n        contentItem.setParent(this);\n\n        if (this._isInitialised === true && contentItem._isInitialised === false) {\n            contentItem.init();\n        }\n\n        return index;\n    }\n\n    /**\n     * Replaces oldChild with newChild\n     * @param oldChild -\n     * @param newChild -\n     * @internal\n     */\n    replaceChild(oldChild: ContentItem, newChild: ContentItem, destroyOldChild = false): void {\n        // Do not try to replace ComponentItem - will not work\n        const index = this._contentItems.indexOf(oldChild);\n        const parentNode = oldChild._element.parentNode;\n\n        if (index === -1) {\n            throw new AssertError('CIRCI23232', 'Can\\'t replace child. oldChild is not child of this');\n        }\n\n        if (parentNode === null) {\n            throw new UnexpectedNullError('CIRCP23232');\n        } else {\n            parentNode.replaceChild(newChild._element, oldChild._element);\n\n            /*\n            * Optionally destroy the old content item\n            */\n            if (destroyOldChild === true) {\n                oldChild._parent = null;\n                oldChild.destroy(); // will now also destroy all children of oldChild\n            }\n\n            /*\n            * Wire the new contentItem into the tree\n            */\n            this._contentItems[index] = newChild;\n            newChild.setParent(this);\n            // newChild inherits the sizes from the old child:\n            newChild.size = oldChild.size;\n            newChild.sizeUnit = oldChild.sizeUnit;\n            newChild.minSize = oldChild.minSize;\n            newChild.minSizeUnit = oldChild.minSizeUnit;\n\n            //TODO This doesn't update the config... refactor to leave item nodes untouched after creation\n            if (newChild._parent === null) {\n                throw new UnexpectedNullError('CIRCNC45699');\n            } else {\n                if (newChild._parent._isInitialised === true && newChild._isInitialised === false) {\n                    newChild.init();\n                }\n\n                this.updateSize(false);\n            }\n        }\n    }\n\n    /**\n     * Convenience method.\n     * Shorthand for this.parent.removeChild( this )\n     */\n    remove(): void {\n        if (this._parent === null) {\n            throw new UnexpectedNullError('CIR11110');\n        } else {\n            this._parent.removeChild(this);\n        }\n    }\n\n    /**\n     * Removes the component from the layout and creates a new\n     * browser window with the component and its children inside\n     */\n    popout(): BrowserPopout {\n        const parentId = getUniqueId();\n        const browserPopout = this.layoutManager.createPopoutFromContentItem(this, undefined, parentId, undefined);\n        this.emitBaseBubblingEvent('stateChanged');\n        return browserPopout;\n    }\n\n    abstract toConfig(): ResolvedItemConfig;\n\n    /** @internal */\n    calculateConfigContent(): ResolvedItemConfig[] {\n        const contentItems = this._contentItems;\n        const count = contentItems.length;\n        const result = new Array<ResolvedItemConfig>(count);\n        for (let i = 0; i < count; i++) {\n            const item = contentItems[i];\n            result[i] = item.toConfig();\n        }\n        return result;\n    }\n\n    /** @internal */\n    highlightDropZone(x: number, y: number, area: AreaLinkedRect): void {\n        const dropTargetIndicator = this.layoutManager.dropTargetIndicator;\n        if (dropTargetIndicator === null) {\n            throw new UnexpectedNullError('ACIHDZ5593');\n        } else {\n            dropTargetIndicator.highlightArea(area, 1);\n        }\n    }\n\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDrop(contentItem: ContentItem, area: ContentItem.Area): void {\n        this.addChild(contentItem);\n    }\n\n    /** @internal */\n    show(): void {\n        this.layoutManager.beginSizeInvalidation();\n        try {\n            // Not sure why showAllActiveContentItems() was called. GoldenLayout seems to work fine without it.  Left commented code\n            // in source in case a reason for it becomes apparent.\n            // this.layoutManager.showAllActiveContentItems();\n            setElementDisplayVisibility(this._element, true);\n            // this.layoutManager.updateSizeFromContainer();\n\n            for (let i = 0; i < this._contentItems.length; i++) {\n                this._contentItems[i].show();\n            }\n        } finally {\n            this.layoutManager.endSizeInvalidation();\n        }\n    }\n\n    /**\n     * Destroys this item ands its children\n     * @internal\n     */\n    destroy(): void {\n        for (let i = 0; i < this._contentItems.length; i++) {\n            this._contentItems[i].destroy();\n        }\n        this._contentItems = [];\n\n        this.emitBaseBubblingEvent('beforeItemDestroyed');\n        this._element.remove();\n        this.emitBaseBubblingEvent('itemDestroyed');\n    }\n\n    /**\n     * Returns the area the component currently occupies\n     * @internal\n     */\n    getElementArea(element?: HTMLElement): ContentItem.Area | null {\n        element = element ?? this._element;\n\n        const rect = element.getBoundingClientRect();\n        const top = rect.top + document.body.scrollTop;\n        const left = rect.left + document.body.scrollLeft;\n\n        const width = rect.width;\n        const height = rect.height;\n\n        return {\n            x1: left,\n            y1: top,\n            x2: left + width,\n            y2: top + height,\n            surface: width * height,\n            contentItem: this\n        };\n    }\n\n    /**\n     * The tree of content items is created in two steps: First all content items are instantiated,\n     * then init is called recursively from top to bottem. This is the basic init function,\n     * it can be used, extended or overwritten by the content items\n     *\n     * Its behaviour depends on the content item\n     * @internal\n     */\n    init(): void {\n        this._isInitialised = true;\n        this.emitBaseBubblingEvent('itemCreated');\n        this.emitUnknownBubblingEvent(this.type + 'Created');\n    }\n\n    /** @internal */\n    protected setParent(parent: ContentItem): void {\n        this._parent = parent;\n    }\n\n    /** @internal */\n    addPopInParentId(id: string): void {\n        if (!this.popInParentIds.includes(id)) {\n            this.popInParentIds.push(id);\n        }\n    }\n\n    /** @internal */\n    protected initContentItems(): void {\n        for (let i = 0; i < this._contentItems.length; i++) {\n            this._contentItems[i].init();\n        }\n    }\n\n    /** @internal */\n    protected hide(): void {\n        this.layoutManager.beginSizeInvalidation();\n        try {\n            setElementDisplayVisibility(this._element, false);\n            // this.layoutManager.updateSizeFromContainer();\n        } finally {\n            this.layoutManager.endSizeInvalidation();\n        }\n    }\n\n    /** @internal */\n    protected updateContentItemsSize(force: boolean): void {\n        for (let i = 0; i < this._contentItems.length; i++) {\n            this._contentItems[i].updateSize(force);\n        }\n    }\n\n    /**\n     * creates all content items for this node at initialisation time\n     * PLEASE NOTE, please see addChild for adding contentItems at runtime\n     * @internal\n     */\n    private createContentItems(content: readonly ResolvedItemConfig[]) {\n        const count = content.length;\n        const result = new Array<ContentItem>(count);\n        for (let i = 0; i < content.length; i++) {\n            result[i] = this.layoutManager.createContentItem(content[i], this);\n        }\n        return result;\n    }\n\n    /**\n     * Called for every event on the item tree. Decides whether the event is a bubbling\n     * event and propagates it to its parent\n     *\n     * @param name - The name of the event\n     * @param event -\n     * @internal\n     */\n    private propagateEvent(name: string, args: unknown[]) {\n        if (args.length === 1) {\n            const event = args[0];\n            if (event instanceof EventEmitter.BubblingEvent &&\n                event.isPropagationStopped === false &&\n                this._isInitialised === true) {\n\n                /**\n                 * In some cases (e.g. if an element is created from a DragSource) it\n                 * doesn't have a parent and is not a child of GroundItem. If that's the case\n                 * propagate the bubbling event from the top level of the substree directly\n                 * to the layoutManager\n                 */\n                if (this.isGround === false && this._parent) {\n                    this._parent.emitUnknown(name, event);\n                } else {\n                    this.scheduleEventPropagationToLayoutManager(name, event);\n                }\n            }\n        }\n    }\n\n    override tryBubbleEvent(name: string, args: unknown[]): void {\n        if (args.length === 1) {\n            const event = args[0];\n            if (event instanceof EventEmitter.BubblingEvent &&\n                event.isPropagationStopped === false &&\n                this._isInitialised === true\n            ) {\n                /**\n                 * In some cases (e.g. if an element is created from a DragSource) it\n                 * doesn't have a parent and is not a child of GroundItem. If that's the case\n                 * propagate the bubbling event from the top level of the substree directly\n                 * to the layoutManager\n                 */\n                if (this.isGround === false && this._parent) {\n                    this._parent.emitUnknown(name, event);\n                } else {\n                    this.scheduleEventPropagationToLayoutManager(name, event);\n                }\n            }\n        }\n    }\n\n    /**\n     * All raw events bubble up to the Ground element. Some events that\n     * are propagated to - and emitted by - the layoutManager however are\n     * only string-based, batched and sanitized to make them more usable\n     *\n     * @param name - The name of the event\n     * @internal\n     */\n    private scheduleEventPropagationToLayoutManager(name: string, event: EventEmitter.BubblingEvent) {\n        if (this._throttledEvents.indexOf(name) === -1) {\n            this.layoutManager.emitUnknown(name, event);\n        } else {\n            if (this._pendingEventPropagations[name] !== true) {\n                this._pendingEventPropagations[name] = true;\n                globalThis.requestAnimationFrame(() => this.propagateEventToLayoutManager(name, event));\n            }\n        }\n\n    }\n\n    /**\n     * Callback for events scheduled by _scheduleEventPropagationToLayoutManager\n     *\n     * @param name - The name of the event\n     * @internal\n     */\n    private propagateEventToLayoutManager(name: string, event: EventEmitter.BubblingEvent) {\n        this._pendingEventPropagations[name] = false;\n        this.layoutManager.emitUnknown(name, event);\n    }\n}\n\n/** @public */\nexport namespace ContentItem {\n    /** @internal */\n    export interface Area extends AreaLinkedRect {\n        surface: number;\n        contentItem: ContentItem;\n    }\n}\n\n/** @public @deprecated Use {@link (ContentItem:class)} */\nexport type AbstractContentItem = ContentItem;\n","import { ResolvedComponentItemConfig, ResolvedHeaderedItemConfig } from '../config/resolved-config';\nimport { ComponentContainer } from '../container/component-container';\nimport { Tab } from '../controls/tab';\nimport { UnexpectedNullError } from '../errors/internal-error';\nimport { LayoutManager } from '../layout-manager';\nimport { DomConstants } from '../utils/dom-constants';\nimport { ItemType, JsonValue } from '../utils/types';\nimport { getElementWidthAndHeight, setElementHeight, setElementWidth } from '../utils/utils';\nimport { ComponentParentableItem } from './component-parentable-item';\nimport { ContentItem } from './content-item';\n\n/** @public */\nexport class ComponentItem extends ContentItem {\n    /** @internal */\n    private _reorderEnabled: boolean;\n    /** @internal */\n    private _headerConfig: ResolvedHeaderedItemConfig.Header | undefined;\n    /** @internal */\n    private _title: string;\n    /** @internal */\n    private readonly _initialWantMaximise: boolean;\n    /** @internal */\n    private _container: ComponentContainer;\n    /** @internal */\n    private _tab: Tab;\n    /** @internal */\n    private _focused = false;\n\n    /** @internal @deprecated use {@link (ComponentItem:class).componentType} */\n    get componentName(): JsonValue { return this._container.componentType; }\n    get componentType(): JsonValue { return this._container.componentType; }\n    get reorderEnabled(): boolean { return this._reorderEnabled; }\n    /** @internal */\n    get initialWantMaximise(): boolean { return this._initialWantMaximise; }\n    get component(): ComponentContainer.Component | undefined { return this._container.component; }\n    get container(): ComponentContainer { return this._container; }\n    get parentItem(): ComponentParentableItem { return this._parentItem; }\n\n    get headerConfig(): ResolvedHeaderedItemConfig.Header | undefined { return this._headerConfig; }\n    get title(): string { return this._title; }\n    get tab(): Tab { return this._tab; }\n    get focused(): boolean { return this._focused; }\n\n    /** @internal */\n    constructor(\n        layoutManager: LayoutManager,\n        config: ResolvedComponentItemConfig,\n        /** @internal */\n        private _parentItem: ComponentParentableItem\n    ) {\n        super(layoutManager, config, _parentItem, document.createElement('div'));\n\n        this.isComponent = true;\n\n        this._reorderEnabled = config.reorderEnabled;\n\n        this.applyUpdatableConfig(config);\n\n        this._initialWantMaximise = config.maximised;\n\n        const containerElement = document.createElement('div');\n        containerElement.classList.add(DomConstants.ClassName.Content);\n        this.element.appendChild(containerElement);\n        this._container = new ComponentContainer(config, this, layoutManager, containerElement,\n            (itemConfig) => this.handleUpdateItemConfigEvent(itemConfig),\n            () => this.show(),\n            () => this.hide(),\n            (suppressEvent) => this.focus(suppressEvent),\n            (suppressEvent) => this.blur(suppressEvent),\n        );\n    }\n\n    /** @internal */\n    override destroy(): void {\n        this._container.destroy()\n        super.destroy();\n    }\n\n    applyUpdatableConfig(config: ResolvedComponentItemConfig): void {\n        this.setTitle(config.title);\n        this._headerConfig = config.header;\n    }\n\n    toConfig(): ResolvedComponentItemConfig {\n        const stateRequestEvent = this._container.stateRequestEvent;\n        const state = stateRequestEvent === undefined ? this._container.state : stateRequestEvent();\n\n        const result: ResolvedComponentItemConfig = {\n            type: ItemType.component,\n            content: [],\n            size: this.size,\n            sizeUnit: this.sizeUnit,\n            minSize: this.minSize,\n            minSizeUnit: this.minSizeUnit,\n            id: this.id,\n            maximised: false,\n            isClosable: this.isClosable,\n            reorderEnabled: this._reorderEnabled,\n            title: this._title,\n            header: ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig),\n            componentType: ResolvedComponentItemConfig.copyComponentType(this.componentType),\n            componentState: state,\n        }\n\n        return result;\n    }\n\n    close(): void {\n        if (this.parent === null) {\n            throw new UnexpectedNullError('CIC68883');\n        } else {\n            this.parent.removeChild(this, false);\n        }\n    }\n\n    // Used by Drag Proxy\n    /** @internal */\n    enterDragMode(width: number, height: number): void {\n        setElementWidth(this.element, width);\n        setElementHeight(this.element, height);\n        this._container.enterDragMode(width, height);\n    }\n\n    /** @internal */\n    exitDragMode(): void {\n        this._container.exitDragMode();\n    }\n\n    /** @internal */\n    enterStackMaximised(): void {\n        this._container.enterStackMaximised();\n    }\n\n    /** @internal */\n    exitStackMaximised(): void {\n        this._container.exitStackMaximised();\n    }\n\n    // Used by Drag Proxy\n    /** @internal */\n    drag(): void {\n        this._container.drag();\n    }\n\n    /** @internal */\n    override updateSize(force: boolean): void {\n        this.updateNodeSize(force);\n    }\n\n    /** @internal */\n    override init(): void {\n        this.updateNodeSize(false);\n\n        super.init();\n        this._container.emit('open');\n        this.initContentItems();\n    }\n\n    /**\n     * Set this component's title\n     *\n     * @public\n     * @param title -\n     */\n\n    setTitle(title: string): void {\n        this._title = title;\n        this.emit('titleChanged', title);\n        this.emit('stateChanged');\n    }\n\n    setTab(tab: Tab): void {\n        this._tab = tab;\n        this.emit('tab', tab)\n        this._container.setTab(tab);\n    }\n\n    /** @internal */\n    override hide(): void {\n        super.hide();\n        this._container.setVisibility(false);\n    }\n\n    /** @internal */\n    override show(): void {\n        super.show();\n        this._container.setVisibility(true);\n    }\n\n    /**\n     * Focuses the item if it is not already focused\n     */\n    focus(suppressEvent = false): void {\n        this.parentItem.setActiveComponentItem(this, true, suppressEvent);\n    }\n\n    /** @internal */\n    setFocused(suppressEvent: boolean): void {\n        this._focused = true;\n        this.tab.setFocused();\n        if (!suppressEvent) {\n            this.emitBaseBubblingEvent('focus');\n        }\n    }\n\n    /**\n     * Blurs (defocuses) the item if it is focused\n     */\n    blur(suppressEvent = false): void {\n        if (this._focused) {\n            this.layoutManager.setFocusedComponentItem(undefined, suppressEvent);\n        }\n    }\n\n    /** @internal */\n    setBlurred(suppressEvent: boolean): void {\n        this._focused = false;\n        this.tab.setBlurred();\n        if (!suppressEvent) {\n            this.emitBaseBubblingEvent('blur');\n        }\n    }\n\n    /** @internal */\n    protected override setParent(parent: ContentItem): void {\n        this._parentItem = parent as ComponentParentableItem;\n        super.setParent(parent);\n    }\n\n    /** @internal */\n    private handleUpdateItemConfigEvent(itemConfig: ResolvedComponentItemConfig) {\n        this.applyUpdatableConfig(itemConfig);\n    }\n\n    /** @internal */\n    private updateNodeSize(force: boolean): void {\n        if (this.element.style.display !== 'none') {\n            // Do not update size of hidden components to prevent unwanted reflows\n\n            const { width, height } = getElementWidthAndHeight(this.element);\n            this._container.setSizeToNodeSize(width, height, force);\n        }\n    }\n}\n\n/** @public @deprecated use {@link (ComponentItem:class)} */\nexport type Component = ComponentItem;\n\n/** @public */\nexport namespace ComponentItem {\n    export type Component = ComponentContainer.Component;\n}\n","import { ComponentItem } from './component-item';\nimport { ContentItem } from './content-item';\n\nexport abstract class ComponentParentableItem extends ContentItem {\n    /** @internal */\n    private _focused = false;\n\n    get focused(): boolean { return this._focused; }\n\n    /** @internal */\n    setFocusedValue(value: boolean): void {\n        this._focused = value;\n    }\n\n    abstract setActiveComponentItem(item: ComponentItem, focus: boolean, suppressFocusEvent: boolean): void;\n}\n","import { ComponentItemConfig, ItemConfig } from '../config/config';\nimport { ResolvedComponentItemConfig, ResolvedHeaderedItemConfig, ResolvedItemConfig, ResolvedStackItemConfig } from '../config/resolved-config';\nimport { Header } from '../controls/header';\nimport { AssertError, UnexpectedNullError, UnexpectedUndefinedError } from '../errors/internal-error';\nimport { LayoutManager } from '../layout-manager';\nimport { DomConstants } from '../utils/dom-constants';\nimport { DragListener } from '../utils/drag-listener';\nimport { EventEmitter } from '../utils/event-emitter';\nimport { AreaLinkedRect, ItemType, JsonValue, Side, SizeUnitEnum, WidthAndHeight, WidthOrHeightPropertyName } from '../utils/types';\nimport {\n    getElementWidthAndHeight,\n    numberToPixels,\n    setElementDisplayVisibility\n} from '../utils/utils';\nimport { ComponentItem } from './component-item';\nimport { ComponentParentableItem } from './component-parentable-item';\nimport { ContentItem } from './content-item';\n\n/** @public */\nexport class Stack extends ComponentParentableItem {\n    /** @internal */\n    private readonly _headerConfig: ResolvedHeaderedItemConfig.Header | undefined;\n    /** @internal */\n    private readonly _header: Header;\n    /** @internal */\n    private readonly _childElementContainer: HTMLElement;\n    /** @internal */\n    private readonly _maximisedEnabled: boolean;\n    /** @internal */\n    private _activeComponentItem: ComponentItem | undefined;\n    /** @internal */\n    private _dropSegment: Stack.Segment;\n    /** @internal */\n    private _dropIndex: number;\n    /** @internal */\n    private _contentAreaDimensions: Stack.ContentAreaDimensions;\n    /** @internal */\n    private _headerSideChanged = false;\n    /** @internal */\n    private readonly _initialWantMaximise: boolean;\n    /** @internal */\n    private _initialActiveItemIndex: number;\n\n    /** @internal */\n    private _resizeListener = () => this.handleResize();\n    /** @internal */\n    private _maximisedListener = () => this.handleMaximised();\n    /** @internal */\n    private _minimisedListener = () => this.handleMinimised();\n\n    get childElementContainer(): HTMLElement { return this._childElementContainer; }\n    get header(): Header { return this._header; }\n    get headerShow(): boolean { return this._header.show; }\n    get headerSide(): Side { return this._header.side; }\n    get headerLeftRightSided(): boolean { return this._header.leftRightSided; }\n    /** @internal */\n    get contentAreaDimensions(): Stack.ContentAreaDimensions | undefined { return this._contentAreaDimensions; }\n    /** @internal */\n    get initialWantMaximise(): boolean { return this._initialWantMaximise; }\n    get isMaximised(): boolean { return this === this.layoutManager.maximisedStack; }\n    get stackParent(): ContentItem {\n        if (!this.parent) {\n            throw new Error('Stack should always have a parent');\n        }\n        return this.parent;\n    }\n\n    /** @internal */\n    constructor(layoutManager: LayoutManager, config: ResolvedStackItemConfig, parent: ContentItem) {\n        super(layoutManager, config, parent, Stack.createElement(document));\n\n        this._headerConfig = config.header;\n        const layoutHeaderConfig = layoutManager.layoutConfig.header;\n        const configContent = config.content;\n        // If stack has only one component, then we can also check this for header settings\n        let componentHeaderConfig: ResolvedHeaderedItemConfig.Header | undefined;\n        if (configContent.length !== 1) {\n            componentHeaderConfig = undefined;\n        } else {\n            const firstChildItemConfig = configContent[0];\n            componentHeaderConfig = (firstChildItemConfig as ResolvedHeaderedItemConfig).header; // will be undefined if not component (and wont be stack)\n        }\n\n        this._initialWantMaximise = config.maximised;\n        this._initialActiveItemIndex = config.activeItemIndex ?? 0; // make sure defined\n\n        // check for defined value for each item in order of Stack (this Item), Component (first child), Manager.\n        const show = this._headerConfig?.show ?? componentHeaderConfig?.show ?? layoutHeaderConfig.show;\n        const popout = this._headerConfig?.popout ?? componentHeaderConfig?.popout ?? layoutHeaderConfig.popout;\n        const maximise = this._headerConfig?.maximise ?? componentHeaderConfig?.maximise ?? layoutHeaderConfig.maximise;\n        const close = this._headerConfig?.close ?? componentHeaderConfig?.close ?? layoutHeaderConfig.close;\n        const minimise = this._headerConfig?.minimise ?? componentHeaderConfig?.minimise ?? layoutHeaderConfig.minimise;\n        const tabDropdown = this._headerConfig?.tabDropdown ?? componentHeaderConfig?.tabDropdown ?? layoutHeaderConfig.tabDropdown;\n        this._maximisedEnabled = maximise !== false;\n        const headerSettings: Header.Settings = {\n            show: show !== false,\n            side: show === false ? Side.top : show,\n            popoutEnabled: popout !== false,\n            popoutLabel: popout === false ? '' : popout,\n            maximiseEnabled: this._maximisedEnabled,\n            maximiseLabel: maximise === false ? '' : maximise,\n            closeEnabled: close !== false,\n            closeLabel: close === false ? '' : close,\n            minimiseEnabled: true,\n            minimiseLabel: minimise,\n            tabDropdownEnabled: tabDropdown !== false,\n            tabDropdownLabel: tabDropdown === false ? '' : tabDropdown,\n        };\n\n        this._header = new Header(layoutManager,\n            this, headerSettings,\n            config.isClosable && close !== false,\n            () => this.getActiveComponentItem(),\n            () => this.remove(),\n            () => this.handlePopoutEvent(),\n            () => this.toggleMaximise(),\n            (ev) => this.handleHeaderClickEvent(ev),\n            (ev) => this.handleHeaderTouchStartEvent(ev),\n            (item) => this.handleHeaderComponentRemoveEvent(item),\n            (item) => this.handleHeaderComponentFocusEvent(item),\n            (x, y, dragListener, item) => this.handleHeaderComponentStartDragEvent(x, y, dragListener, item),\n        );\n\n        // this._dropZones = {};\n\n        this.isStack = true;\n\n        this._childElementContainer = document.createElement('section');\n        this._childElementContainer.classList.add(DomConstants.ClassName.Items);\n\n        this.on('resize', this._resizeListener);\n        if (this._maximisedEnabled) {\n            this.on('maximised', this._maximisedListener);\n            this.on('minimised', this._minimisedListener);\n        }\n\n        this.element.appendChild(this._header.element);\n        this.element.appendChild(this._childElementContainer);\n\n        this.setupHeaderPosition();\n        this._header.updateClosability();\n    }\n\n    /** @internal */\n    override updateSize(force: boolean): void {\n        this.layoutManager.beginVirtualSizedContainerAdding();\n        try {\n            this.updateNodeSize();\n            this.updateContentItemsSize(force);\n        } finally {\n            this.layoutManager.endVirtualSizedContainerAdding();\n        }\n    }\n\n    /** @internal */\n    override init(): void {\n        if (this.isInitialised === true) return;\n\n        this.updateNodeSize();\n\n        for (let i = 0; i < this.contentItems.length; i++) {\n            this._childElementContainer.appendChild(this.contentItems[i].element);\n        }\n\n        super.init();\n\n        const contentItems = this.contentItems;\n        const contentItemCount = contentItems.length;\n        if (contentItemCount > 0) { // contentItemCount will be 0 on drag drop\n            if (this._initialActiveItemIndex < 0 || this._initialActiveItemIndex >= contentItemCount) {\n                throw new Error(`ActiveItemIndex out of range: ${this._initialActiveItemIndex} id: ${this.id}`);\n            } else {\n                for (let i = 0; i < contentItemCount; i++) {\n                    const contentItem = contentItems[i];\n                    if (!(contentItem instanceof ComponentItem)) {\n                        throw new Error(`Stack Content Item is not of type ComponentItem: ${i} id: ${this.id}`);\n                    } else {\n                        this._header.createTab(contentItem, i);\n                        contentItem.hide();\n                        contentItem.container.setBaseLogicalZIndex();\n                    }\n                }\n\n                this.setActiveComponentItem(contentItems[this._initialActiveItemIndex] as ComponentItem, false);\n\n                this._header.updateTabSizes();\n            }\n        }\n\n        this._header.updateClosability();\n        this.initContentItems();\n    }\n\n    /** @deprecated Use {@link (Stack:class).setActiveComponentItem} */\n    setActiveContentItem(item: ContentItem): void {\n        if (!ContentItem.isComponentItem(item)) {\n            throw new Error('Stack.setActiveContentItem: item is not a ComponentItem');\n        } else {\n            this.setActiveComponentItem(item, false);\n        }\n    }\n\n    setActiveComponentItem(componentItem: ComponentItem, focus: boolean, suppressFocusEvent = false): void {\n        if (this._activeComponentItem !== componentItem) {\n            if (this.contentItems.indexOf(componentItem) === -1) {\n                throw new Error('componentItem is not a child of this stack');\n            } else {\n                this.layoutManager.beginSizeInvalidation();\n                try {\n                    if (this._activeComponentItem !== undefined) {\n                        this._activeComponentItem.hide();\n                    }\n                    this._activeComponentItem = componentItem;\n                    this._header.processActiveComponentChanged(componentItem);\n                    componentItem.show();\n                } finally {\n                    this.layoutManager.endSizeInvalidation();\n                }\n\n                this.emit('activeContentItemChanged', componentItem);\n                this.layoutManager.emit('activeContentItemChanged', componentItem);\n                this.emitStateChangedEvent();\n            }\n        }\n\n        if (this.focused || focus) {\n            this.layoutManager.setFocusedComponentItem(componentItem, suppressFocusEvent);\n        }\n    }\n\n    /** @deprecated Use {@link (Stack:class).getActiveComponentItem} */\n    getActiveContentItem(): ContentItem | null {\n        return this.getActiveComponentItem() ?? null;\n    }\n\n    getActiveComponentItem(): ComponentItem | undefined {\n        return this._activeComponentItem;\n    }\n\n    /** @internal */\n    focusActiveContentItem(): void {\n        this._activeComponentItem?.focus();\n    }\n\n    /** @internal */\n    override setFocusedValue(value: boolean): void {\n        this._header.applyFocusedValue(value);\n        super.setFocusedValue(value);\n    }\n\n    /** @internal */\n    setRowColumnClosable(value: boolean): void {\n        this._header.setRowColumnClosable(value);\n    }\n\n    newComponent(componentType: JsonValue, componentState?: JsonValue, title?: string, index?: number): ComponentItem {\n        const itemConfig: ComponentItemConfig = {\n            type: 'component',\n            componentType,\n            componentState,\n            title,\n        };\n        return this.newItem(itemConfig, index) as ComponentItem;\n    }\n\n    addComponent(componentType: JsonValue, componentState?: JsonValue, title?: string, index?: number): number {\n        const itemConfig: ComponentItemConfig = {\n            type: 'component',\n            componentType,\n            componentState,\n            title,\n        };\n        return this.addItem(itemConfig, index);\n    }\n\n    newItem(itemConfig: ComponentItemConfig,  index?: number): ContentItem {\n        index = this.addItem(itemConfig, index);\n        return this.contentItems[index];\n    }\n\n    addItem(itemConfig: ComponentItemConfig, index?: number): number {\n        this.layoutManager.checkMinimiseMaximisedStack();\n\n        const resolvedItemConfig = ItemConfig.resolve(itemConfig, false);\n        const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, this);\n        return this.addChild(contentItem, index);\n    }\n\n    override addChild(contentItem: ContentItem, index?: number, focus = false): number {\n        if(index !== undefined && index > this.contentItems.length){\n            index -= 1;\n            throw new AssertError('SAC99728'); // undisplayChild() removed so this condition should no longer occur\n        }\n\n        if (!(contentItem instanceof ComponentItem)) {\n            throw new AssertError('SACC88532'); // Stacks can only have Component children\n        } else {\n            index = super.addChild(contentItem, index);\n            this._childElementContainer.appendChild(contentItem.element);\n            this._header.createTab(contentItem, index);\n            this.setActiveComponentItem(contentItem, focus);\n            this._header.updateTabSizes();\n            this.updateSize(false);\n            contentItem.container.setBaseLogicalZIndex();\n            this._header.updateClosability();\n            this.emitStateChangedEvent();\n            return index;\n        }\n    }\n\n    override removeChild(contentItem: ContentItem, keepChild: boolean): void {\n        const componentItem = contentItem as ComponentItem;\n        const index = this.contentItems.indexOf(componentItem);\n        const stackWillBeDeleted = this.contentItems.length === 1;\n\n        if (this._activeComponentItem === componentItem) {\n            if (componentItem.focused) {\n                componentItem.blur();\n            }\n            if (!stackWillBeDeleted) {\n                // At this point we're already sure we have at least one content item left *after*\n                // removing contentItem, so we can safely assume index 1 is a valid one if\n                // the index of contentItem is 0, otherwise we just use the previous content item.\n                const newActiveComponentIdx = index === 0 ? 1 : index - 1;\n                this.setActiveComponentItem(this.contentItems[newActiveComponentIdx] as ComponentItem, false);\n            }\n        }\n\n        this._header.removeTab(componentItem);\n\n        super.removeChild(componentItem, keepChild);\n\n        if (!stackWillBeDeleted) {\n            this._header.updateClosability();\n        }\n\n        this.emitStateChangedEvent();\n    }\n\n    /**\n     * Maximises the Item or minimises it if it is already maximised\n     */\n    toggleMaximise(): void {\n        if (this.isMaximised) {\n            this.minimise();\n        } else {\n            this.maximise();\n        }\n    }\n\n    maximise(): void {\n        if (!this.isMaximised) {\n            this.layoutManager.setMaximisedStack(this);\n            const contentItems = this.contentItems;\n            const contentItemCount = contentItems.length;\n            for (let i = 0; i < contentItemCount; i++) {\n                const contentItem = contentItems[i];\n                if (contentItem instanceof ComponentItem) {\n                    contentItem.enterStackMaximised();\n                } else {\n                    throw new AssertError('SMAXI87773');\n                }\n            }\n            this.emitStateChangedEvent();\n        }\n    }\n\n    minimise(): void {\n        if (this.isMaximised) {\n            this.layoutManager.setMaximisedStack(undefined);\n            const contentItems = this.contentItems;\n            const contentItemCount = contentItems.length;\n            for (let i = 0; i < contentItemCount; i++) {\n                const contentItem = contentItems[i];\n                if (contentItem instanceof ComponentItem) {\n                    contentItem.exitStackMaximised();\n                } else {\n                    throw new AssertError('SMINI87773');\n                }\n            }\n            this.emitStateChangedEvent();\n        }\n    }\n\n    /** @internal */\n    override destroy(): void {\n        if (this._activeComponentItem?.focused) {\n            this._activeComponentItem.blur();\n        }\n        super.destroy();\n        this.off('resize', this._resizeListener);\n        if (this._maximisedEnabled) {\n            this.off('maximised', this._maximisedListener);\n            this.off('minimised', this._minimisedListener);\n        }\n        this._header.destroy();\n    }\n\n    toConfig(): ResolvedStackItemConfig {\n        let activeItemIndex: number | undefined;\n        if (this._activeComponentItem) {\n            activeItemIndex = this.contentItems.indexOf(this._activeComponentItem);\n            if (activeItemIndex < 0) {\n                throw new Error('active component item not found in stack');\n            }\n        }\n        if (this.contentItems.length > 0 && activeItemIndex === undefined) {\n            throw new Error('expected non-empty stack to have an active component item');\n        } else {\n            const result: ResolvedStackItemConfig = {\n                type: 'stack',\n                content: this.calculateConfigContent() as ResolvedComponentItemConfig[],\n                size: this.size,\n                sizeUnit: this.sizeUnit,\n                minSize: this.minSize,\n                minSizeUnit: this.minSizeUnit,\n                id: this.id,\n                isClosable: this.isClosable,\n                maximised: this.isMaximised,\n                header: this.createHeaderConfig(),\n                activeItemIndex,\n            }\n            return result;\n        }\n    }\n\n    /**\n     * Ok, this one is going to be the tricky one: The user has dropped a {@link (ContentItem:class)} onto this stack.\n     *\n     * It was dropped on either the stacks header or the top, right, bottom or left bit of the content area\n     * (which one of those is stored in this._dropSegment). Now, if the user has dropped on the header the case\n     * is relatively clear: We add the item to the existing stack... job done (might be good to have\n     * tab reordering at some point, but lets not sweat it right now)\n     *\n     * If the item was dropped on the content part things are a bit more complicated. If it was dropped on either the\n     * top or bottom region we need to create a new column and place the items accordingly.\n     * Unless, of course if the stack is already within a column... in which case we want\n     * to add the newly created item to the existing column...\n     * either prepend or append it, depending on wether its top or bottom.\n     *\n     * Same thing for rows and left / right drop segments... so in total there are 9 things that can potentially happen\n     * (left, top, right, bottom) * is child of the right parent (row, column) + header drop\n     *\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    override onDrop(contentItem: ContentItem, area: ContentItem.Area): void {\n        /*\n         * The item was dropped on the header area. Just add it as a child of this stack and\n         * get the hell out of this logic\n         */\n        if (this._dropSegment === Stack.Segment.Header) {\n            this.resetHeaderDropZone();\n            if (this._dropIndex === undefined) {\n                throw new UnexpectedUndefinedError('SODDI68990');\n            } else {\n                this.addChild(contentItem, this._dropIndex);\n                return;\n            }\n        }\n\n        /*\n         * The stack is empty. Let's just add the element.\n         */\n        if (this._dropSegment === Stack.Segment.Body) {\n            this.addChild(contentItem, 0, true);\n            return;\n        }\n\n        /*\n         * The item was dropped on the top-, left-, bottom- or right- part of the content. Let's\n         * aggregate some conditions to make the if statements later on more readable\n         */\n        const isVertical = this._dropSegment === Stack.Segment.Top || this._dropSegment === Stack.Segment.Bottom;\n        const isHorizontal = this._dropSegment === Stack.Segment.Left || this._dropSegment === Stack.Segment.Right;\n        const insertBefore = this._dropSegment === Stack.Segment.Top || this._dropSegment === Stack.Segment.Left;\n        const hasCorrectParent = (isVertical && this.stackParent.isColumn) || (isHorizontal && this.stackParent.isRow);\n\n        /*\n         * The content item can be either a component or a stack. If it is a component, wrap it into a stack\n         */\n        if (contentItem.isComponent) {\n            const itemConfig = ResolvedStackItemConfig.createDefault();\n            itemConfig.header = this.createHeaderConfig();\n            const stack = this.layoutManager.createAndInitContentItem(itemConfig, this);\n            stack.addChild(contentItem);\n            contentItem = stack;\n        }\n\n\n        /*\n         * If the contentItem that's being dropped is not dropped on a Stack (cases which just passed above and\n         * which would wrap the contentItem in a Stack) we need to check whether contentItem is a RowOrColumn.\n         * If it is, we need to re-wrap it in a Stack like it was when it was dragged by its Tab (it was dragged!).\n         */\n        if(contentItem.type === ItemType.row || contentItem.type === ItemType.column){\n            const itemConfig = ResolvedStackItemConfig.createDefault();\n            itemConfig.header = this.createHeaderConfig();\n            const stack = this.layoutManager.createContentItem(itemConfig, this);\n            stack.addChild(contentItem)\n            contentItem = stack\n        }\n\n        /*\n         * If the item is dropped on top or bottom of a column or left and right of a row, it's already\n         * layd out in the correct way. Just add it as a child\n         */\n        if (hasCorrectParent) {\n            const index = this.stackParent.contentItems.indexOf(this);\n            this.stackParent.addChild(contentItem, insertBefore ? index : index + 1, true);\n            this.size *= 0.5;\n            contentItem.size = this.size;\n            contentItem.sizeUnit = this.sizeUnit;\n            this.stackParent.updateSize(false);\n            /*\n             * This handles items that are dropped on top or bottom of a row or left / right of a column. We need\n             * to create the appropriate contentItem for them to live in\n             */\n        } else {\n            const type = isVertical ? ItemType.column : ItemType.row;\n            const itemConfig = ResolvedItemConfig.createDefault(type) as ResolvedItemConfig;\n            const rowOrColumn = this.layoutManager.createContentItem(itemConfig, this);\n            this.stackParent.replaceChild(this, rowOrColumn);\n\n            rowOrColumn.addChild(contentItem, insertBefore ? 0 : undefined, true);\n            rowOrColumn.addChild(this, insertBefore ? undefined : 0, true);\n\n            this.size = 50;\n            contentItem.size = 50;\n            contentItem.sizeUnit = SizeUnitEnum.Percent;\n            rowOrColumn.updateSize(false);\n        }\n    }\n\n    /**\n     * If the user hovers above the header part of the stack, indicate drop positions for tabs.\n     * otherwise indicate which segment of the body the dragged item would be dropped on\n     *\n     * @param x - Absolute Screen X\n     * @param y - Absolute Screen Y\n     * @internal\n     */\n    override highlightDropZone(x: number, y: number): void {\n        for (const key in this._contentAreaDimensions) {\n            const segment = key as Stack.Segment;\n            const area = this._contentAreaDimensions[segment].hoverArea;\n\n            if (area.x1 < x && area.x2 > x && area.y1 < y && area.y2 > y) {\n\n                if (segment === Stack.Segment.Header) {\n                    this._dropSegment = Stack.Segment.Header;\n                    this.highlightHeaderDropZone(this._header.leftRightSided ? y : x);\n                } else {\n                    this.resetHeaderDropZone();\n                    this.highlightBodyDropZone(segment);\n                }\n\n                return;\n            }\n        }\n    }\n\n    /** @internal */\n    getArea(): ContentItem.Area | null {\n        if (this.element.style.display === 'none') {\n            return null;\n        }\n\n        const headerArea = super.getElementArea(this._header.element);\n        const contentArea = super.getElementArea(this._childElementContainer);\n        if (headerArea === null || contentArea === null) {\n            throw new UnexpectedNullError('SGAHC13086');\n        }\n        const contentWidth = contentArea.x2 - contentArea.x1;\n        const contentHeight = contentArea.y2 - contentArea.y1;\n\n        this._contentAreaDimensions = {\n            header: {\n                hoverArea: {\n                    x1: headerArea.x1,\n                    y1: headerArea.y1,\n                    x2: headerArea.x2,\n                    y2: headerArea.y2\n                },\n                highlightArea: {\n                    x1: headerArea.x1,\n                    y1: headerArea.y1,\n                    x2: headerArea.x2,\n                    y2: headerArea.y2\n                }\n            }\n        };\n\n        /**\n         * Highlight the entire body if the stack is empty\n         */\n        if (this.contentItems.length === 0) {\n\n            this._contentAreaDimensions.body = {\n                hoverArea: {\n                    x1: contentArea.x1,\n                    y1: contentArea.y1,\n                    x2: contentArea.x2,\n                    y2: contentArea.y2\n                },\n                highlightArea: {\n                    x1: contentArea.x1,\n                    y1: contentArea.y1,\n                    x2: contentArea.x2,\n                    y2: contentArea.y2\n                }\n            };\n\n            return super.getElementArea(this.element);\n        } else {\n            this._contentAreaDimensions.left = {\n                hoverArea: {\n                    x1: contentArea.x1,\n                    y1: contentArea.y1,\n                    x2: contentArea.x1 + contentWidth * 0.25,\n                    y2: contentArea.y2\n                },\n                highlightArea: {\n                    x1: contentArea.x1,\n                    y1: contentArea.y1,\n                    x2: contentArea.x1 + contentWidth * 0.5,\n                    y2: contentArea.y2\n                }\n            };\n\n            this._contentAreaDimensions.top = {\n                hoverArea: {\n                    x1: contentArea.x1 + contentWidth * 0.25,\n                    y1: contentArea.y1,\n                    x2: contentArea.x1 + contentWidth * 0.75,\n                    y2: contentArea.y1 + contentHeight * 0.5\n                },\n                highlightArea: {\n                    x1: contentArea.x1,\n                    y1: contentArea.y1,\n                    x2: contentArea.x2,\n                    y2: contentArea.y1 + contentHeight * 0.5\n                }\n            };\n\n            this._contentAreaDimensions.right = {\n                hoverArea: {\n                    x1: contentArea.x1 + contentWidth * 0.75,\n                    y1: contentArea.y1,\n                    x2: contentArea.x2,\n                    y2: contentArea.y2\n                },\n                highlightArea: {\n                    x1: contentArea.x1 + contentWidth * 0.5,\n                    y1: contentArea.y1,\n                    x2: contentArea.x2,\n                    y2: contentArea.y2\n                }\n            };\n\n            this._contentAreaDimensions.bottom = {\n                hoverArea: {\n                    x1: contentArea.x1 + contentWidth * 0.25,\n                    y1: contentArea.y1 + contentHeight * 0.5,\n                    x2: contentArea.x1 + contentWidth * 0.75,\n                    y2: contentArea.y2\n                },\n                highlightArea: {\n                    x1: contentArea.x1,\n                    y1: contentArea.y1 + contentHeight * 0.5,\n                    x2: contentArea.x2,\n                    y2: contentArea.y2\n                }\n            };\n\n            return super.getElementArea(this.element);\n        }\n    }\n\n    /**\n     * Programmatically operate with header position.\n     *\n     * @param position -\n     *\n     * @returns previous header position\n     * @internal\n     */\n    positionHeader(position: Side): void {\n        if (this._header.side !== position) {\n            this._header.setSide(position);\n            this._headerSideChanged = true;\n            this.setupHeaderPosition();\n        }\n    }\n\n    /** @internal */\n    private updateNodeSize(): void {\n        if (this.element.style.display !== 'none') {\n            const content: WidthAndHeight = getElementWidthAndHeight(this.element);\n\n            if (this._header.show) {\n                const dimension = this._header.leftRightSided ? WidthOrHeightPropertyName.width : WidthOrHeightPropertyName.height;\n                content[dimension] -= this.layoutManager.layoutConfig.dimensions.headerHeight;\n            }\n            this._childElementContainer.style.width = numberToPixels(content.width);\n            this._childElementContainer.style.height = numberToPixels(content.height);\n            for (let i = 0; i < this.contentItems.length; i++) {\n                this.contentItems[i].element.style.width = numberToPixels(content.width);\n                this.contentItems[i].element.style.height = numberToPixels(content.height);\n            }\n            this.emit('resize');\n            this.emitStateChangedEvent();\n        }\n    }\n\n    /** @internal */\n    private highlightHeaderDropZone(x: number): void {\n        const visibleTabsLength = this._header.lastVisibleTabIndex + 1;\n        const tabsContainerElement = this._header.tabsContainerElement;\n        const tabsContainerElementChildNodes = tabsContainerElement.childNodes;\n\n        // Create shallow copy of childNodes list, excluding DropPlaceHolder, as we will be modifying the childNodes list\n        const visibleTabElements = new Array<HTMLElement>(visibleTabsLength);\n        let tabIndex = 0;\n        let tabCount = 0;\n        while (tabCount < visibleTabsLength) {\n            const visibleTabElement = tabsContainerElementChildNodes[tabIndex++] as HTMLElement;\n            if (visibleTabElement !== this.layoutManager.tabDropPlaceholder) {\n                visibleTabElements[tabCount++] = visibleTabElement;\n            }\n        }\n\n        const dropTargetIndicator = this.layoutManager.dropTargetIndicator;\n        if (dropTargetIndicator === null) {\n            throw new UnexpectedNullError('SHHDZDTI97110');\n        }\n\n        let area: AreaLinkedRect;\n\n        // Empty stack\n        if (visibleTabsLength === 0) {\n            const headerRect = this._header.element.getBoundingClientRect();\n            const headerTop = headerRect.top + document.body.scrollTop;\n            const headerLeft = headerRect.left + document.body.scrollLeft;\n\n            area = {\n                x1: headerLeft,\n                x2: headerLeft + 100,\n                y1: headerTop + headerRect.height - 20,\n                y2: headerTop + headerRect.height,\n            };\n\n            this._dropIndex = 0;\n        } else {\n            let tabIndex = 0;\n            // This indicates whether our cursor is exactly over a tab\n            let isAboveTab = false;\n            let tabTop: number;\n            let tabLeft: number;\n            let tabWidth: number;\n            let tabElement: HTMLElement;\n            do {\n                tabElement = visibleTabElements[tabIndex] as HTMLElement;\n                const tabRect = tabElement.getBoundingClientRect();\n                const tabRectTop = tabRect.top + document.body.scrollTop;\n                const tabRectLeft = tabRect.left + document.body.scrollLeft;\n\n                if (this._header.leftRightSided) {\n                    tabLeft = tabRectTop;\n                    tabTop = tabRectLeft;\n                    tabWidth = tabRect.height;\n                } else {\n                    tabLeft = tabRectLeft;\n                    tabTop = tabRectTop;\n                    tabWidth = tabRect.width;\n                }\n\n                if (x >= tabLeft && x < tabLeft + tabWidth) {\n                    isAboveTab = true;\n                } else {\n                    tabIndex++;\n                }\n            } while (tabIndex < visibleTabsLength && !isAboveTab);\n\n            // If we're not above any tabs, or to the right of any tab, we are out of the area, so give up\n            if (isAboveTab === false && x < tabLeft) {\n                return;\n            }\n\n            const halfX = tabLeft + tabWidth / 2;\n\n            if (x < halfX) {\n                this._dropIndex = tabIndex;\n                tabElement.insertAdjacentElement('beforebegin', this.layoutManager.tabDropPlaceholder);\n            } else {\n                this._dropIndex = Math.min(tabIndex + 1, visibleTabsLength);\n                tabElement.insertAdjacentElement('afterend', this.layoutManager.tabDropPlaceholder);\n            }\n\n            const tabDropPlaceholderRect = this.layoutManager.tabDropPlaceholder.getBoundingClientRect();\n            const tabDropPlaceholderRectTop = tabDropPlaceholderRect.top + document.body.scrollTop;\n            const tabDropPlaceholderRectLeft = tabDropPlaceholderRect.left + document.body.scrollLeft;\n            const tabDropPlaceholderRectWidth = tabDropPlaceholderRect.width;\n\n            if (this._header.leftRightSided) {\n                const placeHolderTop = tabDropPlaceholderRectTop;\n                area = {\n                    x1: tabTop,\n                    x2: tabTop + tabElement.clientHeight,\n                    y1: placeHolderTop,\n                    y2: placeHolderTop + tabDropPlaceholderRectWidth,\n                };\n            } else {\n                const placeHolderLeft = tabDropPlaceholderRectLeft;\n\n                area = {\n                    x1: placeHolderLeft,\n                    x2: placeHolderLeft + tabDropPlaceholderRectWidth,\n                    y1: tabTop,\n                    y2: tabTop + tabElement.clientHeight,\n                };\n            }\n        }\n\n        dropTargetIndicator.highlightArea(area, 0);\n        return;\n    }\n\n    /** @internal */\n    private resetHeaderDropZone() {\n        this.layoutManager.tabDropPlaceholder.remove();\n    }\n\n    /** @internal */\n    private setupHeaderPosition() {\n        setElementDisplayVisibility(this._header.element, this._header.show);\n        this.element.classList.remove(DomConstants.ClassName.Left, DomConstants.ClassName.Right, DomConstants.ClassName.Bottom);\n        if (this._header.leftRightSided) {\n            this.element.classList.add('lm_' + this._header.side);\n        }\n\n        //if ([Side.right, Side.bottom].includes(this._header.side)) {\n        //    // move the header behind the content.\n        //    this.element.appendChild(this._header.element);\n        //}\n        this.updateSize(false);\n    }\n\n    /** @internal */\n    private highlightBodyDropZone(segment: Stack.Segment): void {\n        if (this._contentAreaDimensions === undefined) {\n            throw new UnexpectedUndefinedError('SHBDZC82265');\n        } else {\n            const highlightArea = this._contentAreaDimensions[segment].highlightArea;\n            const dropTargetIndicator = this.layoutManager.dropTargetIndicator;\n            if (dropTargetIndicator === null) {\n                throw new UnexpectedNullError('SHBDZD96110');\n            } else {\n                dropTargetIndicator.highlightArea(highlightArea, 1);\n                this._dropSegment = segment;\n            }\n        }\n    }\n\n    /** @internal */\n    private handleResize() {\n        this._header.updateTabSizes()\n    }\n\n    /** @internal */\n    private handleMaximised() {\n        this._header.processMaximised();\n    }\n\n    /** @internal */\n    private handleMinimised() {\n        this._header.processMinimised();\n    }\n\n    /** @internal */\n    private handlePopoutEvent() {\n        this.popout();\n    }\n\n    /** @internal */\n    private handleHeaderClickEvent(ev: MouseEvent) {\n        const eventName = EventEmitter.headerClickEventName;\n        const bubblingEvent = new EventEmitter.ClickBubblingEvent(eventName, this, ev);\n        this.emit(eventName, bubblingEvent);\n    }\n\n    /** @internal */\n    private handleHeaderTouchStartEvent(ev: TouchEvent) {\n        const eventName = EventEmitter.headerTouchStartEventName;\n        const bubblingEvent = new EventEmitter.TouchStartBubblingEvent(eventName, this, ev);\n        this.emit(eventName, bubblingEvent);\n    }\n\n    /** @internal */\n    private handleHeaderComponentRemoveEvent(item: ComponentItem) {\n        this.removeChild(item, false);\n    }\n\n    /** @internal */\n    private handleHeaderComponentFocusEvent(item: ComponentItem) {\n        this.setActiveComponentItem(item, true);\n    }\n\n    /** @internal */\n    private handleHeaderComponentStartDragEvent(x: number, y: number, dragListener: DragListener, componentItem: ComponentItem) {\n        if (this.isMaximised === true) {\n            this.toggleMaximise();\n        }\n        this.layoutManager.startComponentDrag(x, y, dragListener, componentItem, this);\n    }\n\n    /** @internal */\n    private createHeaderConfig() {\n        if (!this._headerSideChanged) {\n            return ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig);\n        } else {\n            const show = this._header.show ? this._header.side : false;\n\n            let result = ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig, show);\n            if (result === undefined) {\n                result = {\n                    show,\n                    popout: undefined,\n                    maximise: undefined,\n                    close: undefined,\n                    minimise: undefined,\n                    tabDropdown: undefined,\n                };\n            }\n            return result;\n        }\n    }\n\n    /** @internal */\n    private emitStateChangedEvent() {\n        this.emitBaseBubblingEvent('stateChanged');\n    }\n}\n\n/** @public */\nexport namespace Stack {\n    /** @internal */\n    export const enum Segment {\n        Header = 'header',\n        Body = 'body',\n        Left = 'left',\n        Right = 'right',\n        Top = 'top',\n        Bottom = 'bottom',\n    }\n\n    /** @internal */\n    export interface ContentAreaDimension {\n        hoverArea: AreaLinkedRect;\n        highlightArea: AreaLinkedRect;\n    }\n\n    /** @internal */\n    export type ContentAreaDimensions = {\n        [segment: string]: ContentAreaDimension;\n    };\n\n    /** @internal */\n    export function createElement(document: Document): HTMLDivElement {\n        const element = document.createElement('div');\n        element.classList.add(DomConstants.ClassName.Item);\n        element.classList.add(DomConstants.ClassName.Stack);\n        return element;\n    }\n}\n","import { UnexpectedNullError, UnexpectedUndefinedError } from '../errors/internal-error';\nimport { ComponentItem } from '../items/component-item';\nimport { ContentItem } from '../items/content-item';\nimport { Stack } from '../items/stack';\nimport { LayoutManager } from '../layout-manager';\nimport { DomConstants } from '../utils/dom-constants';\nimport { DragListener } from '../utils/drag-listener';\nimport { EventEmitter } from '../utils/event-emitter';\nimport { Side } from '../utils/types';\nimport {\n    numberToPixels\n} from '../utils/utils';\n\n/**\n * This class creates a temporary container\n * for the component whilst it is being dragged\n * and handles drag events\n * @internal\n */\nexport class DragProxy extends EventEmitter {\n    private _area: ContentItem.Area | null = null;\n    private _lastValidArea: ContentItem.Area | null = null;\n    private _minX: number;\n    private _minY: number;\n    private _maxX: number;\n    private _maxY: number;\n    private _sided: boolean;\n    private _element: HTMLElement;\n    private _proxyContainerElement: HTMLElement;\n    private _componentItemFocused: boolean;\n\n    get element(): HTMLElement { return this._element; }\n\n    /**\n     * @param x - The initial x position\n     * @param y - The initial y position\n     * @internal\n     */\n    constructor(x: number, y: number,\n        private readonly _dragListener: DragListener,\n        private readonly _layoutManager: LayoutManager,\n        private readonly _componentItem: ComponentItem,\n        private readonly _originalParent: ContentItem) {\n\n        super();\n\n        this._dragListener.on('drag', (offsetX, offsetY, event) => this.onDrag(offsetX, offsetY, event));\n        this._dragListener.on('dragStop', () => this.onDrop());\n\n        this.createDragProxyElements(x, y);\n\n        if (this._componentItem.parent === null) {\n            // Note that _contentItem will have dummy GroundItem as parent if initiated by a external drag source\n            throw new UnexpectedNullError('DPC10097');\n        }\n\n        this._componentItemFocused = this._componentItem.focused;\n        if (this._componentItemFocused) {\n            this._componentItem.blur();\n        }\n        this._componentItem.parent.removeChild(this._componentItem, true);\n\n        this.setDimensions();\n\n        document.body.appendChild(this._element);\n\n        this.determineMinMaxXY();\n        this._layoutManager.calculateItemAreas();\n        this.setDropPosition(x, y);\n    }\n\n    /** Create Stack-like structure to contain the dragged component */\n    private createDragProxyElements(initialX: number, initialY: number): void {\n        this._element = document.createElement('div');\n        this._element.classList.add(DomConstants.ClassName.DragProxy);\n        const headerElement = document.createElement('div');\n        headerElement.classList.add(DomConstants.ClassName.Header);\n        const tabsElement = document.createElement('div');\n        tabsElement.classList.add(DomConstants.ClassName.Tabs);\n        const tabElement = document.createElement('div');\n        tabElement.classList.add(DomConstants.ClassName.Tab);\n        const titleElement = document.createElement('span');\n        titleElement.classList.add(DomConstants.ClassName.Title);\n        tabElement.appendChild(titleElement);\n        tabsElement.appendChild(tabElement);\n        headerElement.appendChild(tabsElement);\n\n        this._proxyContainerElement = document.createElement('div');\n        this._proxyContainerElement.classList.add(DomConstants.ClassName.Content);\n\n        this._element.appendChild(headerElement);\n        this._element.appendChild(this._proxyContainerElement);\n\n        if (this._originalParent instanceof Stack && this._originalParent.headerShow) {\n            this._sided = this._originalParent.headerLeftRightSided;\n            this._element.classList.add('lm_' + this._originalParent.headerSide);\n            if ([Side.right, Side.bottom].indexOf(this._originalParent.headerSide) >= 0) {\n                this._proxyContainerElement.insertAdjacentElement('afterend', headerElement);\n            }\n        }\n        this._element.style.left = numberToPixels(initialX);\n        this._element.style.top = numberToPixels(initialY);\n        tabElement.setAttribute('title', this._componentItem.title);\n        titleElement.insertAdjacentText('afterbegin', this._componentItem.title);\n        this._proxyContainerElement.appendChild(this._componentItem.element);\n    }\n\n    private determineMinMaxXY(): void {\n        const groundItem = this._layoutManager.groundItem;\n        if (groundItem === undefined) {\n            throw new UnexpectedUndefinedError('DPDMMXY73109');\n        } else {\n            const groundElement = groundItem.element;\n            const rect = groundElement.getBoundingClientRect();\n            this._minX = rect.left + document.body.scrollLeft;\n            this._minY = rect.top + document.body.scrollTop;\n            this._maxX = this._minX + rect.width;\n            this._maxY = this._minY + rect.height;\n        }\n    }\n\n    /**\n     * Callback on every mouseMove event during a drag. Determines if the drag is\n     * still within the valid drag area and calls the layoutManager to highlight the\n     * current drop area\n     *\n     * @param offsetX - The difference from the original x position in px\n     * @param offsetY - The difference from the original y position in px\n     * @param event -\n     * @internal\n     */\n    private onDrag(offsetX: number, offsetY: number, event: PointerEvent) {\n\n        const x = event.pageX;\n        const y = event.pageY;\n\n        this.setDropPosition(x, y);\n        this._componentItem.drag();\n    }\n\n    /**\n     * Sets the target position, highlighting the appropriate area\n     *\n     * @param x - The x position in px\n     * @param y - The y position in px\n     *\n     * @internal\n     */\n    private setDropPosition(x: number, y: number): void {\n        if (this._layoutManager.layoutConfig.settings.constrainDragToContainer) {\n            if (x <= this._minX) {\n                x = Math.ceil(this._minX);\n            } else if (x >= this._maxX) {\n                x = Math.floor(this._maxX);\n            }\n\n            if (y <= this._minY) {\n                y = Math.ceil(this._minY);\n            } else if (y >= this._maxY) {\n                y = Math.floor(this._maxY);\n            }\n        }\n\n        this._element.style.left = numberToPixels(x);\n        this._element.style.top = numberToPixels(y);\n        this._area = this._layoutManager.getArea(x, y);\n\n        if (this._area !== null) {\n            this._lastValidArea = this._area;\n            this._area.contentItem.highlightDropZone(x, y, this._area);\n        }\n    }\n\n    /**\n     * Callback when the drag has finished. Determines the drop area\n     * and adds the child to it\n     * @internal\n     */\n    private onDrop(): void {\n        const dropTargetIndicator = this._layoutManager.dropTargetIndicator;\n        if (dropTargetIndicator === null) {\n            throw new UnexpectedNullError('DPOD30011');\n        } else {\n            dropTargetIndicator.hide();\n        }\n\n        this._componentItem.exitDragMode();\n\n        /*\n         * Valid drop area found\n         */\n        let droppedComponentItem: ComponentItem | undefined;\n        if (this._area !== null) {\n            droppedComponentItem = this._componentItem;\n            this._area.contentItem.onDrop(droppedComponentItem, this._area);\n\n            /**\n             * No valid drop area available at present, but one has been found before.\n             * Use it\n             */\n        } else if (this._lastValidArea !== null) {\n            droppedComponentItem = this._componentItem;\n            const newParentContentItem = this._lastValidArea.contentItem;\n            newParentContentItem.onDrop(droppedComponentItem, this._lastValidArea);\n\n            /**\n             * No valid drop area found during the duration of the drag. Return\n             * content item to its original position if a original parent is provided.\n             * (Which is not the case if the drag had been initiated by createDragSource)\n             */\n        } else if (this._originalParent) {\n            droppedComponentItem = this._componentItem;\n            this._originalParent.addChild(droppedComponentItem);\n\n            /**\n             * The drag didn't ultimately end up with adding the content item to\n             * any container. In order to ensure clean up happens, destroy the\n             * content item.\n             */\n        } else {\n            this._componentItem.destroy(); // contentItem children are now destroyed as well\n        }\n\n        this._element.remove();\n\n        this._layoutManager.emit('itemDropped', this._componentItem);\n\n        if (this._componentItemFocused && droppedComponentItem !== undefined) {\n            droppedComponentItem.focus();\n        }\n    }\n\n    /**\n     * Updates the Drag Proxy's dimensions\n     * @internal\n     */\n    private setDimensions() {\n        const dimensions = this._layoutManager.layoutConfig.dimensions;\n        if (dimensions === undefined) {\n            throw new Error('DragProxy.setDimensions: dimensions undefined');\n        }\n\n        let width = dimensions.dragProxyWidth;\n        let height = dimensions.dragProxyHeight;\n        if (width === undefined || height === undefined) {\n            throw new Error('DragProxy.setDimensions: width and/or height undefined');\n        }\n\n        const headerHeight = this._layoutManager.layoutConfig.header.show === false ? 0 : dimensions.headerHeight;\n        this._element.style.width = numberToPixels(width);\n        this._element.style.height = numberToPixels(height)\n        width -= (this._sided ? headerHeight : 0);\n        height -= (!this._sided ? headerHeight : 0);\n        this._proxyContainerElement.style.width = numberToPixels(width);\n        this._proxyContainerElement.style.height = numberToPixels(height);\n        this._componentItem.enterDragMode(width, height);\n        this._componentItem.show();\n    }\n}\n","import { DomConstants } from '../utils/dom-constants';\nimport { DragListener } from '../utils/drag-listener';\nimport { EventEmitter } from '../utils/event-emitter';\nimport { numberToPixels } from '../utils/utils';\n\n/** @internal */\nexport class Splitter {\n    private _grabSize;\n    private _dragListener: DragListener;\n\n    private readonly _element: HTMLDivElement;\n\n    get element(): HTMLDivElement { return this._element; }\n\n    constructor(private _isVertical: boolean, private _size: number, grabSize: number) {\n        this._grabSize = grabSize < this._size ? this._size : grabSize;\n\n        this._element = document.createElement('div');\n        this._element.classList.add(DomConstants.ClassName.Splitter);\n        const dragHandleElement = document.createElement('div');\n        dragHandleElement.classList.add(DomConstants.ClassName.DragHandle);\n\n        const handleExcessSize = this._grabSize - this._size;\n        const handleExcessPos = handleExcessSize / 2;\n\n        if (this._isVertical) {\n            dragHandleElement.style.top = numberToPixels(-handleExcessPos);\n            dragHandleElement.style.height = numberToPixels(this._size + handleExcessSize);\n            this._element.classList.add(DomConstants.ClassName.Vertical);\n            this._element.style.height = numberToPixels(this._size);\n        } else {\n            dragHandleElement.style.left = numberToPixels(-handleExcessPos);\n            dragHandleElement.style.width = numberToPixels(this._size + handleExcessSize);\n            this._element.classList.add(DomConstants.ClassName.Horizontal);\n            this._element.style.width = numberToPixels(this._size);\n        }\n\n        this._element.appendChild(dragHandleElement);\n\n        this._dragListener = new DragListener(this._element, [dragHandleElement]);\n    }\n\n    destroy(): void {\n        this._element.remove();\n    }\n\n    on<K extends keyof EventEmitter.EventParamsMap>(eventName: K, callback: EventEmitter.Callback<K>): void {\n        this._dragListener.on<K>(eventName, callback);\n    }\n}\n","import { ComponentItemConfig, ItemConfig, RowOrColumnItemConfig, StackItemConfig } from '../config/config'\nimport { ResolvedRowOrColumnItemConfig, ResolvedStackItemConfig } from '../config/resolved-config'\nimport { Splitter } from '../controls/splitter'\nimport { AssertError, UnexpectedNullError } from '../errors/internal-error'\nimport { LayoutManager } from '../layout-manager'\nimport { DomConstants } from '../utils/dom-constants'\nimport { ItemType, JsonValue, SizeUnitEnum, WidthOrHeightPropertyName } from '../utils/types'\nimport {\n    getElementHeight,\n    getElementWidth,\n    getElementWidthAndHeight,\n    numberToPixels,\n    pixelsToNumber,\n    setElementHeight,\n    setElementWidth\n} from \"../utils/utils\"\nimport { ComponentItem } from './component-item'\nimport { ContentItem } from './content-item'\n\n/** @public */\nexport class RowOrColumn extends ContentItem {\n    /** @internal */\n    private readonly _childElementContainer: HTMLElement;\n    /** @internal */\n    private readonly _configType: 'row' | 'column';\n    /** @internal */\n    private readonly _isColumn: boolean;\n    /** @internal */\n    private readonly _splitterSize: number;\n    /** @internal */\n    private readonly _splitterGrabSize: number;\n    /** @internal */\n    private readonly _dimension: WidthOrHeightPropertyName;\n    /** @internal */\n    private readonly _splitter: Splitter[] = [];\n    /** @internal */\n    private _splitterPosition: number | null;\n    /** @internal */\n    private _splitterMinPosition: number | null;\n    /** @internal */\n    private _splitterMaxPosition: number | null;\n\n    /** @internal */\n    constructor(isColumn: boolean, layoutManager: LayoutManager, config: ResolvedRowOrColumnItemConfig,\n        /** @internal */\n        private _rowOrColumnParent: ContentItem\n    ) {\n        super(layoutManager, config, _rowOrColumnParent, RowOrColumn.createElement(document, isColumn));\n\n        this.isRow = !isColumn;\n        this.isColumn = isColumn;\n\n        this._childElementContainer = this.element;\n        this._splitterSize = layoutManager.layoutConfig.dimensions.borderWidth;\n        this._splitterGrabSize = layoutManager.layoutConfig.dimensions.borderGrabWidth;\n        this._isColumn = isColumn;\n        this._dimension = isColumn ? 'height' : 'width';\n        this._splitterPosition = null;\n        this._splitterMinPosition = null;\n        this._splitterMaxPosition = null;\n\n        switch (config.type) {\n            case ItemType.row:\n            case ItemType.column:\n                this._configType = config.type;\n                break;\n            default:\n                throw new AssertError('ROCCCT00925');\n        }\n    }\n\n    newComponent(componentType: JsonValue, componentState?: JsonValue, title?: string, index?: number): ComponentItem {\n        const itemConfig: ComponentItemConfig = {\n            type: 'component',\n            componentType,\n            componentState,\n            title,\n        };\n        return this.newItem(itemConfig, index) as ComponentItem;\n    }\n\n    addComponent(componentType: JsonValue, componentState?: JsonValue, title?: string, index?: number): number {\n        const itemConfig: ComponentItemConfig = {\n            type: 'component',\n            componentType,\n            componentState,\n            title,\n        };\n        return this.addItem(itemConfig, index);\n    }\n\n    newItem(itemConfig: RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig,  index?: number): ContentItem {\n        index = this.addItem(itemConfig, index);\n        const createdItem = this.contentItems[index];\n\n        if (ContentItem.isStack(createdItem) && (ItemConfig.isComponent(itemConfig))) {\n            // createdItem is a Stack which was created to hold wanted component.  Return component\n            return createdItem.contentItems[0];\n        } else {\n            return createdItem;\n        }\n    }\n\n    addItem(itemConfig: RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig,\n        index?: number\n    ): number {\n        this.layoutManager.checkMinimiseMaximisedStack();\n        const resolvedItemConfig = ItemConfig.resolve(itemConfig, false);\n        const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, this);\n        return this.addChild(contentItem, index, false);\n    }\n\n    /**\n     * Add a new contentItem to the Row or Column\n     *\n     * @param contentItem -\n     * @param index - The position of the new item within the Row or Column.\n     *                If no index is provided the item will be added to the end\n     * @param suspendResize - If true the items won't be resized. This will leave the item in\n     *                        an inconsistent state and is only intended to be used if multiple\n     *                        children need to be added in one go and resize is called afterwards\n     *\n     * @returns\n     */\n    override addChild(contentItem: ContentItem, index?: number, suspendResize?: boolean): number {\n\n        // contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);\n\n        if (index === undefined) {\n            index = this.contentItems.length;\n        }\n\n        if (this.contentItems.length > 0) {\n            const splitterElement = this.createSplitter(Math.max(0, index - 1)).element;\n\n            if (index > 0) {\n                this.contentItems[index - 1].element.insertAdjacentElement('afterend', splitterElement);\n                splitterElement.insertAdjacentElement('afterend', contentItem.element);\n            } else {\n                this.contentItems[0].element.insertAdjacentElement('beforebegin', splitterElement);\n                splitterElement.insertAdjacentElement('beforebegin', contentItem.element);\n            }\n        } else {\n            this._childElementContainer.appendChild(contentItem.element);\n        }\n\n        super.addChild(contentItem, index);\n\n        const newItemSize = (1 / this.contentItems.length) * 100;\n\n        if (suspendResize === true) {\n            this.emitBaseBubblingEvent('stateChanged');\n            return index;\n        }\n\n        for (let i = 0; i < this.contentItems.length; i++) {\n            const indexedContentItem = this.contentItems[i];\n            if (indexedContentItem === contentItem) {\n                contentItem.size = newItemSize;\n            } else {\n                const itemSize = indexedContentItem.size *= (100 - newItemSize) / 100;\n                indexedContentItem.size = itemSize;\n            }\n        }\n\n        this.updateSize(false);\n        this.emitBaseBubblingEvent('stateChanged');\n\n        return index;\n    }\n\n    /**\n     * Removes a child of this element\n     *\n     * @param contentItem -\n     * @param keepChild - If true the child will be removed, but not destroyed\n     *\n     */\n    override removeChild(contentItem: ContentItem, keepChild: boolean): void {\n        const index = this.contentItems.indexOf(contentItem);\n        const splitterIndex = Math.max(index - 1, 0);\n\n        if (index === -1) {\n            throw new Error('Can\\'t remove child. ContentItem is not child of this Row or Column');\n        }\n\n        /**\n         * Remove the splitter before the item or after if the item happens\n         * to be the first in the row/column\n         */\n        if (this._splitter[splitterIndex]) {\n            this._splitter[splitterIndex].destroy();\n            this._splitter.splice(splitterIndex, 1);\n        }\n\n        super.removeChild(contentItem, keepChild);\n\n        if (this.contentItems.length === 1 && this.isClosable === true) {\n            const childItem = this.contentItems[0];\n            this.contentItems.length = 0;\n            this._rowOrColumnParent.replaceChild(this, childItem, true);\n        } else {\n            this.updateSize(false);\n            this.emitBaseBubblingEvent('stateChanged');\n        }\n    }\n\n    /**\n     * Replaces a child of this Row or Column with another contentItem\n     */\n    override replaceChild(oldChild: ContentItem, newChild: ContentItem): void {\n        const size = oldChild.size;\n        super.replaceChild(oldChild, newChild);\n        newChild.size = size;\n        this.updateSize(false);\n        this.emitBaseBubblingEvent('stateChanged');\n    }\n\n    /**\n     * Called whenever the dimensions of this item or one of its parents change\n     */\n    override updateSize(force: boolean): void {\n        this.layoutManager.beginVirtualSizedContainerAdding();\n        try {\n            this.updateNodeSize();\n            this.updateContentItemsSize(force);\n        } finally {\n            this.layoutManager.endVirtualSizedContainerAdding();\n        }\n    }\n\n    /**\n     * Invoked recursively by the layout manager. ContentItem.init appends\n     * the contentItem's DOM elements to the container, RowOrColumn init adds splitters\n     * in between them\n     * @internal\n     */\n    override init(): void {\n        if (this.isInitialised === true) return;\n\n        this.updateNodeSize();\n\n        for (let i = 0; i < this.contentItems.length; i++) {\n            this._childElementContainer.appendChild(this.contentItems[i].element);\n        }\n\n        super.init();\n\n        for (let i = 0; i < this.contentItems.length - 1; i++) {\n            this.contentItems[i].element.insertAdjacentElement('afterend', this.createSplitter(i).element);\n        }\n\n        this.initContentItems();\n    }\n\n    toConfig(): ResolvedRowOrColumnItemConfig {\n        const result: ResolvedRowOrColumnItemConfig = {\n            type: this.type as 'row' | 'column',\n            content: this.calculateConfigContent() as (ResolvedRowOrColumnItemConfig | ResolvedStackItemConfig)[],\n            size: this.size,\n            sizeUnit: this.sizeUnit,\n            minSize: this.minSize,\n            minSizeUnit: this.minSizeUnit,\n            id: this.id,\n            isClosable: this.isClosable,\n        }\n        return result;\n    }\n\n    /** @internal */\n    protected override setParent(parent: ContentItem): void {\n        this._rowOrColumnParent = parent;\n        super.setParent(parent);\n    }\n\n    /** @internal */\n    private updateNodeSize(): void {\n        if (this.contentItems.length > 0) {\n            this.calculateRelativeSizes();\n            this.setAbsoluteSizes();\n        }\n        this.emitBaseBubblingEvent('stateChanged');\n        this.emit('resize');\n    }\n\n    /**\n     * Turns the relative sizes calculated by calculateRelativeSizes into\n     * absolute pixel values and applies them to the children's DOM elements\n     *\n     * Assigns additional pixels to counteract Math.floor\n     * @internal\n     */\n    private setAbsoluteSizes() {\n        const absoluteSizes = this.calculateAbsoluteSizes();\n\n        for (let i = 0; i < this.contentItems.length; i++) {\n            if (absoluteSizes.additionalPixel - i > 0) {\n                absoluteSizes.itemSizes[i]++;\n            }\n\n            if (this._isColumn) {\n                setElementWidth(this.contentItems[i].element, absoluteSizes.crossAxisSize);\n                setElementHeight(this.contentItems[i].element, absoluteSizes.itemSizes[i]);\n            } else {\n                setElementWidth(this.contentItems[i].element, absoluteSizes.itemSizes[i]);\n                setElementHeight(this.contentItems[i].element, absoluteSizes.crossAxisSize);\n            }\n        }\n    }\n\n    /**\n     * Calculates the absolute sizes of all of the children of this Item.\n     * @returns Set with absolute sizes and additional pixels.\n     * @internal\n     */\n    private calculateAbsoluteSizes(): RowOrColumn.AbsoluteSizes {\n        const totalSplitterSize = (this.contentItems.length - 1) * this._splitterSize;\n        const { width: elementWidth, height: elementHeight } = getElementWidthAndHeight(this.element);\n\n        let totalSize: number;\n        let crossAxisSize: number;\n        if (this._isColumn) {\n            totalSize = elementHeight - totalSplitterSize;\n            crossAxisSize = elementWidth;\n        } else {\n            totalSize = elementWidth - totalSplitterSize;\n            crossAxisSize = elementHeight;\n        }\n\n        let totalAssigned = 0;\n        const itemSizes = [];\n\n        for (let i = 0; i < this.contentItems.length; i++) {\n            const contentItem = this.contentItems[i];\n            let itemSize: number;\n            if (contentItem.sizeUnit === SizeUnitEnum.Percent) {\n                itemSize = Math.floor(totalSize * (contentItem.size / 100));\n            } else {\n                throw new AssertError('ROCCAS6692');\n            }\n\n            totalAssigned += itemSize;\n            itemSizes.push(itemSize);\n        }\n\n        const additionalPixel = Math.floor(totalSize - totalAssigned);\n\n        return {\n            itemSizes,\n            additionalPixel,\n            totalSize,\n            crossAxisSize,\n        };\n    }\n\n    /**\n     * Calculates the relative sizes of all children of this Item. The logic\n     * is as follows:\n     *\n     * - Add up the total size of all items that have a configured size\n     *\n     * - If the total == 100 (check for floating point errors)\n     *        Excellent, job done\n     *\n     * - If the total is \\> 100,\n     *        set the size of items without set dimensions to 1/3 and add this to the total\n     *        set the size off all items so that the total is hundred relative to their original size\n     *\n     * - If the total is \\< 100\n     *        If there are items without set dimensions, distribute the remainder to 100 evenly between them\n     *        If there are no items without set dimensions, increase all items sizes relative to\n     *        their original size so that they add up to 100\n     *\n     * @internal\n     */\n    private calculateRelativeSizes() {\n\n        let total = 0;\n        const itemsWithFractionalSize: ContentItem[] = [];\n        let totalFractionalSize = 0;\n\n        for (let i = 0; i < this.contentItems.length; i++) {\n            const contentItem = this.contentItems[i];\n            const sizeUnit = contentItem.sizeUnit;\n            switch (sizeUnit) {\n                case SizeUnitEnum.Percent: {\n                    total += contentItem.size;\n                    break;\n                }\n                case SizeUnitEnum.Fractional: {\n                    itemsWithFractionalSize.push(contentItem);\n                    totalFractionalSize += contentItem.size;\n                    break;\n                }\n                default:\n                    throw new AssertError('ROCCRS49110', JSON.stringify(contentItem));\n            }\n        }\n\n        /**\n         * Everything adds up to hundred, all good :-)\n         */\n        if (Math.round(total) === 100) {\n            this.respectMinItemSize();\n            return;\n        } else {\n            /**\n             * Allocate the remaining size to the items with a fractional size\n             */\n            if (Math.round(total) < 100 && itemsWithFractionalSize.length > 0) {\n                const fractionalAllocatedSize = 100 - total;\n                for (let i = 0; i < itemsWithFractionalSize.length; i++) {\n                    const contentItem = itemsWithFractionalSize[i];\n                    contentItem.size = fractionalAllocatedSize * (contentItem.size / totalFractionalSize);\n                    contentItem.sizeUnit = SizeUnitEnum.Percent;\n                }\n                this.respectMinItemSize();\n                return;\n            } else {\n\n                /**\n                 * If the total is > 100, but there are also items with a fractional size, assign another 50%\n                 * to the fractional items\n                 *\n                 * This will be reset in the next step\n                 */\n                if (Math.round(total) > 100 && itemsWithFractionalSize.length > 0) {\n                    for (let i = 0; i < itemsWithFractionalSize.length; i++) {\n                        const contentItem = itemsWithFractionalSize[i];\n                        contentItem.size = 50 * (contentItem.size / totalFractionalSize);\n                        contentItem.sizeUnit = SizeUnitEnum.Percent;\n                    }\n                    total += 50;\n                }\n\n                /**\n                 * Set every items size relative to 100 relative to its size to total\n                 */\n                for (let i = 0; i < this.contentItems.length; i++) {\n                    const contentItem = this.contentItems[i];\n                    contentItem.size = (contentItem.size / total) * 100;\n                }\n\n                this.respectMinItemSize();\n            }\n        }\n    }\n\n    /**\n     * Adjusts the column widths to respect the dimensions minItemWidth if set.\n     * @internal\n     */\n    private respectMinItemSize() {\n        interface Entry {\n            size: number;\n        }\n\n        const minItemSize = this.calculateContentItemMinSize(this);\n\n        if (minItemSize <= 0 || this.contentItems.length <= 1) {\n            return;\n        } else {\n            let totalOverMin = 0;\n            let totalUnderMin = 0;\n            const entriesOverMin: Entry[] = [];\n            const allEntries: Entry[] = [];\n\n            const absoluteSizes = this.calculateAbsoluteSizes();\n\n            /**\n             * Figure out how much we are under the min item size total and how much room we have to use.\n             */\n            for (let i = 0; i < absoluteSizes.itemSizes.length; i++) {\n                const itemSize = absoluteSizes.itemSizes[i];\n\n                let entry: Entry;\n                if (itemSize < minItemSize) {\n                    totalUnderMin += minItemSize - itemSize;\n                    entry = {\n                        size: minItemSize\n                    };\n\n                } else {\n                    totalOverMin += itemSize - minItemSize;\n                    entry = {\n                        size: itemSize\n                    };\n                    entriesOverMin.push(entry);\n                }\n\n                allEntries.push(entry);\n            }\n\n            /**\n             * If there is nothing under min, or there is not enough over to make up the difference, do nothing.\n             */\n            if (totalUnderMin === 0 || totalUnderMin > totalOverMin) {\n                return;\n            } else {\n                /**\n                 * Evenly reduce all columns that are over the min item width to make up the difference.\n                 */\n                const reducePercent = totalUnderMin / totalOverMin;\n                let remainingSize = totalUnderMin;\n                for (let i = 0; i < entriesOverMin.length; i++) {\n                    const entry = entriesOverMin[i];\n                    const reducedSize = Math.round((entry.size - minItemSize) * reducePercent);\n                    remainingSize -= reducedSize;\n                    entry.size -= reducedSize;\n                }\n\n                /**\n                 * Take anything remaining from the last item.\n                 */\n                if (remainingSize !== 0) {\n                    allEntries[allEntries.length - 1].size -= remainingSize;\n                }\n\n                /**\n                 * Set every items size relative to 100 relative to its size to total\n                 */\n                for (let i = 0; i < this.contentItems.length; i++) {\n                    const contentItem = this.contentItems[i];\n                    contentItem.size = (allEntries[i].size / absoluteSizes.totalSize) * 100;\n                }\n            }\n        }\n    }\n\n    /**\n     * Instantiates a new Splitter, binds events to it and adds\n     * it to the array of splitters at the position specified as the index argument\n     *\n     * What it doesn't do though is append the splitter to the DOM\n     *\n     * @param index - The position of the splitter\n     *\n     * @returns\n     * @internal\n     */\n    private createSplitter(index: number): Splitter {\n        const splitter = new Splitter(this._isColumn, this._splitterSize, this._splitterGrabSize);\n        splitter.on('drag', (offsetX, offsetY) => this.onSplitterDrag(splitter, offsetX, offsetY));\n        splitter.on('dragStop', () => this.onSplitterDragStop(splitter));\n        splitter.on('dragStart', () => this.onSplitterDragStart(splitter));\n        this._splitter.splice(index, 0, splitter);\n        return splitter;\n    }\n\n    /**\n     * Locates the instance of Splitter in the array of\n     * registered splitters and returns a map containing the contentItem\n     * before and after the splitters, both of which are affected if the\n     * splitter is moved\n     *\n     * @returns A map of contentItems that the splitter affects\n     * @internal\n     */\n    private getSplitItems(splitter: Splitter) {\n        const index = this._splitter.indexOf(splitter);\n\n        return {\n            before: this.contentItems[index],\n            after: this.contentItems[index + 1]\n        };\n    }\n\n    private calculateContentItemMinSize(contentItem: ContentItem) {\n        const minSize = contentItem.minSize;\n        if (minSize !== undefined) {\n            if (contentItem.minSizeUnit === SizeUnitEnum.Pixel) {\n                return minSize;\n            } else {\n                throw new AssertError('ROCGMD98831', JSON.stringify(contentItem));\n            }\n        } else {\n            const dimensions = this.layoutManager.layoutConfig.dimensions;\n            return this._isColumn ? dimensions.defaultMinItemHeight : dimensions.defaultMinItemWidth;\n        }\n    }\n\n    /**\n     * Gets the minimum dimensions for the given item configuration array\n     * @internal\n     */\n    private calculateContentItemsTotalMinSize(contentItems: readonly ContentItem[]) {\n        let totalMinSize = 0;\n\n        for (const contentItem of contentItems) {\n            totalMinSize += this.calculateContentItemMinSize(contentItem);\n        }\n\n        return totalMinSize;\n    }\n\n    /**\n     * Invoked when a splitter's dragListener fires dragStart. Calculates the splitters\n     * movement area once (so that it doesn't need calculating on every mousemove event)\n     * @internal\n     */\n    private onSplitterDragStart(splitter: Splitter) {\n        const items = this.getSplitItems(splitter);\n\n        const beforeWidth = pixelsToNumber(items.before.element.style[this._dimension]);\n        const afterSize = pixelsToNumber(items.after.element.style[this._dimension]);\n        const beforeMinSize = this.calculateContentItemsTotalMinSize(items.before.contentItems);\n        const afterMinSize = this.calculateContentItemsTotalMinSize(items.after.contentItems);\n\n        this._splitterPosition = 0;\n        this._splitterMinPosition = -1 * (beforeWidth - beforeMinSize);\n        this._splitterMaxPosition = afterSize - afterMinSize;\n    }\n\n    /**\n     * Invoked when a splitter's DragListener fires drag. Updates the splitter's DOM position,\n     * but not the sizes of the elements the splitter controls in order to minimize resize events\n     *\n     * @param splitter -\n     * @param offsetX - Relative pixel values to the splitter's original position. Can be negative\n     * @param offsetY - Relative pixel values to the splitter's original position. Can be negative\n     * @internal\n     */\n    private onSplitterDrag(splitter: Splitter, offsetX: number, offsetY: number) {\n        let offset = this._isColumn ? offsetY : offsetX;\n\n        if (this._splitterMinPosition === null || this._splitterMaxPosition === null) {\n            throw new UnexpectedNullError('ROCOSD59226');\n        }\n        offset = Math.max(offset, this._splitterMinPosition);\n        offset = Math.min(offset, this._splitterMaxPosition);\n\n        this._splitterPosition = offset;\n        const offsetPixels = numberToPixels(offset);\n        if (this._isColumn) {\n            splitter.element.style.top = offsetPixels;\n        } else {\n            splitter.element.style.left = offsetPixels;\n        }\n    }\n\n    /**\n     * Invoked when a splitter's DragListener fires dragStop. Resets the splitters DOM position,\n     * and applies the new sizes to the elements before and after the splitter and their children\n     * on the next animation frame\n     * @internal\n     */\n    private onSplitterDragStop(splitter: Splitter) {\n        if (this._splitterPosition === null) {\n            throw new UnexpectedNullError('ROCOSDS66932');\n        } else {\n            const items = this.getSplitItems(splitter);\n            const sizeBefore = pixelsToNumber(items.before.element.style[this._dimension]);\n            const sizeAfter = pixelsToNumber(items.after.element.style[this._dimension]);\n            const splitterPositionInRange = (this._splitterPosition + sizeBefore) / (sizeBefore + sizeAfter);\n            const totalRelativeSize = items.before.size + items.after.size;\n\n            items.before.size = splitterPositionInRange * totalRelativeSize;\n            items.after.size = (1 - splitterPositionInRange) * totalRelativeSize;\n\n            splitter.element.style.top = numberToPixels(0);\n            splitter.element.style.left = numberToPixels(0);\n\n            globalThis.requestAnimationFrame(() => this.updateSize(false));\n        }\n    }\n}\n\n/** @public */\nexport namespace RowOrColumn {\n    /** @internal */\n    export interface AbsoluteSizes {\n        itemSizes: number[],\n        additionalPixel: number,\n        totalSize: number,\n        crossAxisSize: number\n    }\n\n    /** @internal */\n    export function getElementDimensionSize(element: HTMLElement, dimension: WidthOrHeightPropertyName): number {\n        if (dimension === 'width') {\n            return getElementWidth(element);\n        } else {\n            return getElementHeight(element);\n        }\n    }\n\n    /** @internal */\n    export function setElementDimensionSize(element: HTMLElement, dimension: WidthOrHeightPropertyName, value: number): void {\n        if (dimension === 'width') {\n            return setElementWidth(element, value);\n        } else {\n            return setElementHeight(element, value);\n        }\n    }\n\n    /** @internal */\n    export function createElement(document: Document, isColumn: boolean): HTMLDivElement {\n        const element = document.createElement('div');\n        element.classList.add(DomConstants.ClassName.Item);\n        if (isColumn) {\n            element.classList.add(DomConstants.ClassName.Column);\n        } else {\n            element.classList.add(DomConstants.ClassName.Row);\n        }\n        return element;\n    }\n}\n","import { ComponentItemConfig, ItemConfig, RowOrColumnItemConfig, StackItemConfig } from '../config/config';\nimport { ResolvedComponentItemConfig, ResolvedGroundItemConfig, ResolvedHeaderedItemConfig, ResolvedItemConfig, ResolvedRootItemConfig, ResolvedStackItemConfig } from '../config/resolved-config';\nimport { AssertError, UnexpectedNullError } from '../errors/internal-error';\nimport { LayoutManager } from '../layout-manager';\nimport { DomConstants } from '../utils/dom-constants';\nimport { AreaLinkedRect, ItemType, SizeUnitEnum } from '../utils/types';\nimport { getElementWidthAndHeight, setElementHeight, setElementWidth } from '../utils/utils';\nimport { ComponentItem } from './component-item';\nimport { ComponentParentableItem } from './component-parentable-item';\nimport { ContentItem } from './content-item';\nimport { RowOrColumn } from './row-or-column';\n\n/**\n * GroundItem is the ContentItem whose one child is the root ContentItem (Root is planted in Ground).\n * (Previously it was called root however this was incorrect as its child is the root item)\n * There is only one instance of GroundItem and it is automatically created by the Layout Manager\n * @internal\n */\nexport class GroundItem extends ComponentParentableItem {\n    private readonly _childElementContainer: HTMLElement;\n    private readonly _containerElement: HTMLElement;\n\n    constructor(layoutManager: LayoutManager, rootItemConfig: ResolvedRootItemConfig | undefined, containerElement: HTMLElement) {\n\n        super(layoutManager, ResolvedGroundItemConfig.create(rootItemConfig), null, GroundItem.createElement(document));\n\n        this.isGround = true;\n        this._childElementContainer = this.element;\n        this._containerElement = containerElement;\n\n        // insert before any pre-existing content elements\n        let before = null;\n        while (true) {\n            const prev: ChildNode | null =\n                before ? before.previousSibling : this._containerElement.lastChild;\n            if (prev instanceof Element\n                && prev.classList.contains(DomConstants.ClassName.Content)) {\n                before = prev;\n            } else {\n                break;\n            }\n        }\n        this._containerElement.insertBefore(this.element, before);\n    }\n\n    override init(): void {\n        if (this.isInitialised === true) return;\n\n        this.updateNodeSize();\n\n        for (let i = 0; i < this.contentItems.length; i++) {\n            this._childElementContainer.appendChild(this.contentItems[i].element);\n        }\n\n        super.init();\n\n        this.initContentItems();\n    }\n\n    /**\n     * Loads a new Layout\n     * Internal only.  To load a new layout with API, use {@link (LayoutManager:class).loadLayout}\n     */\n    loadRoot(rootItemConfig: ResolvedRootItemConfig | undefined): void {\n        // Remove existing root if it exists\n        this.clearRoot();\n\n        if (rootItemConfig !== undefined) {\n            const rootContentItem = this.layoutManager.createAndInitContentItem(rootItemConfig, this);\n            this.addChild(rootContentItem, 0);\n        }\n    }\n\n    clearRoot(): void {\n        // Remove existing root if it exists\n        const contentItems = this.contentItems;\n        switch (contentItems.length) {\n            case 0: {\n                return;\n            }\n            case 1: {\n                const existingRootContentItem = contentItems[0];\n                existingRootContentItem.remove();\n                return;\n            }\n            default: {\n                throw new AssertError('GILR07721');\n            }\n        }\n    }\n\n    /**\n     * Adds a ContentItem child to root ContentItem.\n     * Internal only.  To load a add with API, use {@link (LayoutManager:class).addItem}\n     * @returns -1 if added as root otherwise index in root ContentItem's content\n     */\n    addItem(itemConfig: RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig,\n        index?: number\n    ): number {\n        this.layoutManager.checkMinimiseMaximisedStack();\n\n        const resolvedItemConfig = ItemConfig.resolve(itemConfig, false);\n        let parent: ContentItem;\n        if (this.contentItems.length > 0) {\n            parent = this.contentItems[0];\n        } else {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            parent = this;\n        }\n        if (parent.isComponent) {\n            throw new Error('Cannot add item as child to ComponentItem');\n        } else {\n            const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, parent);\n            index = parent.addChild(contentItem, index);\n            return (parent === this) ? -1 : index;\n        }\n    }\n\n    loadComponentAsRoot(itemConfig: ComponentItemConfig): void {\n        // Remove existing root if it exists\n        this.clearRoot();\n\n        const resolvedItemConfig = ItemConfig.resolve(itemConfig, false) as ResolvedComponentItemConfig;\n\n        if (resolvedItemConfig.maximised) {\n            throw new Error('Root Component cannot be maximised');\n        } else {\n            const rootContentItem = new ComponentItem(this.layoutManager, resolvedItemConfig, this);\n            rootContentItem.init();\n            this.addChild(rootContentItem, 0);\n        }\n    }\n\n    /**\n     * Adds a Root ContentItem.\n     * Internal only.  To replace Root ContentItem with API, use {@link (LayoutManager:class).loadLayout}\n     */\n    override addChild(contentItem: ContentItem, index?: number): number {\n        if (this.contentItems.length > 0) {\n            throw new Error('Ground node can only have a single child');\n        } else {\n            // contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);\n            this._childElementContainer.appendChild(contentItem.element);\n            index = super.addChild(contentItem, index);\n\n            this.updateSize(false);\n            this.emitBaseBubblingEvent('stateChanged');\n\n            return index;\n        }\n    }\n\n    /** @internal */\n    override calculateConfigContent(): ResolvedRootItemConfig[] {\n        const contentItems = this.contentItems;\n        const count = contentItems.length;\n        const result = new Array<ResolvedRootItemConfig>(count);\n        for (let i = 0; i < count; i++) {\n            const item = contentItems[i];\n            const itemConfig = item.toConfig();\n            if (ResolvedRootItemConfig.isRootItemConfig(itemConfig)) {\n                result[i] = itemConfig;\n            } else {\n                throw new AssertError('RCCC66832');\n            }\n        }\n        return result;\n    }\n\n    /** @internal */\n    setSize(width: number, height: number): void {\n        if (width === undefined || height === undefined) {\n            this.updateSize(false); // For backwards compatibility with v1.x API\n        } else {\n            setElementWidth(this.element, width);\n            setElementHeight(this.element, height);\n\n            // GroundItem can be empty\n            if (this.contentItems.length > 0) {\n                setElementWidth(this.contentItems[0].element, width);\n                setElementHeight(this.contentItems[0].element, height);\n            }\n\n            this.updateContentItemsSize(false);\n        }\n    }\n\n    /**\n     * Adds a Root ContentItem.\n     * Internal only.  To replace Root ContentItem with API, use {@link (LayoutManager:class).updateRootSize}\n     */\n    override updateSize(force: boolean): void {\n        this.layoutManager.beginVirtualSizedContainerAdding();\n        try {\n            this.updateNodeSize();\n            this.updateContentItemsSize(force);\n        } finally {\n            this.layoutManager.endVirtualSizedContainerAdding();\n        }\n    }\n\n    createSideAreas(): GroundItem.Area[] {\n        const areaSize = 50;\n\n        const oppositeSides = GroundItem.Area.oppositeSides;\n        const result = new Array<GroundItem.Area>(Object.keys(oppositeSides).length);\n        let idx = 0;\n\n        for (const key in oppositeSides) {\n            const side = key as keyof GroundItem.Area.Sides;\n            const area = this.getElementArea() as GroundItem.Area;\n            if (area === null) {\n                throw new UnexpectedNullError('RCSA77553');\n            } else {\n                area.side = side;\n                if (oppositeSides[side][1] === '2' )\n                    area[side] = area[oppositeSides[side]] - areaSize;\n                else\n                    area[side] = area[oppositeSides[side]] + areaSize;\n                area.surface = (area.x2 - area.x1) * (area.y2 - area.y1);\n                result[idx++] = area;\n            }\n        }\n\n        return result;\n    }\n\n    override highlightDropZone(x: number, y: number, area: AreaLinkedRect): void {\n        this.layoutManager.tabDropPlaceholder.remove();\n        super.highlightDropZone(x, y, area);\n    }\n\n    override onDrop(contentItem: ContentItem, area: GroundItem.Area): void {\n\n        if (contentItem.isComponent) {\n            const itemConfig = ResolvedStackItemConfig.createDefault();\n            // since ResolvedItemConfig.contentItems not set up, we need to add header from Component\n            const component = contentItem as ComponentItem;\n            itemConfig.header = ResolvedHeaderedItemConfig.Header.createCopy(component.headerConfig);\n            const stack = this.layoutManager.createAndInitContentItem(itemConfig, this);\n            stack.addChild(contentItem);\n            contentItem = stack;\n        }\n\n        if (this.contentItems.length === 0) {\n            this.addChild(contentItem);\n        } else {\n            /*\n             * If the contentItem that's being dropped is not dropped on a Stack (cases which just passed above and\n             * which would wrap the contentItem in a Stack) we need to check whether contentItem is a RowOrColumn.\n             * If it is, we need to re-wrap it in a Stack like it was when it was dragged by its Tab (it was dragged!).\n             */\n            if(contentItem.type === ItemType.row || contentItem.type === ItemType.column){\n                const itemConfig = ResolvedStackItemConfig.createDefault();\n                const stack = this.layoutManager.createContentItem(itemConfig, this);\n                stack.addChild(contentItem)\n                contentItem = stack\n            }\n\n            const type = area.side[0] == 'x' ? ItemType.row : ItemType.column;\n            const insertBefore = area.side[1] == '2';\n            const column = this.contentItems[0];\n            if (!(column instanceof RowOrColumn) || column.type !== type) {\n                const itemConfig = ResolvedItemConfig.createDefault(type);\n                const rowOrColumn = this.layoutManager.createContentItem(itemConfig, this);\n                this.replaceChild(column, rowOrColumn);\n                rowOrColumn.addChild(contentItem, insertBefore ? 0 : undefined, true);\n                rowOrColumn.addChild(column, insertBefore ? undefined : 0, true);\n                column.size = 50;\n                contentItem.size = 50;\n                contentItem.sizeUnit = SizeUnitEnum.Percent;\n                rowOrColumn.updateSize(false);\n            } else {\n                const sibling = column.contentItems[insertBefore ? 0 : column.contentItems.length - 1]\n                column.addChild(contentItem, insertBefore ? 0 : undefined, true);\n                sibling.size *= 0.5;\n                contentItem.size = sibling.size;\n                contentItem.sizeUnit = SizeUnitEnum.Percent;\n                column.updateSize(false);\n            }\n        }\n    }\n\n    // No ContentItem can dock with groundItem.  However Stack can have a GroundItem parent and Stack requires that\n    // its parent implement dock() function.  Accordingly this function is implemented but throws an exception as it should\n    // never be called\n    dock(): void {\n        throw new AssertError('GID87731');\n    }\n\n    // No ContentItem can dock with groundItem.  However Stack can have a GroundItem parent and Stack requires that\n    // its parent implement validateDocking() function.  Accordingly this function is implemented but throws an exception as it should\n    // never be called\n    validateDocking(): void {\n        throw new AssertError('GIVD87732');\n    }\n\n    getAllContentItems(): ContentItem[] {\n        const result: ContentItem[] = [this];\n        this.deepGetAllContentItems(this.contentItems, result);\n        return result;\n    }\n\n    getConfigMaximisedItems(): ContentItem[] {\n        const result: ContentItem[] = [];\n        this.deepFilterContentItems(this.contentItems, result, (item) => {\n            if (ContentItem.isStack(item) && item.initialWantMaximise) {\n                return true;\n            } else {\n                if (ContentItem.isComponentItem(item) && item.initialWantMaximise) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n\n        return result;\n    }\n\n    getItemsByPopInParentId(popInParentId: string): ContentItem[] {\n        const result: ContentItem[] = [];\n        this.deepFilterContentItems(this.contentItems, result, (item) => item.popInParentIds.includes(popInParentId));\n        return result;\n    }\n\n    toConfig(): ResolvedItemConfig {\n        throw new Error('Cannot generate GroundItem config');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveComponentItem(item: ComponentItem, focus: boolean, suppressFocusEvent: boolean): void {\n        // only applicable if ComponentItem is root and then it always has focus\n    }\n\n    private updateNodeSize(): void {\n        const { width, height } = getElementWidthAndHeight(this._containerElement);\n\n        setElementWidth(this.element, width);\n        setElementHeight(this.element, height);\n\n        /*\n         * GroundItem can be empty\n         */\n        if (this.contentItems.length > 0) {\n            setElementWidth(this.contentItems[0].element, width);\n            setElementHeight(this.contentItems[0].element, height);\n        }\n    }\n\n    private deepGetAllContentItems(content: readonly ContentItem[], result: ContentItem[]): void {\n        for (let i = 0; i < content.length; i++) {\n            const contentItem = content[i];\n            result.push(contentItem);\n            this.deepGetAllContentItems(contentItem.contentItems, result);\n        }\n    }\n\n    private deepFilterContentItems(content: readonly ContentItem[], result: ContentItem[],\n        checkAcceptFtn: ((this: void, item: ContentItem) => boolean)\n    ): void {\n        for (let i = 0; i < content.length; i++) {\n            const contentItem = content[i];\n            if (checkAcceptFtn(contentItem)) {\n                result.push(contentItem);\n            }\n            this.deepFilterContentItems(contentItem.contentItems, result, checkAcceptFtn);\n        }\n    }\n\n}\n\n/** @internal */\nexport namespace GroundItem {\n    export interface Area extends ContentItem.Area {\n        side: keyof typeof Area.Side;\n    }\n\n    export namespace Area {\n        export const enum Side {\n            y2,\n            x2,\n            y1,\n            x1,\n        }\n\n        export type Sides = { [side in keyof typeof Side]: keyof typeof Side; }\n\n        export const oppositeSides: Sides = {\n            y2: 'y1',\n            x2: 'x1',\n            y1: 'y2',\n            x1: 'x2',\n        };\n    }\n\n    export function createElement(document: Document): HTMLDivElement {\n        const element = document.createElement('div');\n        element.classList.add(DomConstants.ClassName.GoldenLayout);\n        element.classList.add(DomConstants.ClassName.Item);\n        element.classList.add(DomConstants.ClassName.Root);\n        return element;\n    }\n}\n","import { ComponentItemConfig as ConfigComponentItemConfig } from '../config/config'; // remove alias in version 3\nimport { ResolvedRowOrColumnItemConfig } from \"../config/resolved-config\";\nimport { UnexpectedNullError } from '../errors/internal-error';\nimport { ComponentItem } from '../items/component-item';\nimport { GroundItem } from '../items/ground-item';\nimport { LayoutManager } from '../layout-manager';\nimport { DragListener } from '../utils/drag-listener';\nimport { JsonValue } from '../utils/types';\nimport { DragProxy } from './drag-proxy';\n\n/**\n * Allows for any DOM item to create a component on drag\n * start to be dragged into the Layout\n * @public\n */\nexport class DragSource {\n    /** @internal */\n    private _dragListener: DragListener | null;\n    /** @internal */\n    private _dummyGroundContainer: HTMLElement;\n    /** @internal */\n    private _dummyGroundContentItem: GroundItem;\n\n    /** @internal */\n    constructor(\n        /** @internal */\n        private _layoutManager: LayoutManager,\n        /** @internal */\n        private readonly _element: HTMLElement,\n        /** @internal */\n        private readonly _extraAllowableChildTargets: HTMLElement[],\n        /** @internal @deprecated replace with componentItemConfigOrFtn in version 3 */\n        private _componentTypeOrFtn: JsonValue | (() => (DragSource.ComponentItemConfig | ConfigComponentItemConfig)),\n        /** @internal @deprecated remove in version 3 */\n        private _componentState: JsonValue | undefined,\n        /** @internal @deprecated remove in version 3 */\n        private _title: string | undefined,\n        /** @internal @deprecated remove in version 3 */\n        private _id: string | undefined\n    ) {\n        this._dragListener = null;\n\n        this._dummyGroundContainer = document.createElement('div');\n\n        const dummyRootItemConfig = ResolvedRowOrColumnItemConfig.createDefault('row');\n        this._dummyGroundContentItem = new GroundItem(this._layoutManager, dummyRootItemConfig, this._dummyGroundContainer);\n\n        this.createDragListener();\n    }\n\n\t/**\n\t * Disposes of the drag listeners so the drag source is not usable any more.\n     * @internal\n\t */\n\tdestroy(): void {\n\t\tthis.removeDragListener();\n    }\n\n    /**\n     * Called initially and after every drag\n     * @internal\n     */\n    private createDragListener() {\n        this.removeDragListener();\n\n        this._dragListener = new DragListener(this._element, this._extraAllowableChildTargets);\n        this._dragListener.on('dragStart', (x, y) => this.onDragStart(x, y));\n        this._dragListener.on('dragStop', () => this.onDragStop());\n    }\n\n    /**\n     * Callback for the DragListener's dragStart event\n     *\n     * @param x - The x position of the mouse on dragStart\n     * @param y - The x position of the mouse on dragStart\n     * @internal\n     */\n    private onDragStart(x: number, y: number) {\n        const type = 'component';\n        let dragSourceItemConfig: ConfigComponentItemConfig;\n\n        if (typeof this._componentTypeOrFtn === \"function\") {\n            const ftnDragSourceItemConfig = this._componentTypeOrFtn() as (DragSource.ComponentItemConfig | ConfigComponentItemConfig);\n            // If the componentType property exists, then it is already a ComponentItemConfig so nothing to do\n            if (DragSource.isDragSourceComponentItemConfig(ftnDragSourceItemConfig)) {\n                dragSourceItemConfig = {\n                    type,\n                    componentState: ftnDragSourceItemConfig.state,\n                    componentType: ftnDragSourceItemConfig.type,\n                    title: ftnDragSourceItemConfig.title ?? this._title,\n                };\n            } else {\n                dragSourceItemConfig = ftnDragSourceItemConfig;\n            }\n        } else {\n            dragSourceItemConfig = {\n                type,\n                componentState: this._componentState,\n                componentType: this._componentTypeOrFtn,\n                title: this._title,\n                id: this._id,\n            };\n        }\n\n        // Create a dummy ContentItem only for drag purposes\n        // All ContentItems (except for GroundItem) need a parent.  When dragging, the parent is not used.\n        // Instead of allowing null parents (as Javascript version did), use a temporary dummy GroundItem parent and add ContentItem to that\n        // If this does not work, need to create alternative GroundItem class\n\n        const resolvedItemConfig = ConfigComponentItemConfig.resolve(dragSourceItemConfig, false);\n\n        const componentItem = new ComponentItem(this._layoutManager, resolvedItemConfig, this._dummyGroundContentItem)\n        this._dummyGroundContentItem.contentItems.push(componentItem);\n\n        if (this._dragListener === null) {\n            throw new UnexpectedNullError('DSODSD66746');\n        } else {\n            const dragProxy = new DragProxy(x, y, this._dragListener, this._layoutManager, componentItem , this._dummyGroundContentItem);\n\n            const transitionIndicator = this._layoutManager.transitionIndicator;\n            if (transitionIndicator === null) {\n                throw new UnexpectedNullError('DSODST66746');\n            } else {\n                transitionIndicator.transitionElements(this._element, dragProxy.element);\n            }\n        }\n    }\n\n    /** @internal */\n    private onDragStop() {\n        // if (this._dummyGroundContentItem === undefined) {\n        //     throw new UnexpectedUndefinedError('DSODSDRU08116');\n        // } else {\n        //     this._dummyGroundContentItem._$destroy\n        //     this._dummyGroundContentItem = undefined;\n        // }\n        this.createDragListener();\n    }\n\n    /**\n\t * Called after every drag and when the drag source is being disposed of.\n     * @internal\n\t */\n\tprivate removeDragListener() {\n\t\tif (this._dragListener !== null ) {\n            this._dragListener.destroy();\n            this._dragListener = null;\n\t\t}\n\t}\n}\n\n/** @public */\nexport namespace DragSource {\n    /** @deprecated  use Config {@link (ComponentItemConfig:interface)} */\n    export interface ComponentItemConfig {\n        type: JsonValue,\n        state?: JsonValue,\n        title?: string,\n    }\n\n    /** @deprecated remove in version 3 */\n    export function isDragSourceComponentItemConfig(\n        config: DragSource.ComponentItemConfig | ConfigComponentItemConfig\n    ): config is DragSource.ComponentItemConfig {\n        return !(\"componentType\" in config);\n    }\n}\n","import { DomConstants } from '../utils/dom-constants';\nimport { AreaLinkedRect } from '../utils/types';\nimport { numberToPixels, setElementDisplayVisibility } from '../utils/utils';\n\n/** @internal */\nexport class DropTargetIndicator {\n    private _element: HTMLElement;\n\n    constructor() {\n        // Maybe use container instead of Document Body?\n        this._element = document.createElement('div');\n        this._element.classList.add(DomConstants.ClassName.DropTargetIndicator);\n        const innerElement = document.createElement('div');\n        innerElement.classList.add(DomConstants.ClassName.Inner);\n        this._element.appendChild(innerElement);\n\n        document.body.appendChild(this._element);\n    }\n\n    destroy(): void {\n        this._element.remove();\n    }\n\n    highlightArea(area: AreaLinkedRect, margin: number): void {\n        this._element.style.left = numberToPixels(area.x1 + margin);\n        this._element.style.top = numberToPixels(area.y1 + margin);\n        this._element.style.width = numberToPixels(area.x2 - area.x1 - margin);\n        this._element.style.height = numberToPixels(area.y2 - area.y1 - margin);\n        this._element.style.display = 'block';\n    }\n\n    hide(): void {\n        setElementDisplayVisibility(this._element, false);\n    }\n}\n","import { DomConstants } from '../utils/dom-constants';\nimport { Rect } from '../utils/types';\n\n/** @internal @deprecated To be removed */\nexport class TransitionIndicator {\n    private _element: HTMLElement;\n    private _toElement: HTMLElement | null;\n    private _fromDimensions: null;\n    private _totalAnimationDuration: number;\n    private _animationStartTime: number | null;\n\n    constructor() {\n        this._element = document.createElement('div');\n        this._element.classList.add(DomConstants.ClassName.TransitionIndicator);\n        document.body.appendChild(this._element);\n\n        this._toElement = null;\n        this._fromDimensions = null;\n        this._totalAnimationDuration = 200;\n        this._animationStartTime = null;\n    }\n\n    destroy(): void {\n        this._element.remove();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    transitionElements(fromElement: HTMLElement, toElement: HTMLElement): void {\n        /**\n         * TODO - This is not quite as cool as expected. Review.\n         */\n        return;\n        // this._toElement = toElement;\n        // this._animationStartTime = now();\n        // this._fromDimensions = this._measure(fromElement);\n        // this._fromDimensions.opacity = 0.8;\n        // this._element.show().css(this._fromDimensions);\n        // animFrame(fnBind(this._nextAnimationFrame, this));\n    }\n\n    private nextAnimationFrame(): void {\n        // if (this._toElement === null || this._fromDimensions === null || this._animationStartTime === null) {\n        //     throw new UnexpectedNullError('TINAFTD97115');\n        // } else {\n        //     const toDimensions = this.measure(this._toElement);\n        //     const animationProgress = (now() - this._animationStartTime) / this._totalAnimationDuration;\n        //     const currentFrameStyles = {};\n        //     const cssProperty;\n\n        //     if (animationProgress >= 1) {\n        //         this._element.style.display = 'none';\n        //         return;\n        //     }\n\n        //     toDimensions.opacity = 0;\n\n        //     for (const cssProperty in this._fromDimensions) {\n        //         currentFrameStyles[cssProperty] = this._fromDimensions[cssProperty] +\n        //             (toDimensions[cssProperty] - this._fromDimensions[cssProperty]) *\n        //             animationProgress;\n        //     }\n\n        //     this._element.css(currentFrameStyles);\n        //     animFrame(fnBind(this._nextAnimationFrame, this));\n        // }\n    }\n\n    private measure(element: HTMLElement): Rect {\n        const rect = element.getBoundingClientRect();\n\n        return {\n            left: rect.left,\n            top: rect.top,\n            width: element.offsetWidth,\n            height: element.offsetHeight,\n        };\n    }\n}\n","import { UnexpectedNullError } from '../errors/internal-error';\nimport { LayoutManager } from '../layout-manager';\nimport { EventEmitter } from './event-emitter';\n\n// Add our ChildEvent to WindowEventMap for type safety\n/** @public */\ndeclare global {\n    interface WindowEventMap {\n        [EventHub.ChildEventName]: CustomEvent<EventHub.ChildEventDetail>;\n    }\n}\n\n/**\n * An EventEmitter singleton that propagates events\n * across multiple windows. This is a little bit trickier since\n * windows are allowed to open childWindows in their own right.\n *\n * This means that we deal with a tree of windows. Therefore, we do the event propagation in two phases:\n *\n * - Propagate events from this layout to the parent layout\n *   - Repeat until the event arrived at the root layout\n * - Propagate events to this layout and to all children\n *   - Repeat until all layouts got the event\n *\n * **WARNING**: Only userBroadcast events are propagated between windows.\n * This means the you have to take care of propagating state changes between windows yourself.\n *\n * @public\n */\nexport class EventHub extends EventEmitter {\n\n    /** @internal */\n    private _childEventListener = (childEvent: CustomEvent<EventHub.ChildEventDetail>) => this.onEventFromChild(childEvent);\n\n    /**\n     * Creates a new EventHub instance\n     * @param _layoutManager - the layout manager to synchronize between the windows\n     * @internal\n     */\n    constructor(\n        /** @internal */\n        private _layoutManager: LayoutManager\n    ) {\n        super();\n        globalThis.addEventListener(EventHub.ChildEventName, this._childEventListener, { passive: true });\n    }\n\n    /**\n     * Emit an event and notify listeners\n     *\n     * @param eventName - The name of the event\n     * @param args - Additional arguments that will be passed to the listener\n     * @public\n     */\n    override emit<K extends keyof EventEmitter.EventParamsMap>(eventName: K, ...args: EventEmitter.EventParamsMap[K]): void {\n        if (eventName === 'userBroadcast') {\n            // Explicitly redirect the user broadcast to our overridden method.\n            this.emitUserBroadcast(...args);\n        } else {\n            super.emit(eventName, ...args);\n        }\n    }\n\n    /**\n     * Broadcasts a message to all other currently opened windows.\n     * @public\n     */\n    emitUserBroadcast(...args: EventEmitter.UnknownParams): void {\n        // Step 1: Bubble up the event\n        this.handleUserBroadcastEvent('userBroadcast', args);\n    }\n\n    /**\n     * Destroys the EventHub\n     * @internal\n     */\n    destroy(): void {\n        globalThis.removeEventListener(EventHub.ChildEventName, this._childEventListener);\n    }\n\n    /**\n     * Internal processor to process local events.\n     * @internal\n     */\n    private handleUserBroadcastEvent(eventName: string, args: unknown[]) {\n        if (this._layoutManager.isSubWindow) {\n            // We are a sub window and received an event from one of our children.\n            // So propagate it to the Root.\n            this.propagateToParent(eventName, args);\n        } else {\n            // We are the root window, propagate it to the subtree below us.\n            this.propagateToThisAndSubtree(eventName, args);\n        }\n    }\n\n    /**\n     * Callback for child events raised on the window\n     * @internal\n     */\n    private onEventFromChild(event: CustomEvent<EventHub.ChildEventDetail>) {\n        const detail = event.detail;\n        this.handleUserBroadcastEvent(detail.eventName, detail.args);\n    }\n\n    /**\n     * Propagates the event to the parent by emitting\n     * it on the parent's DOM window\n     * @internal\n     */\n    private propagateToParent(eventName: string, args: unknown[]) {\n        const detail: EventHub.ChildEventDetail = {\n            layoutManager: this._layoutManager,\n            eventName,\n            args: args,\n        }\n\n        const eventInit: EventHub.ChildEventInit = {\n            bubbles: true,\n            cancelable: true,\n            detail,\n        };\n\n        const event = new CustomEvent<EventHub.ChildEventDetail>(EventHub.ChildEventName, eventInit);\n        const opener = globalThis.opener;\n        if (opener === null) {\n            throw new UnexpectedNullError('EHPTP15778')\n        }\n\n        opener.dispatchEvent(event);\n    }\n\n    /**\n     * Propagate events to the whole subtree under this event hub.\n     * @internal\n     */\n    private propagateToThisAndSubtree(eventName: string, args: unknown[]) {\n        this.emitUnknown(eventName, ...args);\n        for (let i = 0; i < this._layoutManager.openPopouts.length; i++) {\n            const childGl = this._layoutManager.openPopouts[i].getGlInstance();\n\n            if (childGl) {\n                childGl.eventHub.propagateToThisAndSubtree(eventName, args);\n            }\n        }\n    }\n}\n\n/** @public */\nexport namespace EventHub {\n\n    /** @internal */\n    export const ChildEventName = 'gl_child_event';\n\n    /** @internal */\n    export type ChildEventDetail = {\n        layoutManager: LayoutManager;\n        eventName: string;\n        args: unknown[];\n    };\n\n    /** @internal */\n    export type ChildEventInit = CustomEventInit<ChildEventDetail>;\n}\n","import { ComponentItemConfig, ItemConfig, LayoutConfig, RowOrColumnItemConfig, StackItemConfig } from './config/config';\nimport {\n    ResolvedComponentItemConfig,\n    ResolvedItemConfig,\n    ResolvedLayoutConfig,\n    ResolvedPopoutLayoutConfig,\n    ResolvedRootItemConfig,\n    ResolvedRowOrColumnItemConfig,\n    ResolvedStackItemConfig\n} from \"./config/resolved-config\";\nimport { ComponentContainer } from './container/component-container';\nimport { BrowserPopout } from './controls/browser-popout';\nimport { DragProxy } from './controls/drag-proxy';\nimport { DragSource } from './controls/drag-source';\nimport { DropTargetIndicator } from './controls/drop-target-indicator';\nimport { TransitionIndicator } from './controls/transition-indicator';\nimport { ConfigurationError } from './errors/external-error';\nimport { AssertError, UnexpectedNullError, UnexpectedUndefinedError, UnreachableCaseError } from './errors/internal-error';\nimport { ComponentItem } from './items/component-item';\nimport { ComponentParentableItem } from './items/component-parentable-item';\nimport { ContentItem } from './items/content-item';\nimport { GroundItem } from './items/ground-item';\nimport { RowOrColumn } from './items/row-or-column';\nimport { Stack } from './items/stack';\nimport { ConfigMinifier } from './utils/config-minifier';\nimport { DomConstants } from './utils/dom-constants';\nimport { DragListener } from './utils/drag-listener';\nimport { EventEmitter } from './utils/event-emitter';\nimport { EventHub } from './utils/event-hub';\nimport { I18nStringId, I18nStrings, i18nStrings } from './utils/i18n-strings';\nimport { ItemType, JsonValue, Rect, ResponsiveMode } from './utils/types';\nimport {\n    getElementWidthAndHeight,\n    removeFromArray,\n    setElementHeight,\n    setElementWidth\n} from './utils/utils';\n\n/** @internal */\ndeclare global {\n    interface Window {\n        __glInstance: LayoutManager;\n    }\n}\n\n/**\n * The main class that will be exposed as GoldenLayout.\n */\n\n/** @public */\nexport abstract class LayoutManager extends EventEmitter {\n    /** Whether the layout will be automatically be resized to container whenever the container's size is changed\n     * Default is true if <body> is the container otherwise false\n     * Default will be changed to true for any container in the future\n     */\n    resizeWithContainerAutomatically = false;\n    /** The debounce interval (in milliseconds) used whenever a layout is automatically resized.  0 means next tick */\n    resizeDebounceInterval = 100;\n    /** Extend the current debounce delay time period if it is triggered during the delay.\n     * If this is true, the layout will only resize when its container has stopped being resized.\n     * If it is false, the layout will resize at intervals while its container is being resized.\n     */\n    resizeDebounceExtendedWhenPossible = true;\n\n    /** @internal */\n    private _containerElement: HTMLElement;\n    /** @internal */\n    private _isInitialised = false;\n    /** @internal */\n    private _groundItem: GroundItem | undefined = undefined;\n    /** @internal */\n    private _openPopouts: BrowserPopout[] = [];\n    /** @internal */\n    private _dropTargetIndicator: DropTargetIndicator | null = null;\n    /** @internal */\n    private _transitionIndicator: TransitionIndicator | null = null;\n    /** @internal */\n    private _resizeTimeoutId: ReturnType<typeof setTimeout> | undefined;\n    /** @internal */\n    private _itemAreas: ContentItem.Area[] = [];\n    /** @internal */\n    private _maximisedStack: Stack | undefined;\n    /** @internal */\n    private _maximisePlaceholder = LayoutManager.createMaximisePlaceElement(document);\n    /** @internal */\n    private _tabDropPlaceholder = LayoutManager.createTabDropPlaceholderElement(document);\n    /** @internal */\n    private _dragSources: DragSource[] = [];\n    /** @internal */\n    private _updatingColumnsResponsive = false;\n    /** @internal */\n    private _firstLoad = true;\n    /** @internal */\n    private _eventHub = new EventHub(this);\n    /** @internal */\n    private _width: number | null = null;\n    /** @internal */\n    private _height: number | null = null;\n    /** @internal */\n    private _focusedComponentItem: ComponentItem | undefined;\n    /** @internal */\n    private _virtualSizedContainers: ComponentContainer[] = [];\n    /** @internal */\n    private _virtualSizedContainerAddingBeginCount = 0;\n    /** @internal */\n    private _sizeInvalidationBeginCount = 0;\n    /** @internal */\n    protected _constructorOrSubWindowLayoutConfig: LayoutConfig | undefined; // protected for backwards compatibility\n\n    /** @internal */\n    private _resizeObserver = new ResizeObserver(() => this.handleContainerResize());\n    /** @internal @deprecated to be removed in version 3 */\n    private _windowBeforeUnloadListener = () => this.onBeforeUnload();\n    /** @internal @deprecated to be removed in version 3 */\n    private _windowBeforeUnloadListening = false;\n    /** @internal */\n    private _maximisedStackBeforeDestroyedListener = (ev: EventEmitter.BubblingEvent) => this.cleanupBeforeMaximisedStackDestroyed(ev);\n\n    readonly isSubWindow: boolean;\n    layoutConfig: ResolvedLayoutConfig;\n\n    beforeVirtualRectingEvent: LayoutManager.BeforeVirtualRectingEvent | undefined;\n    afterVirtualRectingEvent: LayoutManager.AfterVirtualRectingEvent | undefined;\n\n    get container(): HTMLElement { return this._containerElement; }\n    get isInitialised(): boolean { return this._isInitialised; }\n    /** @internal */\n    get groundItem(): GroundItem | undefined { return this._groundItem; }\n    /** @internal @deprecated use {@link (LayoutManager:class).groundItem} instead */\n    get root(): GroundItem | undefined { return this._groundItem; }\n    get openPopouts(): BrowserPopout[] { return this._openPopouts; }\n    /** @internal */\n    get dropTargetIndicator(): DropTargetIndicator | null { return this._dropTargetIndicator; }\n    /** @internal @deprecated To be removed */\n    get transitionIndicator(): TransitionIndicator | null { return this._transitionIndicator; }\n    get width(): number | null { return this._width; }\n    get height(): number | null { return this._height; }\n    /**\n     * Retrieves the {@link (EventHub:class)} instance associated with this layout manager.\n     * This can be used to propagate events between the windows\n     * @public\n     */\n    get eventHub(): EventHub { return this._eventHub; }\n    get rootItem(): ContentItem | undefined {\n        if (this._groundItem === undefined) {\n            throw new Error('Cannot access rootItem before init');\n        } else {\n            const groundContentItems = this._groundItem.contentItems;\n            if (groundContentItems.length === 0) {\n                return undefined;\n            } else {\n                return this._groundItem.contentItems[0];\n            }\n        }\n    }\n    get focusedComponentItem(): ComponentItem | undefined { return this._focusedComponentItem; }\n    /** @internal */\n    get tabDropPlaceholder(): HTMLElement { return this._tabDropPlaceholder; }\n    get maximisedStack(): Stack | undefined { return this._maximisedStack; }\n\n    /** @deprecated indicates deprecated constructor use */\n    get deprecatedConstructor(): boolean { return !this.isSubWindow && this._constructorOrSubWindowLayoutConfig !== undefined; }\n\n\n    /**\n    * @param container - A Dom HTML element. Defaults to body\n    * @internal\n    */\n    constructor(parameters: LayoutManager.ConstructorParameters) {\n        super();\n\n        this.isSubWindow = parameters.isSubWindow;\n\n        this._constructorOrSubWindowLayoutConfig = parameters.constructorOrSubWindowLayoutConfig;\n\n        I18nStrings.checkInitialise();\n        ConfigMinifier.checkInitialise();\n\n        if (parameters.containerElement !== undefined) {\n            this._containerElement = parameters.containerElement;\n        }\n    }\n\n    /**\n     * Destroys the LayoutManager instance itself as well as every ContentItem\n     * within it. After this is called nothing should be left of the LayoutManager.\n     *\n     * This function only needs to be called if an application wishes to destroy the Golden Layout object while\n     * a page remains loaded. When a page is unloaded, all resources claimed by Golden Layout will automatically\n     * be released.\n     */\n    destroy(): void {\n        if (this._isInitialised) {\n            if (this._windowBeforeUnloadListening) {\n                globalThis.removeEventListener('beforeunload', this._windowBeforeUnloadListener);\n                this._windowBeforeUnloadListening = false;\n            }\n\n            if (this.layoutConfig.settings.closePopoutsOnUnload === true) {\n                this.closeAllOpenPopouts();\n            }\n\n            this._resizeObserver.disconnect();\n            this.checkClearResizeTimeout();\n\n            if (this._groundItem !== undefined) {\n                this._groundItem.destroy();\n            }\n            this._tabDropPlaceholder.remove();\n            if (this._dropTargetIndicator !== null) {\n                this._dropTargetIndicator.destroy();\n            }\n            if (this._transitionIndicator !== null) {\n                this._transitionIndicator.destroy();\n            }\n            this._eventHub.destroy();\n\n            for (const dragSource of this._dragSources) {\n                dragSource.destroy();\n            }\n            this._dragSources = [];\n\n            this._isInitialised = false;\n        }\n    }\n\n    /**\n     * Takes a GoldenLayout configuration object and\n     * replaces its keys and values recursively with\n     * one letter codes\n     * @deprecated use {@link (ResolvedLayoutConfig:namespace).minifyConfig} instead\n     */\n    minifyConfig(config: ResolvedLayoutConfig): ResolvedLayoutConfig {\n        return ResolvedLayoutConfig.minifyConfig(config);\n    }\n\n    /**\n     * Takes a configuration Object that was previously minified\n     * using minifyConfig and returns its original version\n     * @deprecated use {@link (ResolvedLayoutConfig:namespace).unminifyConfig} instead\n     */\n    unminifyConfig(config: ResolvedLayoutConfig): ResolvedLayoutConfig {\n        return ResolvedLayoutConfig.unminifyConfig(config);\n    }\n\n    /** @internal */\n    abstract bindComponent(container: ComponentContainer, itemConfig: ResolvedComponentItemConfig): ComponentContainer.BindableComponent;\n    /** @internal */\n    abstract unbindComponent(container: ComponentContainer, virtual: boolean, component: ComponentContainer.Component | undefined): void;\n\n    /**\n     * Called from GoldenLayout class. Finishes of init\n     * @internal\n     */\n    init(): void {\n        this.setContainer();\n        this._dropTargetIndicator = new DropTargetIndicator(/*this.container*/);\n        this._transitionIndicator = new TransitionIndicator();\n        this.updateSizeFromContainer();\n\n        let subWindowRootConfig: ComponentItemConfig | undefined;\n        if (this.isSubWindow) {\n            if (this._constructorOrSubWindowLayoutConfig === undefined) {\n                // SubWindow LayoutConfig should have been generated by constructor\n                throw new UnexpectedUndefinedError('LMIU07155');\n            } else {\n                const root = this._constructorOrSubWindowLayoutConfig.root;\n                if (root === undefined) {\n                    // SubWindow LayoutConfig must not be empty\n                    throw new AssertError('LMIC07156');\n                } else {\n                    if (ItemConfig.isComponent(root)) {\n                        subWindowRootConfig = root;\n                    } else {\n                        // SubWindow LayoutConfig must have Component as Root\n                        throw new AssertError('LMIC07157');\n                    }\n                }\n                const resolvedLayoutConfig = LayoutConfig.resolve(this._constructorOrSubWindowLayoutConfig);\n                // remove root from layoutConfig\n                this.layoutConfig = {\n                    ...resolvedLayoutConfig,\n                    root: undefined,\n                }\n            }\n        } else {\n            if (this._constructorOrSubWindowLayoutConfig === undefined) {\n                this.layoutConfig = ResolvedLayoutConfig.createDefault(); // will overwritten be loaded via loadLayout\n            } else {\n                // backwards compatibility\n                this.layoutConfig = LayoutConfig.resolve(this._constructorOrSubWindowLayoutConfig);\n            }\n        }\n        const layoutConfig = this.layoutConfig;\n        this._groundItem = new GroundItem(this, layoutConfig.root, this._containerElement);\n        this._groundItem.init();\n\n        this.checkLoadedLayoutMaximiseItem();\n\n        this._resizeObserver.observe(this._containerElement);\n        this._isInitialised = true;\n        this.adjustColumnsResponsive();\n        this.emit('initialised');\n\n        if (subWindowRootConfig !== undefined) {\n            // must be SubWindow\n            this.loadComponentAsRoot(subWindowRootConfig);\n        }\n    }\n\n    /**\n     * Loads a new layout\n     * @param layoutConfig - New layout to be loaded\n     */\n    loadLayout(layoutConfig: LayoutConfig): void {\n        if (!this.isInitialised) {\n            // In case application not correctly using legacy constructor\n            throw new Error('GoldenLayout: Need to call init() if LayoutConfig with defined root passed to constructor')\n        } else {\n            if (this._groundItem === undefined) {\n                throw new UnexpectedUndefinedError('LMLL11119');\n            } else {\n                this.createSubWindows(); // still needs to be tested\n\n                this.layoutConfig = LayoutConfig.resolve(layoutConfig);\n                this._groundItem.loadRoot(this.layoutConfig.root);\n                this.checkLoadedLayoutMaximiseItem();\n                this.adjustColumnsResponsive();\n            }\n        }\n    }\n\n    /**\n     * Creates a layout configuration object based on the the current state\n     *\n     * @public\n     * @returns GoldenLayout configuration\n     */\n    saveLayout(): ResolvedLayoutConfig {\n        if (this._isInitialised === false) {\n            throw new Error('Can\\'t create config, layout not yet initialised');\n        } else {\n\n            // if (root !== undefined && !(root instanceof ContentItem)) {\n            //     throw new Error('Root must be a ContentItem');\n            // }\n\n            /*\n            * Content\n            */\n            if (this._groundItem === undefined) {\n                throw new UnexpectedUndefinedError('LMTC18244');\n            } else {\n                const groundContent = this._groundItem.calculateConfigContent();\n\n                let rootItemConfig: ResolvedRootItemConfig | undefined;\n                if (groundContent.length !== 1) {\n                    rootItemConfig = undefined;\n                } else {\n                    rootItemConfig = groundContent[0];\n                }\n\n                /*\n                * Retrieve config for subwindows\n                */\n                this.reconcilePopoutWindows();\n                const openPopouts: ResolvedPopoutLayoutConfig[] = [];\n                for (let i = 0; i < this._openPopouts.length; i++) {\n                    openPopouts.push(this._openPopouts[i].toConfig());\n                }\n\n                const config: ResolvedLayoutConfig = {\n                    root: rootItemConfig,\n                    openPopouts,\n                    settings:  ResolvedLayoutConfig.Settings.createCopy(this.layoutConfig.settings),\n                    dimensions: ResolvedLayoutConfig.Dimensions.createCopy(this.layoutConfig.dimensions),\n                    header: ResolvedLayoutConfig.Header.createCopy(this.layoutConfig.header),\n                    resolved: true,\n                }\n\n                return config;\n            }\n        }\n    }\n\n    /**\n     * Removes any existing layout. Effectively, an empty layout will be loaded.\n     */\n\n    clear(): void {\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMCL11129');\n        } else {\n            this._groundItem.clearRoot();\n        }\n    }\n\n    /**\n     * @deprecated Use {@link (LayoutManager:class).saveLayout}\n     */\n    toConfig(): ResolvedLayoutConfig {\n        return this.saveLayout();\n    }\n\n    /**\n     * Adds a new ComponentItem.  Will use default location selectors to ensure a location is found and\n     * component is successfully added\n     * @param componentTypeName - Name of component type to be created.\n     * @param state - Optional initial state to be assigned to component\n     * @returns New ComponentItem created.\n     */\n    newComponent(componentType: JsonValue, componentState?: JsonValue, title?: string): ComponentItem {\n        const componentItem = this.newComponentAtLocation(componentType, componentState, title);\n        if (componentItem === undefined) {\n            throw new AssertError('LMNC65588');\n        } else {\n            return componentItem;\n        }\n    }\n\n    /**\n     * Adds a ComponentItem at the first valid selector location.\n     * @param componentTypeName - Name of component type to be created.\n     * @param state - Optional initial state to be assigned to component\n     * @param locationSelectors - Array of location selectors used to find location in layout where component\n     * will be added. First location in array which is valid will be used. If locationSelectors is undefined,\n     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used\n     * @returns New ComponentItem created or undefined if no valid location selector was in array.\n     */\n    newComponentAtLocation(componentType: JsonValue, componentState?: JsonValue, title?: string,\n        locationSelectors?: LayoutManager.LocationSelector[]\n    ): ComponentItem | undefined{\n        if (this._groundItem === undefined) {\n            throw new Error('Cannot add component before init');\n        } else {\n            const location = this.addComponentAtLocation(componentType, componentState, title, locationSelectors);\n            if (location === undefined) {\n                return undefined;\n            } else {\n                const createdItem = location.parentItem.contentItems[location.index];\n                if (!ContentItem.isComponentItem(createdItem)) {\n                    throw new AssertError('LMNC992877533');\n                } else {\n                    return createdItem;\n                }\n            }\n        }\n    }\n\n    /**\n     * Adds a new ComponentItem.  Will use default location selectors to ensure a location is found and\n     * component is successfully added\n     * @param componentType - Type of component to be created.\n     * @param state - Optional initial state to be assigned to component\n     * @returns Location of new ComponentItem created.\n     */\n    addComponent(componentType: JsonValue, componentState?: JsonValue, title?: string): LayoutManager.Location {\n        const location = this.addComponentAtLocation(componentType, componentState, title);\n        if (location === undefined) {\n            throw new AssertError('LMAC99943');\n        } else {\n            return location;\n        }\n    }\n\n    /**\n     * Adds a ComponentItem at the first valid selector location.\n     * @param componentType - Type of component to be created.\n     * @param state - Optional initial state to be assigned to component\n     * @param locationSelectors - Array of location selectors used to find determine location in layout where component\n     * will be added. First location in array which is valid will be used. If undefined,\n     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.\n     * @returns Location of new ComponentItem created or undefined if no valid location selector was in array.\n     */\n    addComponentAtLocation(componentType: JsonValue, componentState?: JsonValue, title?: string,\n        locationSelectors?: readonly LayoutManager.LocationSelector[]\n    ): LayoutManager.Location | undefined {\n        const itemConfig: ComponentItemConfig = {\n            type: 'component',\n            componentType,\n            componentState,\n            title,\n        };\n\n        return this.addItemAtLocation(itemConfig, locationSelectors);\n    }\n\n    /**\n     * Adds a new ContentItem.  Will use default location selectors to ensure a location is found and\n     * component is successfully added\n     * @param itemConfig - ResolvedItemConfig of child to be added.\n     * @returns New ContentItem created.\n    */\n    newItem(itemConfig: RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig): ContentItem {\n        const contentItem = this.newItemAtLocation(itemConfig);\n        if (contentItem === undefined) {\n            throw new AssertError('LMNC65588');\n        } else {\n            return contentItem;\n        }\n    }\n\n    /**\n     * Adds a new child ContentItem under the root ContentItem.  If a root does not exist, then create root ContentItem instead\n     * @param itemConfig - ResolvedItemConfig of child to be added.\n     * @param locationSelectors - Array of location selectors used to find determine location in layout where ContentItem\n     * will be added. First location in array which is valid will be used. If undefined,\n     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.\n     * @returns New ContentItem created or undefined if no valid location selector was in array. */\n    newItemAtLocation(itemConfig: RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig,\n        locationSelectors?: readonly LayoutManager.LocationSelector[]\n    ): ContentItem | undefined {\n        if (this._groundItem === undefined) {\n            throw new Error('Cannot add component before init');\n        } else {\n            const location = this.addItemAtLocation(itemConfig, locationSelectors);\n            if (location === undefined) {\n                return undefined;\n            } else {\n                const createdItem = location.parentItem.contentItems[location.index];\n                return createdItem;\n            }\n        }\n    }\n\n    /**\n     * Adds a new ContentItem.  Will use default location selectors to ensure a location is found and\n     * component is successfully added.\n     * @param itemConfig - ResolvedItemConfig of child to be added.\n     * @returns Location of new ContentItem created. */\n    addItem(itemConfig: RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig): LayoutManager.Location {\n        const location = this.addItemAtLocation(itemConfig);\n        if (location === undefined) {\n            throw new AssertError('LMAI99943');\n        } else {\n            return location;\n        }\n    }\n\n    /**\n     * Adds a ContentItem at the first valid selector location.\n     * @param itemConfig - ResolvedItemConfig of child to be added.\n     * @param locationSelectors - Array of location selectors used to find determine location in layout where ContentItem\n     * will be added. First location in array which is valid will be used. If undefined,\n     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.\n     * @returns Location of new ContentItem created or undefined if no valid location selector was in array. */\n    addItemAtLocation(itemConfig: RowOrColumnItemConfig | StackItemConfig | ComponentItemConfig,\n        locationSelectors?: readonly LayoutManager.LocationSelector[]\n    ): LayoutManager.Location | undefined {\n        if (this._groundItem === undefined) {\n            throw new Error('Cannot add component before init');\n        } else {\n            if (locationSelectors === undefined) {\n                // defaultLocationSelectors should always find a location\n                locationSelectors = LayoutManager.defaultLocationSelectors;\n            }\n\n            const location = this.findFirstLocation(locationSelectors);\n            if (location === undefined) {\n                return undefined;\n            } else {\n                let parentItem = location.parentItem;\n                let addIdx: number;\n                switch (parentItem.type) {\n                    case ItemType.ground: {\n                        const groundItem = parentItem as GroundItem;\n                        addIdx = groundItem.addItem(itemConfig, location.index);\n                        if (addIdx >= 0) {\n                            parentItem = this._groundItem.contentItems[0]; // was added to rootItem\n                        } else {\n                            addIdx = 0; // was added as rootItem (which is the first and only ContentItem in GroundItem)\n                        }\n                        break;\n                    }\n                    case ItemType.row:\n                    case ItemType.column: {\n                        const rowOrColumn = parentItem as RowOrColumn;\n                        addIdx = rowOrColumn.addItem(itemConfig, location.index);\n                        break;\n                    }\n                    case ItemType.stack: {\n                        if (!ItemConfig.isComponent(itemConfig)) {\n                            throw Error(i18nStrings[I18nStringId.ItemConfigIsNotTypeComponent]);\n                        } else {\n                            const stack = parentItem as Stack;\n                            addIdx = stack.addItem(itemConfig, location.index);\n                            break;\n                        }\n                    }\n                    case ItemType.component: {\n                        throw new AssertError('LMAIALC87444602');\n                    }\n                    default:\n                        throw new UnreachableCaseError('LMAIALU98881733', parentItem.type);\n                }\n\n                if (ItemConfig.isComponent(itemConfig)) {\n                    // see if stack was inserted\n                    const item = parentItem.contentItems[addIdx];\n                    if (ContentItem.isStack(item)) {\n                        parentItem = item;\n                        addIdx = 0;\n                    }\n                }\n\n                location.parentItem = parentItem;\n                location.index = addIdx;\n\n                return location;\n            }\n        }\n    }\n\n    /** Loads the specified component ResolvedItemConfig as root.\n     * This can be used to display a Component all by itself.  The layout cannot be changed other than having another new layout loaded.\n     * Note that, if this layout is saved and reloaded, it will reload with the Component as a child of a Stack.\n    */\n    loadComponentAsRoot(itemConfig: ComponentItemConfig): void {\n        if (this._groundItem === undefined) {\n            throw new Error('Cannot add item before init');\n        } else {\n            this._groundItem.loadComponentAsRoot(itemConfig);\n        }\n    }\n\n    /** @deprecated Use {@link (LayoutManager:class).setSize} */\n    updateSize(width: number, height: number): void {\n        this.setSize(width, height);\n    }\n\n    /**\n     * Updates the layout managers size\n     *\n     * @param width - Width in pixels\n     * @param height - Height in pixels\n     */\n    setSize(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        if (this._isInitialised === true) {\n            if (this._groundItem === undefined) {\n                throw new UnexpectedUndefinedError('LMUS18881');\n            } else {\n                this._groundItem.setSize(this._width, this._height);\n\n                if (this._maximisedStack) {\n                    const { width, height } = getElementWidthAndHeight(this._containerElement);\n                    setElementWidth(this._maximisedStack.element, width);\n                    setElementHeight(this._maximisedStack.element, height);\n                    this._maximisedStack.updateSize(false);\n                }\n\n                this.adjustColumnsResponsive();\n            }\n        }\n    }\n\n    /** @internal */\n    beginSizeInvalidation(): void {\n        this._sizeInvalidationBeginCount++;\n    }\n\n    /** @internal */\n    endSizeInvalidation(): void {\n        if (--this._sizeInvalidationBeginCount === 0) {\n            this.updateSizeFromContainer();\n        }\n    }\n\n    /** @internal */\n    updateSizeFromContainer(): void {\n        const { width, height } = getElementWidthAndHeight(this._containerElement);\n        this.setSize(width, height);\n    }\n\n    /**\n     * Update the size of the root ContentItem.  This will update the size of all contentItems in the tree\n     * @param force - In some cases the size is not updated if it has not changed. In this case, events\n     * (such as ComponentContainer.virtualRectingRequiredEvent) are not fired. Setting force to true, ensures the size is updated regardless, and\n     * the respective events are fired. This is sometimes necessary when a component's size has not changed but it has become visible, and the\n     * relevant events need to be fired.\n     */\n    updateRootSize(force = false): void {\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMURS28881');\n        } else {\n            this._groundItem.updateSize(force);\n        }\n    }\n\n    /** @public */\n    createAndInitContentItem(config: ResolvedItemConfig, parent: ContentItem): ContentItem {\n        const newItem = this.createContentItem(config, parent);\n        newItem.init();\n        return newItem;\n    }\n\n    /**\n     * Recursively creates new item tree structures based on a provided\n     * ItemConfiguration object\n     *\n     * @param config - ResolvedItemConfig\n     * @param parent - The item the newly created item should be a child of\n     * @internal\n     */\n    createContentItem(config: ResolvedItemConfig, parent: ContentItem): ContentItem {\n        if (typeof config.type !== 'string') {\n            throw new ConfigurationError('Missing parameter \\'type\\'', JSON.stringify(config));\n        }\n\n        /**\n         * We add an additional stack around every component that's not within a stack anyways.\n         */\n        if (\n            // If this is a component\n            ResolvedItemConfig.isComponentItem(config) &&\n\n            // and it's not already within a stack\n            !(parent instanceof Stack) &&\n\n            // and we have a parent\n            !!parent &&\n\n            // and it's not the topmost item in a new window\n            !(this.isSubWindow === true && parent instanceof GroundItem)\n        ) {\n            const stackConfig: ResolvedStackItemConfig = {\n                type: ItemType.stack,\n                content: [config],\n                size: config.size,\n                sizeUnit: config.sizeUnit,\n                minSize: config.minSize,\n                minSizeUnit: config.minSizeUnit,\n                id: config.id,\n                maximised: config.maximised,\n                isClosable: config.isClosable,\n                activeItemIndex: 0,\n                header: undefined,\n            };\n\n            config = stackConfig;\n        }\n\n        const contentItem = this.createContentItemFromConfig(config, parent);\n        return contentItem;\n    }\n\n    findFirstComponentItemById(id: string): ComponentItem | undefined {\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMFFCIBI82446');\n        } else {\n            return this.findFirstContentItemTypeByIdRecursive(ItemType.component, id, this._groundItem) as ComponentItem;\n        }\n    }\n\n    /**\n     * Creates a popout window with the specified content at the specified position\n     *\n     * @param itemConfigOrContentItem - The content of the popout window's layout manager derived from either\n     * a {@link (ContentItem:class)} or {@link (ItemConfig:interface)} or ResolvedItemConfig content (array of {@link (ItemConfig:interface)})\n     * @param positionAndSize - The width, height, left and top of Popout window\n     * @param parentId -The id of the element this item will be appended to when popIn is called\n     * @param indexInParent - The position of this item within its parent element\n     */\n\n    createPopout(itemConfigOrContentItem: ContentItem | ResolvedRootItemConfig,\n        positionAndSize: ResolvedPopoutLayoutConfig.Window,\n        parentId: string | null,\n        indexInParent: number | null\n    ): BrowserPopout {\n        if (itemConfigOrContentItem instanceof ContentItem) {\n            return this.createPopoutFromContentItem(itemConfigOrContentItem, positionAndSize, parentId, indexInParent);\n        } else {\n            return this.createPopoutFromItemConfig(itemConfigOrContentItem, positionAndSize, parentId, indexInParent);\n        }\n    }\n\n    /** @internal */\n    createPopoutFromContentItem(item: ContentItem,\n        window: ResolvedPopoutLayoutConfig.Window | undefined,\n        parentId: string | null,\n        indexInParent: number | null | undefined,\n    ): BrowserPopout {\n        /**\n         * If the item is the only component within a stack or for some\n         * other reason the only child of its parent the parent will be destroyed\n         * when the child is removed.\n         *\n         * In order to support this we move up the tree until we find something\n         * that will remain after the item is being popped out\n         */\n        let parent = item.parent;\n        let child = item;\n        while (parent !== null && parent.contentItems.length === 1 && !parent.isGround) {\n            child = parent;\n            parent = parent.parent;\n        }\n\n        if (parent === null) {\n            throw new UnexpectedNullError('LMCPFCI00834');\n        } else {\n            if (indexInParent === undefined) {\n                indexInParent = parent.contentItems.indexOf(child);\n            }\n\n            if (parentId !== null) {\n                parent.addPopInParentId(parentId);\n            }\n\n            if (window === undefined) {\n                const windowLeft = globalThis.screenX || globalThis.screenLeft;\n                const windowTop = globalThis.screenY || globalThis.screenTop;\n                const offsetLeft = item.element.offsetLeft;\n                const offsetTop = item.element.offsetTop\n                // const { left: offsetLeft, top: offsetTop } = getJQueryLeftAndTop(item.element);\n                const { width, height } = getElementWidthAndHeight(item.element);\n\n                window = {\n                    left: windowLeft + offsetLeft,\n                    top: windowTop + offsetTop,\n                    width,\n                    height,\n                };\n            }\n\n            const itemConfig = item.toConfig();\n            item.remove();\n\n            if (!ResolvedRootItemConfig.isRootItemConfig(itemConfig)) {\n                throw new Error(`${i18nStrings[I18nStringId.PopoutCannotBeCreatedWithGroundItemConfig]}`);\n            } else {\n                return this.createPopoutFromItemConfig(itemConfig, window, parentId, indexInParent);\n            }\n        }\n    }\n\n    /** @internal */\n    beginVirtualSizedContainerAdding(): void {\n        if (++this._virtualSizedContainerAddingBeginCount === 0) {\n            this._virtualSizedContainers.length = 0;\n        }\n    }\n\n    /** @internal */\n    addVirtualSizedContainer(container: ComponentContainer): void {\n        this._virtualSizedContainers.push(container);\n    }\n\n    /** @internal */\n    endVirtualSizedContainerAdding(): void {\n        if (--this._virtualSizedContainerAddingBeginCount === 0) {\n            const count = this._virtualSizedContainers.length;\n            if (count > 0) {\n                this.fireBeforeVirtualRectingEvent(count);\n                for (let i = 0; i < count; i++) {\n                    const container = this._virtualSizedContainers[i];\n                    container.notifyVirtualRectingRequired();\n                }\n                this.fireAfterVirtualRectingEvent();\n                this._virtualSizedContainers.length = 0;\n            }\n        }\n    }\n\n    /** @internal */\n    fireBeforeVirtualRectingEvent(count: number): void {\n        if (this.beforeVirtualRectingEvent !== undefined) {\n            this.beforeVirtualRectingEvent(count);\n        }\n    }\n\n    /** @internal */\n    fireAfterVirtualRectingEvent(): void {\n        if (this.afterVirtualRectingEvent !== undefined) {\n            this.afterVirtualRectingEvent();\n        }\n    }\n\n    /** @internal */\n    private createPopoutFromItemConfig(rootItemConfig: ResolvedRootItemConfig,\n        window: ResolvedPopoutLayoutConfig.Window,\n        parentId: string | null,\n        indexInParent: number | null\n    ) {\n        const layoutConfig = this.toConfig();\n\n        const popoutLayoutConfig: ResolvedPopoutLayoutConfig = {\n            root: rootItemConfig,\n            openPopouts: [],\n            settings: layoutConfig.settings,\n            dimensions: layoutConfig.dimensions,\n            header: layoutConfig.header,\n            window,\n            parentId,\n            indexInParent,\n            resolved: true,\n        }\n\n        return this.createPopoutFromPopoutLayoutConfig(popoutLayoutConfig);\n    }\n\n    /** @internal */\n    createPopoutFromPopoutLayoutConfig(config: ResolvedPopoutLayoutConfig): BrowserPopout {\n        const configWindow = config.window;\n        const initialWindow: Rect = {\n            left: configWindow.left ?? (globalThis.screenX || globalThis.screenLeft + 20),\n            top: configWindow.top ?? (globalThis.screenY || globalThis.screenTop + 20),\n            width: configWindow.width ?? 500,\n            height: configWindow.height ?? 309,\n        };\n\n        const browserPopout = new BrowserPopout(config, initialWindow, this);\n\n        browserPopout.on('initialised', () => this.emit('windowOpened', browserPopout));\n        browserPopout.on('closed', () => this.reconcilePopoutWindows());\n\n        this._openPopouts.push(browserPopout);\n\n        if (this.layoutConfig.settings.closePopoutsOnUnload && !this._windowBeforeUnloadListening) {\n            globalThis.addEventListener('beforeunload', this._windowBeforeUnloadListener, { passive: true });\n            this._windowBeforeUnloadListening = true;\n        }\n\n        return browserPopout;\n    }\n\n    /**\n     * Closes all Open Popouts\n     * Applications can call this method when a page is unloaded to remove its open popouts\n     */\n\n    closeAllOpenPopouts() {\n        for (let i = 0; i < this._openPopouts.length; i++) {\n            this._openPopouts[i].close();\n        }\n\n        this._openPopouts.length = 0;\n\n        if (this._windowBeforeUnloadListening) {\n            globalThis.removeEventListener('beforeunload', this._windowBeforeUnloadListener);\n            this._windowBeforeUnloadListening = false;\n        }\n    }\n\n    /**\n     * Attaches DragListener to any given DOM element\n     * and turns it into a way of creating new ComponentItems\n     * by 'dragging' the DOM element into the layout\n     *\n     * @param element - The HTML element which will be listened to for commencement of drag.\n     * @param componentTypeOrItemConfigCallback - Type of component to be created, or a callback which will provide the ItemConfig\n     * to be used to create the component.\n     * @param componentState - Optional initial state of component.  This will be ignored if componentTypeOrFtn is a function.\n     *\n     * @returns an opaque object that identifies the DOM element\n\t *          and the attached itemConfig. This can be used in\n\t *          removeDragSource() later to get rid of the drag listeners.\n     */\n    newDragSource(element: HTMLElement, itemConfigCallback: () => (DragSource.ComponentItemConfig | ComponentItemConfig)): DragSource;\n    /** @deprecated will be replaced in version 3 with newDragSource(element: HTMLElement, itemConfig: ComponentItemConfig) */\n    newDragSource(element: HTMLElement, componentType: JsonValue, componentState?: JsonValue, title?: JsonValue, id?: string): DragSource;\n    newDragSource(element: HTMLElement,\n        componentTypeOrItemConfigCallback: JsonValue | (() => (DragSource.ComponentItemConfig | ComponentItemConfig)),\n        componentState?: JsonValue,\n        title?: string,\n        id?: string,\n    ): DragSource {\n        const dragSource = new DragSource(this, element, [], componentTypeOrItemConfigCallback, componentState, title, id);\n        this._dragSources.push(dragSource);\n\n        return dragSource;\n    }\n\n    /**\n\t * Removes a DragListener added by createDragSource() so the corresponding\n\t * DOM element is not a drag source any more.\n\t */\n\tremoveDragSource(dragSource: DragSource): void {\n\t\tremoveFromArray(dragSource, this._dragSources );\n\t\tdragSource.destroy();\n    }\n\n    /** @internal */\n    startComponentDrag(x: number, y: number, dragListener: DragListener, componentItem: ComponentItem, stack: Stack): void {\n        new DragProxy(\n            x,\n            y,\n            dragListener,\n            this,\n            componentItem,\n            stack\n        );\n    }\n\n    /**\n     * Programmatically focuses an item. This focuses the specified component item\n     * and the item emits a focus event\n     *\n     * @param item - The component item to be focused\n     * @param suppressEvent - Whether to emit focus event\n     */\n    focusComponent(item: ComponentItem, suppressEvent = false): void {\n        item.focus(suppressEvent);\n    }\n\n    /**\n     * Programmatically blurs (defocuses) the currently focused component.\n     * If a component item is focused, then it is blurred and and the item emits a blur event\n     *\n     * @param item - The component item to be blurred\n     * @param suppressEvent - Whether to emit blur event\n     */\n    clearComponentFocus(suppressEvent = false): void {\n        this.setFocusedComponentItem(undefined, suppressEvent);\n    }\n\n    /**\n     * Programmatically focuses a component item or removes focus (blurs) from an existing focused component item.\n     *\n     * @param item - If defined, specifies the component item to be given focus.  If undefined, clear component focus.\n     * @param suppressEvents - Whether to emit focus and blur events\n     * @internal\n     */\n    setFocusedComponentItem(item: ComponentItem | undefined, suppressEvents = false): void {\n        if (item !== this._focusedComponentItem) {\n\n            let newFocusedParentItem: ComponentParentableItem | undefined;\n            if (item === undefined) {\n                newFocusedParentItem === undefined;\n            } else {\n                newFocusedParentItem = item.parentItem;\n            }\n\n            if (this._focusedComponentItem !== undefined) {\n                const oldFocusedItem = this._focusedComponentItem;\n                this._focusedComponentItem = undefined;\n                oldFocusedItem.setBlurred(suppressEvents);\n                const oldFocusedParentItem = oldFocusedItem.parentItem;\n                if (newFocusedParentItem === oldFocusedParentItem) {\n                    newFocusedParentItem = undefined;\n                } else {\n                    oldFocusedParentItem.setFocusedValue(false);\n                }\n            }\n\n            if (item !== undefined) {\n                this._focusedComponentItem = item;\n                item.setFocused(suppressEvents);\n                if (newFocusedParentItem !== undefined) {\n                    newFocusedParentItem.setFocusedValue(true);\n                }\n            }\n        }\n    }\n\n    /** @internal */\n    private createContentItemFromConfig(config: ResolvedItemConfig, parent: ContentItem): ContentItem {\n        switch (config.type) {\n            case ItemType.ground: throw new AssertError('LMCCIFC68871');\n            case ItemType.row: return new RowOrColumn(false, this, config as ResolvedRowOrColumnItemConfig, parent);\n            case ItemType.column: return new RowOrColumn(true, this, config as ResolvedRowOrColumnItemConfig, parent);\n            case ItemType.stack: return new Stack(this, config as ResolvedStackItemConfig, parent);\n            case ItemType.component:\n                return new ComponentItem(this, config as ResolvedComponentItemConfig, parent as Stack);\n            default:\n                throw new UnreachableCaseError('CCC913564', config.type, 'Invalid Config Item type specified');\n        }\n    }\n\n    /**\n     * This should only be called from stack component.\n     * Stack will look after docking processing associated with maximise/minimise\n     * @internal\n     **/\n    setMaximisedStack(stack: Stack | undefined): void {\n        if (stack === undefined) {\n            if (this._maximisedStack !== undefined) {\n                this.processMinimiseMaximisedStack();\n            }\n        } else {\n            if (stack !== this._maximisedStack) {\n                if (this._maximisedStack !== undefined) {\n                    this.processMinimiseMaximisedStack();\n                }\n\n                this.processMaximiseStack(stack);\n            }\n        }\n    }\n\n    checkMinimiseMaximisedStack(): void {\n        if (this._maximisedStack !== undefined) {\n            this._maximisedStack.minimise();\n        }\n    }\n\n    // showAllActiveContentItems() was called from ContentItem.show().  Not sure what its purpose was so have commented out\n    // Everything seems to work ok without this.  Have left commented code just in case there was a reason for it becomes\n    // apparent\n\n    // /** @internal */\n    // showAllActiveContentItems(): void {\n    //     const allStacks = this.getAllStacks();\n\n    //     for (let i = 0; i < allStacks.length; i++) {\n    //         const stack = allStacks[i];\n    //         const activeContentItem = stack.getActiveComponentItem();\n\n    //         if (activeContentItem !== undefined) {\n    //             if (!(activeContentItem instanceof ComponentItem)) {\n    //                 throw new AssertError('LMSAACIS22298');\n    //             } else {\n    //                 activeContentItem.container.show();\n    //             }\n    //         }\n    //     }\n    // }\n\n    // hideAllActiveContentItems() was called from ContentItem.hide().  Not sure what its purpose was so have commented out\n    // Everything seems to work ok without this.  Have left commented code just in case there was a reason for it becomes\n    // apparent\n\n    // /** @internal */\n    // hideAllActiveContentItems(): void {\n    //     const allStacks = this.getAllStacks();\n\n    //     for (let i = 0; i < allStacks.length; i++) {\n    //         const stack = allStacks[i];\n    //         const activeContentItem = stack.getActiveComponentItem();\n\n    //         if (activeContentItem !== undefined) {\n    //             if (!(activeContentItem instanceof ComponentItem)) {\n    //                 throw new AssertError('LMSAACIH22298');\n    //             } else {\n    //                 activeContentItem.container.hide();\n    //             }\n    //         }\n    //     }\n    // }\n\n    /** @internal */\n    private cleanupBeforeMaximisedStackDestroyed(event: EventEmitter.BubblingEvent) {\n\t\tif (this._maximisedStack !== null && this._maximisedStack === event.target) {\n\t\t\tthis._maximisedStack.off('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);\n\t\t\tthis._maximisedStack = undefined;\n\t\t}\n    }\n\n    /**\n     * This method is used to get around sandboxed iframe restrictions.\n     * If 'allow-top-navigation' is not specified in the iframe's 'sandbox' attribute\n     * (as is the case with codepens) the parent window is forbidden from calling certain\n     * methods on the child, such as window.close() or setting document.location.href.\n     *\n     * This prevented GoldenLayout popouts from popping in in codepens. The fix is to call\n     * _$closeWindow on the child window's gl instance which (after a timeout to disconnect\n     * the invoking method from the close call) closes itself.\n     *\n     * @internal\n     */\n    closeWindow(): void {\n        globalThis.setTimeout(() => globalThis.close(), 1);\n    }\n\n    /** @internal */\n    getArea(x: number, y: number): ContentItem.Area | null {\n        let matchingArea = null;\n        let smallestSurface = Infinity;\n\n        for (let i = 0; i < this._itemAreas.length; i++) {\n            const area = this._itemAreas[i];\n\n            if (\n                x >= area.x1 &&\n                x < area.x2 && // x2 is not included in area\n                y >= area.y1 &&\n                y < area.y2 && // y2 is not included in area\n                smallestSurface > area.surface\n            ) {\n                smallestSurface = area.surface;\n                matchingArea = area;\n            }\n        }\n\n        return matchingArea;\n    }\n\n    /** @internal */\n    calculateItemAreas(): void {\n        const allContentItems = this.getAllContentItems();\n        /**\n         * If the last item is dragged out, highlight the entire container size to\n         * allow to re-drop it. this.ground.contentiItems.length === 0 at this point\n         *\n         * Don't include ground into the possible drop areas though otherwise since it\n         * will used for every gap in the layout, e.g. splitters\n         */\n        const groundItem = this._groundItem;\n        if (groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMCIAR44365');\n        } else {\n            if (allContentItems.length === 1) {\n                // No root ContentItem (just Ground ContentItem)\n                const groundArea = groundItem.getElementArea();\n                if (groundArea === null) {\n                    throw new UnexpectedNullError('LMCIARA44365')\n                } else {\n                    this._itemAreas = [groundArea];\n                }\n                return;\n            } else {\n                if (groundItem.contentItems[0].isStack) {\n                    // if root is Stack, then split stack and sides of Layout are same, so skip sides\n                    this._itemAreas = [];\n                } else {\n                    // sides of layout\n                    this._itemAreas = groundItem.createSideAreas();\n                }\n\n                for (let i = 0; i < allContentItems.length; i++) {\n                    const stack = allContentItems[i];\n                    if (ContentItem.isStack(stack)) {\n                        const area = stack.getArea();\n\n                        if (area === null) {\n                            continue;\n                        } else {\n                            this._itemAreas.push(area);\n                            const stackContentAreaDimensions = stack.contentAreaDimensions;\n                            if (stackContentAreaDimensions === undefined) {\n                                throw new UnexpectedUndefinedError('LMCIASC45599');\n                            } else {\n                                const highlightArea = stackContentAreaDimensions.header.highlightArea\n                                const surface = (highlightArea.x2 - highlightArea.x1) * (highlightArea.y2 - highlightArea.y1);\n\n                                const header: ContentItem.Area = {\n                                    x1: highlightArea.x1,\n                                    x2: highlightArea.x2,\n                                    y1: highlightArea.y1,\n                                    y2: highlightArea.y2,\n                                    contentItem: stack,\n                                    surface,\n                                };\n                                this._itemAreas.push(header);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Called as part of loading a new layout (including initial init()).\n     * Checks to see layout has a maximised item. If so, it maximises that item.\n     * @internal\n     */\n    private checkLoadedLayoutMaximiseItem() {\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMCLLMI43432');\n        } else {\n            const configMaximisedItems = this._groundItem.getConfigMaximisedItems();\n\n            if (configMaximisedItems.length > 0) {\n                let item = configMaximisedItems[0];\n                if (ContentItem.isComponentItem(item)) {\n                    const stack = item.parent;\n                    if (stack === null) {\n                        throw new UnexpectedNullError('LMXLLMI69999');\n                    } else {\n                        item = stack;\n                    }\n                }\n                if (!ContentItem.isStack(item)) {\n                    throw new AssertError('LMCLLMI19993');\n                } else {\n                    item.maximise();\n                }\n            }\n        }\n    }\n\n    /** @internal */\n    private processMaximiseStack(stack: Stack): void {\n        this._maximisedStack = stack;\n        stack.on('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);\n        stack.element.classList.add(DomConstants.ClassName.Maximised);\n        stack.element.insertAdjacentElement('afterend', this._maximisePlaceholder);\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMMXI19993');\n        } else {\n            this._groundItem.element.prepend(stack.element);\n            const { width, height } = getElementWidthAndHeight(this._containerElement);\n            setElementWidth(stack.element, width);\n            setElementHeight(stack.element, height);\n            stack.updateSize(true);\n            stack.focusActiveContentItem();\n            this._maximisedStack.emit('maximised');\n            this.emit('stateChanged');\n        }\n    }\n\n    /** @internal */\n    private processMinimiseMaximisedStack(): void {\n        if (this._maximisedStack === undefined) {\n            throw new AssertError('LMMMS74422');\n        } else {\n            const stack = this._maximisedStack;\n            if (stack.parent === null) {\n                throw new UnexpectedNullError('LMMI13668');\n            } else {\n                stack.element.classList.remove(DomConstants.ClassName.Maximised);\n                this._maximisePlaceholder.insertAdjacentElement('afterend', stack.element);\n                this._maximisePlaceholder.remove();\n                this.updateRootSize(true);\n                this._maximisedStack = undefined;\n                stack.off('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);\n                stack.emit('minimised');\n                this.emit('stateChanged');\n            }\n        }\n    }\n\n    /**\n     * Iterates through the array of open popout windows and removes the ones\n     * that are effectively closed. This is necessary due to the lack of reliably\n     * listening for window.close / unload events in a cross browser compatible fashion.\n     * @internal\n     */\n    private reconcilePopoutWindows() {\n        const openPopouts: BrowserPopout[] = [];\n\n        for (let i = 0; i < this._openPopouts.length; i++) {\n            if (this._openPopouts[i].getWindow().closed === false) {\n                openPopouts.push(this._openPopouts[i]);\n            } else {\n                this.emit('windowClosed', this._openPopouts[i]);\n            }\n        }\n\n        if (this._openPopouts.length !== openPopouts.length) {\n            this._openPopouts = openPopouts;\n            this.emit('stateChanged');\n        }\n\n    }\n\n    /**\n     * Returns a flattened array of all content items,\n     * regardles of level or type\n     * @internal\n     */\n    private getAllContentItems() {\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMGACI13130');\n        } else {\n            return this._groundItem.getAllContentItems();\n        }\n    }\n\n    /**\n     * Creates Subwindows (if there are any). Throws an error\n     * if popouts are blocked.\n     * @internal\n     */\n    private createSubWindows() {\n        for (let i = 0; i < this.layoutConfig.openPopouts.length; i++) {\n            const popoutConfig = this.layoutConfig.openPopouts[i];\n            this.createPopoutFromPopoutLayoutConfig(popoutConfig);\n        }\n    }\n\n    /**\n     * Debounces resize events\n     * @internal\n     */\n    private handleContainerResize(): void {\n        if (this.resizeWithContainerAutomatically) {\n            this.processResizeWithDebounce();\n        }\n    }\n\n    /**\n     * Debounces resize events\n     * @internal\n     */\n    private processResizeWithDebounce(): void {\n        if (this.resizeDebounceExtendedWhenPossible) {\n            this.checkClearResizeTimeout();\n        }\n\n        if (this._resizeTimeoutId === undefined) {\n            this._resizeTimeoutId = setTimeout(\n                () => {\n                    this._resizeTimeoutId = undefined;\n                    this.beginSizeInvalidation();\n                    this.endSizeInvalidation();\n                },\n                this.resizeDebounceInterval,\n            );\n        }\n    }\n\n    private checkClearResizeTimeout() {\n        if (this._resizeTimeoutId !== undefined) {\n            clearTimeout(this._resizeTimeoutId);\n            this._resizeTimeoutId = undefined;\n        }\n    }\n\n    /**\n     * Determines what element the layout will be created in\n     * @internal\n     */\n    private setContainer() {\n        const bodyElement = document.body;\n        const containerElement = this._containerElement ?? bodyElement;\n\n        if (containerElement === bodyElement) {\n            this.resizeWithContainerAutomatically = true;\n\n            const documentElement = document.documentElement;\n            documentElement.style.height = '100%';\n            documentElement.style.margin = '0';\n            documentElement.style.padding = '0';\n            documentElement.style.overflow = 'clip';\n            bodyElement.style.height = '100%';\n            bodyElement.style.margin = '0';\n            bodyElement.style.padding = '0';\n            bodyElement.style.overflow = 'clip';\n        }\n\n        this._containerElement = containerElement;\n    }\n\n    /**\n     * Called when the window is closed or the user navigates away\n     * from the page\n     * @internal\n     * @deprecated to be removed in version 3\n     */\n    private onBeforeUnload(): void {\n        this.destroy();\n    }\n\n    /**\n     * Adjusts the number of columns to be lower to fit the screen and still maintain minItemWidth.\n     * @internal\n     */\n    private adjustColumnsResponsive() {\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMACR20883');\n        } else {\n            this._firstLoad = false;\n            // If there is no min width set, or not content items, do nothing.\n            if (this.useResponsiveLayout() &&\n                !this._updatingColumnsResponsive &&\n                this._groundItem.contentItems.length > 0 &&\n                this._groundItem.contentItems[0].isRow)\n            {\n                if (this._groundItem === undefined || this._width === null) {\n                    throw new UnexpectedUndefinedError('LMACR77412');\n                } else {\n                    // If there is only one column, do nothing.\n                    const columnCount = this._groundItem.contentItems[0].contentItems.length;\n                    if (columnCount <= 1) {\n                        return;\n                    } else {\n                        // If they all still fit, do nothing.\n                        const minItemWidth = this.layoutConfig.dimensions.defaultMinItemWidth;\n                        const totalMinWidth = columnCount * minItemWidth;\n                        if (totalMinWidth <= this._width) {\n                            return;\n                        } else {\n                            // Prevent updates while it is already happening.\n                            this._updatingColumnsResponsive = true;\n\n                            // Figure out how many columns to stack, and put them all in the first stack container.\n                            const finalColumnCount = Math.max(Math.floor(this._width / minItemWidth), 1);\n                            const stackColumnCount = columnCount - finalColumnCount;\n\n                            const rootContentItem = this._groundItem.contentItems[0];\n                            const allStacks = this.getAllStacks();\n                            if (allStacks.length === 0) {\n                                throw new AssertError('LMACRS77413')\n                            } else {\n                                const firstStackContainer = allStacks[0];\n                                for (let i = 0; i < stackColumnCount; i++) {\n                                    // Stack from right.\n                                    const column = rootContentItem.contentItems[rootContentItem.contentItems.length - 1];\n                                    this.addChildContentItemsToContainer(firstStackContainer, column);\n                                }\n\n                                this._updatingColumnsResponsive = false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Determines if responsive layout should be used.\n     *\n     * @returns True if responsive layout should be used; otherwise false.\n     * @internal\n     */\n    private useResponsiveLayout() {\n        const settings = this.layoutConfig.settings;\n        const alwaysResponsiveMode = settings.responsiveMode === ResponsiveMode.always;\n        const onLoadResponsiveModeAndFirst = settings.responsiveMode === ResponsiveMode.onload && this._firstLoad;\n        return alwaysResponsiveMode || onLoadResponsiveModeAndFirst;\n    }\n\n    /**\n     * Adds all children of a node to another container recursively.\n     * @param container - Container to add child content items to.\n     * @param node - Node to search for content items.\n     * @internal\n     */\n    private addChildContentItemsToContainer(container: ContentItem, node: ContentItem) {\n        const contentItems = node.contentItems;\n        if (node instanceof Stack) {\n            for (let i = 0; i < contentItems.length; i++) {\n                const item = contentItems[i];\n                node.removeChild(item, true);\n                container.addChild(item);\n            }\n        } else {\n            for (let i = 0; i < contentItems.length; i++) {\n                const item = contentItems[i];\n                this.addChildContentItemsToContainer(container, item);\n            }\n        }\n    }\n\n    /**\n     * Finds all the stacks.\n     * @returns The found stack containers.\n     * @internal\n     */\n    private getAllStacks() {\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMFASC52778');\n        } else {\n            const stacks: Stack[] = [];\n            this.findAllStacksRecursive(stacks, this._groundItem);\n\n            return stacks;\n        }\n    }\n\n    /** @internal */\n    private findFirstContentItemType(type: ItemType): ContentItem | undefined {\n        if (this._groundItem === undefined) {\n            throw new UnexpectedUndefinedError('LMFFCIT82446');\n        } else {\n            return this.findFirstContentItemTypeRecursive(type, this._groundItem);\n        }\n    }\n\n    /** @internal */\n    private findFirstContentItemTypeRecursive(type: ItemType, node: ContentItem): ContentItem | undefined {\n        const contentItems = node.contentItems;\n        const contentItemCount = contentItems.length;\n        if (contentItemCount === 0) {\n            return undefined;\n        } else {\n            for (let i = 0; i < contentItemCount; i++) {\n                const contentItem = contentItems[i];\n                if (contentItem.type === type) {\n                    return contentItem;\n                }\n            }\n\n            for (let i = 0; i < contentItemCount; i++) {\n                const contentItem = contentItems[i];\n                const foundContentItem = this.findFirstContentItemTypeRecursive(type, contentItem);\n                if (foundContentItem !== undefined) {\n                    return foundContentItem;\n                }\n            }\n\n            return undefined;\n        }\n    }\n\n    /** @internal */\n    private findFirstContentItemTypeByIdRecursive(type: ItemType, id: string, node: ContentItem): ContentItem | undefined {\n        const contentItems = node.contentItems;\n        const contentItemCount = contentItems.length;\n        if (contentItemCount === 0) {\n            return undefined;\n        } else {\n            for (let i = 0; i < contentItemCount; i++) {\n                const contentItem = contentItems[i];\n                if (contentItem.type === type && contentItem.id === id) {\n                    return contentItem;\n                }\n            }\n\n            for (let i = 0; i < contentItemCount; i++) {\n                const contentItem = contentItems[i];\n                const foundContentItem = this.findFirstContentItemTypeByIdRecursive(type, id, contentItem);\n                if (foundContentItem !== undefined) {\n                    return foundContentItem;\n                }\n            }\n\n            return undefined;\n        }\n    }\n\n    /**\n     * Finds all the stack containers.\n     *\n     * @param stacks - Set of containers to populate.\n     * @param node - Current node to process.\n     * @internal\n     */\n    private findAllStacksRecursive(stacks: Stack[], node: ContentItem) {\n        const contentItems = node.contentItems;\n        for (let i = 0; i < contentItems.length; i++) {\n            const item = contentItems[i];\n            if (item instanceof Stack) {\n                stacks.push(item);\n            } else {\n                if (!item.isComponent) {\n                    this.findAllStacksRecursive(stacks, item);\n                }\n            }\n        }\n    }\n\n    /** @internal */\n    private findFirstLocation(selectors: readonly LayoutManager.LocationSelector[]): LayoutManager.Location | undefined {\n        const count = selectors.length;\n        for (let i = 0; i < count; i++) {\n            const selector = selectors[i];\n            const location = this.findLocation(selector);\n            if (location !== undefined) {\n                return location;\n            }\n        }\n        return undefined;\n    }\n\n    /** @internal */\n    private findLocation(selector: LayoutManager.LocationSelector): LayoutManager.Location | undefined {\n        const selectorIndex = selector.index;\n        switch (selector.typeId) {\n            case LayoutManager.LocationSelector.TypeId.FocusedItem: {\n                if (this._focusedComponentItem === undefined) {\n                    return undefined\n                } else {\n                    const parentItem = this._focusedComponentItem.parentItem;\n                    const parentContentItems = parentItem.contentItems;\n                    const parentContentItemCount = parentContentItems.length;\n                    if (selectorIndex === undefined) {\n                        return { parentItem, index: parentContentItemCount };\n                    } else {\n                        const focusedIndex = parentContentItems.indexOf(this._focusedComponentItem);\n                        const index = focusedIndex + selectorIndex;\n                        if (index < 0 || index > parentContentItemCount) {\n                            return undefined;\n                        } else {\n                            return { parentItem, index };\n                        }\n                    }\n                }\n            }\n            case LayoutManager.LocationSelector.TypeId.FocusedStack: {\n                if (this._focusedComponentItem === undefined) {\n                    return undefined\n                } else {\n                    const parentItem = this._focusedComponentItem.parentItem;\n                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);\n                }\n            }\n            case LayoutManager.LocationSelector.TypeId.FirstStack: {\n                const parentItem = this.findFirstContentItemType(ItemType.stack);\n                if (parentItem === undefined) {\n                    return undefined;\n                } else {\n                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);\n                }\n            }\n            case LayoutManager.LocationSelector.TypeId.FirstRowOrColumn: {\n                let parentItem = this.findFirstContentItemType(ItemType.row);\n                if (parentItem !== undefined) {\n                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);\n                } else {\n                    parentItem = this.findFirstContentItemType(ItemType.column);\n                    if (parentItem !== undefined) {\n                        return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);\n                    } else {\n                        return undefined;\n                    }\n                }\n            }\n            case LayoutManager.LocationSelector.TypeId.FirstRow: {\n                const parentItem = this.findFirstContentItemType(ItemType.row);\n                if (parentItem === undefined) {\n                    return undefined;\n                } else {\n                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);\n                }\n            }\n            case LayoutManager.LocationSelector.TypeId.FirstColumn: {\n                const parentItem = this.findFirstContentItemType(ItemType.column);\n                if (parentItem === undefined) {\n                    return undefined;\n                } else {\n                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);\n                }\n            }\n            case LayoutManager.LocationSelector.TypeId.Empty: {\n                if (this._groundItem === undefined) {\n                    throw new UnexpectedUndefinedError('LMFLRIF18244');\n                } else {\n                    if (this.rootItem !== undefined) {\n                        return undefined;\n                    } else {\n                        if (selectorIndex === undefined || selectorIndex === 0)\n                            return { parentItem: this._groundItem, index: 0 };\n                        else {\n                            return undefined;\n                        }\n                    }\n                }\n            }\n            case LayoutManager.LocationSelector.TypeId.Root: {\n                if (this._groundItem === undefined) {\n                    throw new UnexpectedUndefinedError('LMFLF18244');\n                } else {\n                    const groundContentItems = this._groundItem.contentItems;\n                    if (groundContentItems.length === 0) {\n                        if (selectorIndex === undefined || selectorIndex === 0)\n                            return { parentItem: this._groundItem, index: 0 };\n                        else {\n                            return undefined;\n                        }\n                    } else {\n                        const parentItem = groundContentItems[0];\n                        return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);\n                    }\n                }\n            }\n        }\n    }\n\n    /** @internal */\n    private tryCreateLocationFromParentItem(parentItem: ContentItem,\n        selectorIndex: number | undefined\n    ): LayoutManager.Location | undefined {\n        const parentContentItems = parentItem.contentItems;\n        const parentContentItemCount = parentContentItems.length;\n        if (selectorIndex === undefined) {\n            return { parentItem, index: parentContentItemCount };\n        } else {\n            if (selectorIndex < 0 || selectorIndex > parentContentItemCount) {\n                return undefined;\n            } else {\n                return { parentItem, index: selectorIndex };\n            }\n        }\n    }\n}\n\n/** @public */\nexport namespace LayoutManager {\n    export type BeforeVirtualRectingEvent = (this: void, count: number) => void;\n    export type AfterVirtualRectingEvent = (this: void) => void;\n\n    /** @internal */\n    export interface ConstructorParameters {\n        constructorOrSubWindowLayoutConfig: LayoutConfig | undefined;\n        isSubWindow: boolean;\n        containerElement: HTMLElement | undefined;\n    }\n\n    /** @internal */\n    export function createMaximisePlaceElement(document: Document): HTMLElement {\n        const element = document.createElement('div');\n        element.classList.add(DomConstants.ClassName.MaximisePlace);\n        return element;\n    }\n\n    /** @internal */\n    export function createTabDropPlaceholderElement(document: Document): HTMLElement {\n        const element = document.createElement('div');\n        element.classList.add(DomConstants.ClassName.DropTabPlaceholder);\n        return element;\n    }\n\n    /**\n     * Specifies a location of a ContentItem without referencing the content item.\n     * Used to specify where a new item is to be added\n     * @public\n     */\n    export interface Location {\n        parentItem: ContentItem;\n        index: number;\n    }\n\n    /**\n     * A selector used to specify a unique location in the layout\n     * @public\n     */\n    export interface LocationSelector {\n        /** Specifies selector algorithm */\n        typeId: LocationSelector.TypeId;\n        /** Used by algorithm to determine index in found ContentItem */\n        index?: number;\n    }\n\n    /** @public */\n    export namespace LocationSelector {\n        export const enum TypeId {\n            /** Stack with focused Item. Index specifies offset from index of focused item (eg 1 is the position after focused item) */\n            FocusedItem,\n            /** Stack with focused Item. Index specfies ContentItems index */\n            FocusedStack,\n            /** First stack found in layout */\n            FirstStack,\n            /** First Row or Column found in layout (rows are searched first) */\n            FirstRowOrColumn,\n            /** First Row in layout */\n            FirstRow,\n            /** First Column in layout */\n            FirstColumn,\n            /** Finds a location if layout is empty. The found location will be the root ContentItem. */\n            Empty,\n            /** Finds root if layout is empty, otherwise a child under root */\n            Root,\n        }\n    }\n\n    /**\n     * Default LocationSelectors array used if none is specified.  Will always find a location.\n     * @public\n     */\n    export const defaultLocationSelectors: readonly LocationSelector[] = [\n        { typeId: LocationSelector.TypeId.FocusedStack, index: undefined },\n        { typeId: LocationSelector.TypeId.FirstStack, index: undefined },\n        { typeId: LocationSelector.TypeId.FirstRowOrColumn, index: undefined },\n        { typeId: LocationSelector.TypeId.Root, index: undefined },\n    ];\n\n    /**\n     * LocationSelectors to try to get location next to existing focused item\n     * @public\n     */\n    export const afterFocusedItemIfPossibleLocationSelectors: readonly LocationSelector[] = [\n        { typeId: LocationSelector.TypeId.FocusedItem, index: 1 },\n        { typeId: LocationSelector.TypeId.FirstStack, index: undefined },\n        { typeId: LocationSelector.TypeId.FirstRowOrColumn, index: undefined },\n        { typeId: LocationSelector.TypeId.Root, index: undefined },\n    ];\n}\n","import { LayoutConfig } from './config/config';\nimport { ResolvedComponentItemConfig, ResolvedLayoutConfig, ResolvedPopoutLayoutConfig } from './config/resolved-config';\nimport { ComponentContainer } from './container/component-container';\nimport { BindError } from './errors/external-error';\nimport { UnexpectedUndefinedError } from './errors/internal-error';\nimport { LayoutManager } from './layout-manager';\nimport { DomConstants } from './utils/dom-constants';\nimport { I18nStringId, i18nStrings } from './utils/i18n-strings';\n\n/** @public */\nexport class VirtualLayout extends LayoutManager {\n    /**\n     * @deprecated Use {@link (VirtualLayout:class).bindComponentEvent} and\n     * {@link (VirtualLayout:class).unbindComponentEvent} with virtual components\n     */\n    getComponentEvent: VirtualLayout.GetComponentEventHandler | undefined;\n    /**\n     * @deprecated Use {@link (VirtualLayout:class).bindComponentEvent} and\n     * {@link (VirtualLayout:class).unbindComponentEvent} with virtual components\n     */\n    releaseComponentEvent: VirtualLayout.ReleaseComponentEventHandler | undefined;\n\n    bindComponentEvent: VirtualLayout.BindComponentEventHandler | undefined;\n    unbindComponentEvent: VirtualLayout.UnbindComponentEventHandler | undefined;\n\n    /** @internal @deprecated use while constructor is not determinate */\n    private _bindComponentEventHanlderPassedInConstructor = false; // remove when constructor is determinate\n    /** @internal  @deprecated use while constructor is not determinate */\n    private _creationTimeoutPassed = false; // remove when constructor is determinate\n\n    /**\n     * @param container - A Dom HTML element. Defaults to body\n     * @param bindComponentEventHandler - Event handler to bind components\n     * @param bindComponentEventHandler - Event handler to unbind components\n     * If bindComponentEventHandler is defined, then constructor will be determinate. It will always call the init()\n     * function and the init() function will always complete. This means that the bindComponentEventHandler will be called\n     * if constructor is for a popout window. Make sure bindComponentEventHandler is ready for events.\n     */\n    constructor(\n        container?: HTMLElement,\n        bindComponentEventHandler?: VirtualLayout.BindComponentEventHandler,\n        unbindComponentEventHandler?: VirtualLayout.UnbindComponentEventHandler,\n    );\n    /** @deprecated specify layoutConfig in {@link (LayoutManager:class).loadLayout} */\n    constructor(config: LayoutConfig, container?: HTMLElement);\n    /** @internal */\n    constructor(configOrOptionalContainer: LayoutConfig | HTMLElement | undefined,\n        containerOrBindComponentEventHandler: HTMLElement | VirtualLayout.BindComponentEventHandler | undefined,\n        unbindComponentEventHandler: VirtualLayout.UnbindComponentEventHandler | undefined,\n        skipInit: true,\n    );\n    /** @internal */\n    constructor(configOrOptionalContainer: LayoutConfig | HTMLElement | undefined,\n        containerOrBindComponentEventHandler?: HTMLElement | VirtualLayout.BindComponentEventHandler,\n        unbindComponentEventHandler?: VirtualLayout.UnbindComponentEventHandler,\n        skipInit?: true,\n    ) {\n        super(VirtualLayout.createLayoutManagerConstructorParameters(configOrOptionalContainer, containerOrBindComponentEventHandler));\n\n        if (containerOrBindComponentEventHandler !== undefined) {\n            if (typeof containerOrBindComponentEventHandler === 'function') {\n                this.bindComponentEvent = containerOrBindComponentEventHandler;\n                this._bindComponentEventHanlderPassedInConstructor = true;\n\n                if (unbindComponentEventHandler !== undefined) {\n                    this.unbindComponentEvent = unbindComponentEventHandler;\n                }\n            }\n        }\n\n        if (!this._bindComponentEventHanlderPassedInConstructor) {\n            // backward compatibility\n\n            if (this.isSubWindow) {\n                // document.body.style.visibility = 'hidden';\n                // Set up layoutConfig since constructor is not determinate and may exit early. Other functions may need\n                // this.layoutConfig. this.layoutConfig is again calculated in the same way when init() completes.\n                // Remove this when constructor is determinate.\n                if (this._constructorOrSubWindowLayoutConfig === undefined) {\n                    throw new UnexpectedUndefinedError('VLC98823');\n                } else {\n                    const resolvedLayoutConfig = LayoutConfig.resolve(this._constructorOrSubWindowLayoutConfig);\n                    // remove root from layoutConfig\n                    this.layoutConfig = {\n                        ...resolvedLayoutConfig,\n                        root: undefined,\n                    }\n                }\n            }\n        }\n\n        if (skipInit !== true) {\n            if (!this.deprecatedConstructor) {\n                this.init();\n            }\n        }\n    }\n\n    override destroy(): void {\n        this.bindComponentEvent = undefined;\n        this.unbindComponentEvent = undefined;\n\n        super.destroy();\n    }\n\n\n    /**\n     * Creates the actual layout. Must be called after all initial components\n     * are registered. Recurses through the configuration and sets up\n     * the item tree.\n     *\n     * If called before the document is ready it adds itself as a listener\n     * to the document.ready event\n     * @deprecated LayoutConfig should not be loaded in {@link (LayoutManager:class)} constructor, but rather in a\n     * {@link (LayoutManager:class).loadLayout} call.  If LayoutConfig is not specified in {@link (LayoutManager:class)} constructor,\n     * then init() will be automatically called internally and should not be called externally.\n     */\n    override init(): void {\n\n        /**\n         * If the document isn't ready yet, wait for it.\n         */\n        if (!this._bindComponentEventHanlderPassedInConstructor && (document.readyState === 'loading' || document.body === null)) {\n            document.addEventListener('DOMContentLoaded', () => this.init(), { passive: true });\n            return;\n        }\n\n        /**\n         * If this is a subwindow, wait a few milliseconds for the original\n         * page's js calls to be executed, then replace the bodies content\n         * with GoldenLayout\n         */\n        if (!this._bindComponentEventHanlderPassedInConstructor && this.isSubWindow === true && !this._creationTimeoutPassed) {\n            setTimeout(() => this.init(), 7);\n            this._creationTimeoutPassed = true;\n            return;\n        }\n\n        if (this.isSubWindow === true) {\n            if (!this._bindComponentEventHanlderPassedInConstructor) {\n                this.clearHtmlAndAdjustStylesForSubWindow();\n            }\n\n            // Expose this instance on the window object to allow the opening window to interact with it\n            window.__glInstance = this;\n        }\n\n        super.init();\n    }\n\n    /**\n     * Clears existing HTML and adjusts style to make window suitable to be a popout sub window\n     * Curently is automatically called when window is a subWindow and bindComponentEvent is not passed in the constructor\n     * If bindComponentEvent is not passed in the constructor, the application must either call this function explicitly or\n     * (preferably) make the window suitable as a subwindow.\n     * In the future, it is planned that this function is NOT automatically called in any circumstances.  Applications will\n     * need to determine whether a window is a Golden Layout popout window and either call this function explicitly or\n     * hide HTML not relevant to the popout.\n     * See apitest for an example of how HTML is hidden when popout windows are displayed\n     */\n    clearHtmlAndAdjustStylesForSubWindow(): void {\n        const headElement = document.head;\n\n        const appendNodeLists = new Array<NodeListOf<Element>>(4);\n        appendNodeLists[0] = document.querySelectorAll('body link');\n        appendNodeLists[1] = document.querySelectorAll('body style');\n        appendNodeLists[2] = document.querySelectorAll('template');\n        appendNodeLists[3] = document.querySelectorAll('.gl_keep');\n\n        for (let listIdx = 0; listIdx < appendNodeLists.length; listIdx++) {\n            const appendNodeList = appendNodeLists[listIdx];\n            for (let nodeIdx = 0; nodeIdx < appendNodeList.length; nodeIdx++) {\n                const node = appendNodeList[nodeIdx];\n                headElement.appendChild(node);\n            }\n        }\n\n        const bodyElement = document.body;\n        bodyElement.innerHTML = '';\n        bodyElement.style.visibility = 'visible';\n        this.checkAddDefaultPopinButton();\n\n        /*\n        * This seems a bit pointless, but actually causes a reflow/re-evaluation getting around\n        * slickgrid's \"Cannot find stylesheet.\" bug in chrome\n        */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const x = document.body.offsetHeight;\n    }\n    /**\n     * Will add button if not popinOnClose specified in settings\n     * @returns true if added otherwise false\n     */\n    checkAddDefaultPopinButton(): boolean {\n        if (this.layoutConfig.settings.popInOnClose) {\n            return false;\n        } else {\n            const popInButtonElement = document.createElement('div');\n            popInButtonElement.classList.add(DomConstants.ClassName.Popin);\n            popInButtonElement.setAttribute('title', this.layoutConfig.header.dock);\n            const iconElement = document.createElement('div');\n            iconElement.classList.add(DomConstants.ClassName.Icon);\n            const bgElement = document.createElement('div');\n            bgElement.classList.add(DomConstants.ClassName.Bg);\n            popInButtonElement.appendChild(iconElement);\n            popInButtonElement.appendChild(bgElement);\n            popInButtonElement.addEventListener('click', () => this.emit('popIn'));\n            document.body.appendChild(popInButtonElement);\n            return true;\n        }\n    }\n\n    /** @internal */\n    override bindComponent(container: ComponentContainer, itemConfig: ResolvedComponentItemConfig): ComponentContainer.BindableComponent {\n        if (this.bindComponentEvent !== undefined) {\n            const bindableComponent = this.bindComponentEvent(container, itemConfig);\n            return bindableComponent;\n        } else {\n            if (this.getComponentEvent !== undefined) {\n                return {\n                    virtual: false,\n                    component: this.getComponentEvent(container, itemConfig),\n                }\n            } else {\n                // There is no component registered for this type, and we don't have a getComponentEvent defined.\n                // This might happen when the user pops out a dialog and the component types are not registered upfront.\n                const text = i18nStrings[I18nStringId.ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned];\n                const message = `${text}: ${JSON.stringify(itemConfig)}`\n                throw new BindError(message);\n            }\n        }\n    }\n\n    /** @internal */\n    override unbindComponent(container: ComponentContainer, virtual: boolean, component: ComponentContainer.Component | undefined): void {\n        if (this.unbindComponentEvent !== undefined) {\n            this.unbindComponentEvent(container);\n        } else {\n            if (!virtual && this.releaseComponentEvent !== undefined) {\n                if (component === undefined) {\n                    throw new UnexpectedUndefinedError('VCUCRCU333998');\n                } else {\n                    this.releaseComponentEvent(container, component);\n                }\n            }\n        }\n    }\n}\n\n/** @public */\nexport namespace VirtualLayout {\n    /**\n     * @deprecated Use virtual components with {@link (VirtualLayout:class).bindComponentEvent} and\n     * {@link (VirtualLayout:class).unbindComponentEvent} events.\n     */\n    export type GetComponentEventHandler =\n        (this: void, container: ComponentContainer, itemConfig: ResolvedComponentItemConfig) => ComponentContainer.Component;\n    /**\n     * @deprecated Use virtual components with {@link (VirtualLayout:class).bindComponentEvent} and\n     * {@link (VirtualLayout:class).unbindComponentEvent} events.\n     */\n    export type ReleaseComponentEventHandler =\n        (this: void, container: ComponentContainer, component: ComponentContainer.Component) => void;\n\n    export type BindComponentEventHandler =\n        (this: void, container: ComponentContainer, itemConfig: ResolvedComponentItemConfig) => ComponentContainer.BindableComponent;\n    export type UnbindComponentEventHandler =\n        (this: void, container: ComponentContainer) => void;\n\n    export type BeforeVirtualRectingEvent = (this: void) => void;\n\n    /** @internal\n     * Veriable to hold the state whether we already checked if we are running in a sub window.\n     * Fixes popout and creation of nested golden-layouts.\n     */\n    let subWindowChecked = false;\n\n    /** @internal */\n    export function createLayoutManagerConstructorParameters(configOrOptionalContainer: LayoutConfig | HTMLElement | undefined,\n        containerOrBindComponentEventHandler?: HTMLElement |  VirtualLayout.BindComponentEventHandler):\n        LayoutManager.ConstructorParameters\n    {\n        const windowConfigKey = subWindowChecked ? null : new URL(document.location.href).searchParams.get('gl-window');\n        subWindowChecked = true;\n        const isSubWindow = windowConfigKey !== null;\n\n        let containerElement: HTMLElement | undefined;\n        let config: LayoutConfig | undefined;\n        if (windowConfigKey !== null) {\n            const windowConfigStr = localStorage.getItem(windowConfigKey);\n            if (windowConfigStr === null) {\n                throw new Error('Null gl-window Config');\n            }\n            localStorage.removeItem(windowConfigKey);\n            const minifiedWindowConfig = JSON.parse(windowConfigStr) as ResolvedPopoutLayoutConfig;\n            const resolvedConfig = ResolvedLayoutConfig.unminifyConfig(minifiedWindowConfig);\n            config = LayoutConfig.fromResolved(resolvedConfig)\n\n            if (configOrOptionalContainer instanceof HTMLElement) {\n                containerElement = configOrOptionalContainer;\n            }\n        } else {\n            if (configOrOptionalContainer === undefined) {\n                config = undefined;\n            } else {\n                if (configOrOptionalContainer instanceof HTMLElement) {\n                    config = undefined;\n                    containerElement = configOrOptionalContainer;\n                } else {\n                    // backwards compatibility\n                    config = configOrOptionalContainer;\n                }\n            }\n\n            if (containerElement === undefined) {\n                if (containerOrBindComponentEventHandler instanceof HTMLElement) {\n                    containerElement = containerOrBindComponentEventHandler;\n                }\n            }\n        }\n\n        return {\n            constructorOrSubWindowLayoutConfig: config,\n            isSubWindow,\n            containerElement,\n        };\n    }\n}\n","/* eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }] */\n/* eslint no-param-reassign: [\"error\",\n{ \"props\": true, \"ignorePropertyModificationsFor\": [\"container\"] }] */\nimport { GoldenLayout } from 'golden-layout';\n\nconst config = {\n  settings: {\n    showPopoutIcon: false,\n    showCloseIcon: false,\n  },\n  dimensions: {\n    minItemHeight: 40,\n  },\n  content: [{\n    type: 'row',\n    content: [{\n      type: 'column',\n      width: 40,\n      content: [{\n        type: 'component',\n        isClosable: false,\n        componentName: 'template',\n        title: 'Game',\n        componentState: { id: 'client_wrapper' },\n      }],\n    },\n    {\n      type: 'column',\n      content: [{\n        type: 'row',\n        height: 65,\n        content: [{\n          type: 'stack',\n          content: [{\n            type: 'component',\n            isClosable: false,\n            title: 'Main',\n            componentName: 'template',\n            componentState: { id: 'mainmenu' },\n          },\n          {\n            type: 'component',\n            isClosable: false,\n            title: 'Log',\n            componentName: 'template',\n            componentState: { id: 'log' },\n          }],\n        },\n        {\n          type: 'component',\n          title: 'Music',\n          width: 30,\n          componentName: 'template',\n          componentState: { id: 'music' },\n        }],\n      },\n      {\n        type: 'row',\n        content: [{\n          type: 'component',\n          title: 'Server chat',\n          componentName: 'template',\n          componentState: { id: 'ooc' },\n        }],\n      }],\n    }],\n  }],\n};\n\nconst golden = new GoldenLayout();\ngolden.registerComponentFactoryFunction('template', (container, componentState) => {\n  const template = document.querySelector(`#${componentState.id}`);\n  container.element.innerHTML = template.innerHTML;\n});\ngolden.loadLayout(config);\n","import { LayoutConfig } from './config/config';\nimport { ResolvedComponentItemConfig } from './config/resolved-config';\nimport { ComponentContainer } from './container/component-container';\nimport { ApiError, BindError } from './errors/external-error';\nimport { AssertError, UnexpectedUndefinedError } from './errors/internal-error';\nimport { I18nStringId, i18nStrings } from './utils/i18n-strings';\nimport { JsonValue, LogicalZIndex } from './utils/types';\nimport { deepExtendValue, ensureElementPositionAbsolute, numberToPixels, setElementDisplayVisibility, setElementHeight, setElementWidth } from './utils/utils';\nimport { VirtualLayout } from './virtual-layout';\n\n/** @public */\nexport class GoldenLayout extends VirtualLayout {\n    /** @internal */\n    private _componentTypesMap = new Map<string, GoldenLayout.ComponentInstantiator>();\n    /** @internal */\n    private _getComponentConstructorFtn: GoldenLayout.GetComponentConstructorCallback;\n\n    /** @internal */\n    private _registeredComponentMap = new Map<ComponentContainer, ComponentContainer.Component>();\n    /** @internal */\n    private _virtuableComponentMap = new Map<ComponentContainer, GoldenLayout.VirtuableComponent>();\n    /** @internal */\n    private _goldenLayoutBoundingClientRect: DOMRect;\n\n    /** @internal */\n    private _containerVirtualRectingRequiredEventListener =\n        (container: ComponentContainer, width: number, height: number) => this.handleContainerVirtualRectingRequiredEvent(container, width, height);\n    /** @internal */\n    private _containerVirtualVisibilityChangeRequiredEventListener =\n        (container: ComponentContainer, visible: boolean) => this.handleContainerVirtualVisibilityChangeRequiredEvent(container, visible);\n    /** @internal */\n    private _containerVirtualZIndexChangeRequiredEventListener =\n        (container: ComponentContainer, logicalZIndex: LogicalZIndex, defaultZIndex: string) =>\n            this.handleContainerVirtualZIndexChangeRequiredEvent(container, logicalZIndex, defaultZIndex);\n\n    /**\n     * @param container - A Dom HTML element. Defaults to body\n     * @param bindComponentEventHandler - Event handler to bind components\n     * @param bindComponentEventHandler - Event handler to unbind components\n     * If bindComponentEventHandler is defined, then constructor will be determinate. It will always call the init()\n     * function and the init() function will always complete. This means that the bindComponentEventHandler will be called\n     * if constructor is for a popout window. Make sure bindComponentEventHandler is ready for events.\n     */\n    constructor(\n        container?: HTMLElement,\n        bindComponentEventHandler?: VirtualLayout.BindComponentEventHandler,\n        unbindComponentEventHandler?: VirtualLayout.UnbindComponentEventHandler,\n    );\n    /** @deprecated specify layoutConfig in {@link (LayoutManager:class).loadLayout} */\n    constructor(config: LayoutConfig, container?: HTMLElement);\n    /** @internal */\n    constructor(configOrOptionalContainer: LayoutConfig | HTMLElement | undefined,\n        containerOrBindComponentEventHandler?: HTMLElement | VirtualLayout.BindComponentEventHandler,\n        unbindComponentEventHandler?: VirtualLayout.UnbindComponentEventHandler,\n    ) {\n        super(configOrOptionalContainer, containerOrBindComponentEventHandler, unbindComponentEventHandler, true);\n        // we told VirtualLayout to not call init() (skipInit set to true) so that Golden Layout can initialise its properties before init is called\n        if (!this.deprecatedConstructor) {\n            this.init();\n        }\n    }\n\n    /**\n     * Register a new component type with the layout manager.\n     *\n     * @deprecated See {@link https://stackoverflow.com/questions/40922531/how-to-check-if-a-javascript-function-is-a-constructor}\n     * instead use {@link (GoldenLayout:class).registerComponentConstructor}\n     * or {@link (GoldenLayout:class).registerComponentFactoryFunction}\n     */\n    registerComponent(name: string,\n        componentConstructorOrFactoryFtn: GoldenLayout.ComponentConstructor | GoldenLayout.ComponentFactoryFunction,\n        virtual = false\n    ): void {\n        if (typeof componentConstructorOrFactoryFtn !== 'function') {\n            throw new ApiError('registerComponent() componentConstructorOrFactoryFtn parameter is not a function')\n        } else {\n            if (componentConstructorOrFactoryFtn.hasOwnProperty('prototype')) {\n                const componentConstructor = componentConstructorOrFactoryFtn as GoldenLayout.ComponentConstructor;\n                this.registerComponentConstructor(name, componentConstructor, virtual);\n            } else {\n                const componentFactoryFtn = componentConstructorOrFactoryFtn as GoldenLayout.ComponentFactoryFunction;\n                this.registerComponentFactoryFunction(name, componentFactoryFtn, virtual);\n            }\n        }\n    }\n\n    /**\n     * Register a new component type with the layout manager.\n     */\n    registerComponentConstructor(typeName: string, componentConstructor: GoldenLayout.ComponentConstructor, virtual = false): void {\n        if (typeof componentConstructor !== 'function') {\n            throw new Error(i18nStrings[I18nStringId.PleaseRegisterAConstructorFunction]);\n        }\n\n        const existingComponentType = this._componentTypesMap.get(typeName);\n\n        if (existingComponentType !== undefined) {\n            throw new BindError(`${i18nStrings[I18nStringId.ComponentIsAlreadyRegistered]}: ${typeName}`);\n        }\n\n        this._componentTypesMap.set(typeName, {\n                constructor: componentConstructor,\n                factoryFunction: undefined,\n                virtual,\n            }\n        );\n    }\n\n    /**\n     * Register a new component with the layout manager.\n     */\n    registerComponentFactoryFunction(typeName: string, componentFactoryFunction: GoldenLayout.ComponentFactoryFunction, virtual = false): void {\n        if (typeof componentFactoryFunction !== 'function') {\n            throw new BindError('Please register a constructor function');\n        }\n\n        const existingComponentType = this._componentTypesMap.get(typeName);\n\n        if (existingComponentType !== undefined) {\n            throw new BindError(`${i18nStrings[I18nStringId.ComponentIsAlreadyRegistered]}: ${typeName}`);\n        }\n\n        this._componentTypesMap.set(typeName, {\n                constructor: undefined,\n                factoryFunction: componentFactoryFunction,\n                virtual,\n            }\n        );\n    }\n\n    /**\n     * Register a component function with the layout manager. This function should\n     * return a constructor for a component based on a config.\n     * This function will be called if a component type with the required name is not already registered.\n     * It is recommended that applications use the {@link (VirtualLayout:class).getComponentEvent} and\n     * {@link (VirtualLayout:class).releaseComponentEvent} instead of registering a constructor callback\n     * @deprecated use {@link (GoldenLayout:class).registerGetComponentConstructorCallback}\n     */\n    registerComponentFunction(callback: GoldenLayout.GetComponentConstructorCallback): void {\n        this.registerGetComponentConstructorCallback(callback);\n    }\n\n    /**\n     * Register a callback closure with the layout manager which supplies a Component Constructor.\n     * This callback should return a constructor for a component based on a config.\n     * This function will be called if a component type with the required name is not already registered.\n     * It is recommended that applications use the {@link (VirtualLayout:class).getComponentEvent} and\n     * {@link (VirtualLayout:class).releaseComponentEvent} instead of registering a constructor callback\n     */\n    registerGetComponentConstructorCallback(callback: GoldenLayout.GetComponentConstructorCallback): void {\n        if (typeof callback !== 'function') {\n            throw new Error('Please register a callback function');\n        }\n\n        if (this._getComponentConstructorFtn !== undefined) {\n            console.warn('Multiple component functions are being registered.  Only the final registered function will be used.')\n        }\n\n        this._getComponentConstructorFtn = callback;\n    }\n\n    getRegisteredComponentTypeNames(): string[] {\n        const typeNamesIterableIterator = this._componentTypesMap.keys();\n        return Array.from(typeNamesIterableIterator);\n    }\n\n    /**\n     * Returns a previously registered component instantiator.  Attempts to utilize registered\n     * component type by first, then falls back to the component constructor callback function (if registered).\n     * If neither gets an instantiator, then returns `undefined`.\n     * Note that `undefined` will return if config.componentType is not a string\n     *\n     * @param config - The item config\n     * @public\n     */\n    getComponentInstantiator(config: ResolvedComponentItemConfig): GoldenLayout.ComponentInstantiator | undefined {\n        let instantiator: GoldenLayout.ComponentInstantiator | undefined;\n\n        const typeName = ResolvedComponentItemConfig.resolveComponentTypeName(config)\n        if (typeName !== undefined) {\n            instantiator = this._componentTypesMap.get(typeName);\n        }\n        if (instantiator === undefined) {\n            if (this._getComponentConstructorFtn !== undefined) {\n                instantiator = {\n                    constructor: this._getComponentConstructorFtn(config),\n                    factoryFunction: undefined,\n                    virtual: false,\n                }\n            }\n        }\n\n        return instantiator;\n    }\n\n    /** @internal */\n    override bindComponent(container: ComponentContainer, itemConfig: ResolvedComponentItemConfig): ComponentContainer.BindableComponent {\n        let instantiator: GoldenLayout.ComponentInstantiator | undefined;\n\n        const typeName = ResolvedComponentItemConfig.resolveComponentTypeName(itemConfig);\n        if (typeName !== undefined) {\n            instantiator = this._componentTypesMap.get(typeName);\n        }\n        if (instantiator === undefined) {\n            if (this._getComponentConstructorFtn !== undefined) {\n                instantiator = {\n                    constructor: this._getComponentConstructorFtn(itemConfig),\n                    factoryFunction: undefined,\n                    virtual: false,\n                }\n            }\n        }\n\n        let result: ComponentContainer.BindableComponent;\n        if (instantiator !== undefined) {\n            const virtual = instantiator.virtual;\n            // handle case where component is obtained by name or component constructor callback\n            let componentState: JsonValue | undefined;\n            if (itemConfig.componentState === undefined) {\n                componentState = undefined;\n            } else {\n                // make copy\n                componentState = deepExtendValue({}, itemConfig.componentState) as JsonValue;\n            }\n\n            let component: ComponentContainer.Component | undefined;\n            const componentConstructor = instantiator.constructor;\n            if (componentConstructor !== undefined) {\n                component = new componentConstructor(container, componentState, virtual);\n            } else {\n                const factoryFunction = instantiator.factoryFunction;\n                if (factoryFunction !== undefined) {\n                    component = factoryFunction(container, componentState, virtual);\n                } else {\n                    throw new AssertError('LMBCFFU10008');\n                }\n            }\n\n            if (virtual) {\n                if (component === undefined) {\n                    throw new UnexpectedUndefinedError('GLBCVCU988774');\n                } else {\n                    const virtuableComponent = component as GoldenLayout.VirtuableComponent;\n                    const componentRootElement = virtuableComponent.rootHtmlElement;\n                    if (componentRootElement === undefined) {\n                        throw new BindError(`${i18nStrings[I18nStringId.VirtualComponentDoesNotHaveRootHtmlElement]}: ${typeName}`);\n                    } else {\n                        ensureElementPositionAbsolute(componentRootElement);\n                        this.container.appendChild(componentRootElement);\n                        this._virtuableComponentMap.set(container, virtuableComponent);\n                        container.virtualRectingRequiredEvent = this._containerVirtualRectingRequiredEventListener;\n                        container.virtualVisibilityChangeRequiredEvent = this._containerVirtualVisibilityChangeRequiredEventListener;\n                        container.virtualZIndexChangeRequiredEvent = this._containerVirtualZIndexChangeRequiredEventListener;\n                    }\n                }\n            }\n\n            this._registeredComponentMap.set(container, component);\n\n            result = {\n                virtual: instantiator.virtual,\n                component,\n            };\n\n        } else {\n            // Use getComponentEvent\n            result = super.bindComponent(container, itemConfig);\n        }\n\n        return result;\n    }\n\n    /** @internal */\n    override unbindComponent(container: ComponentContainer, virtual: boolean, component: ComponentContainer.Component | undefined): void {\n        const registeredComponent = this._registeredComponentMap.get(container);\n        if (registeredComponent === undefined) {\n            super.unbindComponent(container, virtual, component); // was not created from registration so use virtual unbind events\n        } else {\n            const virtuableComponent = this._virtuableComponentMap.get(container);\n            if (virtuableComponent !== undefined) {\n                const componentRootElement = virtuableComponent.rootHtmlElement;\n                if (componentRootElement === undefined) {\n                    throw new AssertError('GLUC77743', container.title);\n                } else {\n                    this.container.removeChild(componentRootElement);\n                    this._virtuableComponentMap.delete(container);\n                }\n            }\n        }\n    }\n\n    override fireBeforeVirtualRectingEvent(count: number): void {\n        this._goldenLayoutBoundingClientRect = this.container.getBoundingClientRect();\n        super.fireBeforeVirtualRectingEvent(count);\n    }\n\n\n    /** @internal */\n    private handleContainerVirtualRectingRequiredEvent(container: ComponentContainer, width: number, height: number): void {\n        const virtuableComponent = this._virtuableComponentMap.get(container);\n        if (virtuableComponent === undefined) {\n            throw new UnexpectedUndefinedError('GLHCSCE55933');\n        } else {\n            const rootElement = virtuableComponent.rootHtmlElement;\n            if (rootElement === undefined) {\n                throw new BindError(i18nStrings[I18nStringId.ComponentIsNotVirtuable] + ' ' + container.title);\n            } else {\n                const containerBoundingClientRect = container.element.getBoundingClientRect();\n                const left = containerBoundingClientRect.left - this._goldenLayoutBoundingClientRect.left;\n                rootElement.style.left = numberToPixels(left);\n                const top = containerBoundingClientRect.top - this._goldenLayoutBoundingClientRect.top;\n                rootElement.style.top = numberToPixels(top);\n                setElementWidth(rootElement, width);\n                setElementHeight(rootElement, height);\n            }\n        }\n    }\n\n    /** @internal */\n    private handleContainerVirtualVisibilityChangeRequiredEvent(container: ComponentContainer, visible: boolean): void {\n        const virtuableComponent = this._virtuableComponentMap.get(container);\n        if (virtuableComponent === undefined) {\n            throw new UnexpectedUndefinedError('GLHCVVCRE55934');\n        } else {\n            const rootElement = virtuableComponent.rootHtmlElement;\n            if (rootElement === undefined) {\n                throw new BindError(i18nStrings[I18nStringId.ComponentIsNotVirtuable] + ' ' + container.title);\n            } else {\n                setElementDisplayVisibility(rootElement, visible);\n            }\n        }\n    }\n\n    /** @internal */\n    private handleContainerVirtualZIndexChangeRequiredEvent(container: ComponentContainer, logicalZIndex: LogicalZIndex, defaultZIndex: string) {\n        const virtuableComponent = this._virtuableComponentMap.get(container);\n        if (virtuableComponent === undefined) {\n            throw new UnexpectedUndefinedError('GLHCVZICRE55935');\n        } else {\n            const rootElement = virtuableComponent.rootHtmlElement;\n            if (rootElement === undefined) {\n                throw new BindError(i18nStrings[I18nStringId.ComponentIsNotVirtuable] + ' ' + container.title);\n            } else {\n                rootElement.style.zIndex = defaultZIndex;\n            }\n        }\n    }\n}\n\n/** @public */\nexport namespace GoldenLayout {\n    export interface VirtuableComponent {\n        rootHtmlElement: HTMLElement;\n    }\n\n    export type ComponentConstructor = new(container: ComponentContainer, state: JsonValue | undefined, virtual: boolean) => ComponentContainer.Component;\n    export type ComponentFactoryFunction = (container: ComponentContainer, state: JsonValue | undefined, virtual: boolean) => ComponentContainer.Component | undefined;\n    export type GetComponentConstructorCallback = (this: void, config: ResolvedComponentItemConfig) => ComponentConstructor;\n\n    export interface ComponentInstantiator {\n        constructor: ComponentConstructor | undefined;\n        factoryFunction: ComponentFactoryFunction | undefined;\n        virtual: boolean;\n    }\n}\n"],"names":["InternalError","Error","constructor","type","code","message","super","undefined","AssertError","UnreachableCaseError","variableValue","UnexpectedNullError","UnexpectedUndefinedError","ConfigMinifier","StyleConstants","WidthOrHeightPropertyName","Side","LogicalZIndex","keys","values","translateObject","from","minify","to","key","hasOwnProperty","translatedKey","minifyKey","unminifyKey","fromValue","translateValue","Array","isArray","length","i","translateArray","value","index","indexOfValue","toString","minifyValue","parseInt","substr","indexOfKey","checkInitialise","defaultComponentBaseZIndex","defaultComponentDragZIndex","defaultComponentStackMaximisedZIndex","width","height","top","left","right","bottom","base","drag","stackMaximised","LogicalZIndexToDefaultMap","JsonValue","ItemType","ResponsiveMode","SizeUnitEnum","ResolvedItemConfig","ResolvedHeaderedItemConfig","ResolvedStackItemConfig","ResolvedComponentItemConfig","ResolvedRowOrColumnItemConfig","ResolvedRootItemConfig","ResolvedGroundItemConfig","ResolvedLayoutConfig","ResolvedPopoutLayoutConfig","I18nStrings","numberToPixels","pixelsToNumber","numberStr","replace","parseFloat","isDigit","char","setElementWidth","element","widthAsPixels","style","setElementHeight","heightAsPixels","getElementWidthAndHeight","offsetWidth","offsetHeight","setElementDisplayVisibility","visible","display","deepExtend","target","obj","existingTarget","deepExtendValue","targetArray","valueObj","getUniqueId","Math","random","isJsonObject","isJson","ground","row","column","stack","component","none","always","onload","tryParse","Pixel","Percent","Fractional","Em","format","defaults","content","size","sizeUnit","minSize","minSizeUnit","id","isClosable","createCopy","original","createDefault","isComponentItem","itemConfig","isStackItem","isGroundItem","Header","defaultMaximised","show","popout","close","maximise","minimise","tabDropdown","copyContent","count","result","defaultActiveItemIndex","maximised","activeItemIndex","header","defaultReorderEnabled","resolveComponentTypeName","componentType","reorderEnabled","title","componentState","copyComponentType","isChildItemConfig","config","isRootItemConfig","create","rootItemConfig","Settings","Dimensions","isPopout","constrainDragToContainer","popoutWholeStack","blockedPopoutsThrowError","closePopoutsOnUnload","responsiveMode","tabOverlapAllowance","reorderOnTabMenuClick","tabControlOffset","popInOnClose","borderWidth","borderGrabWidth","defaultMinItemHeight","defaultMinItemHeightUnit","defaultMinItemWidth","defaultMinItemWidthUnit","headerHeight","dragProxyWidth","dragProxyHeight","dock","root","openPopouts","dimensions","settings","resolved","copyOpenPopouts","minifyConfig","layoutConfig","unminifyConfig","minifiedConfig","Window","parentId","indexInParent","window","ExternalError","ConfigurationError","node","PopoutBlockedError","ApiError","BindError","initialised","infosObject","PopoutCannotBeCreatedWithGroundItemConfig","default","PleaseRegisterAConstructorFunction","ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned","ComponentIsAlreadyRegistered","ComponentIsNotVirtuable","VirtualComponentDoesNotHaveRootHtmlElement","ItemConfigIsNotTypeComponent","InvalidNumberPartInSizeString","UnknownUnitInSizeString","UnsupportedUnitInSizeString","idCount","Object","infos","info","i18nStrings","ItemConfig","HeaderedItemConfig","StackItemConfig","ComponentItemConfig","RowOrColumnItemConfig","RootItemConfig","LayoutConfig","PopoutLayoutConfig","parseSize","sizeString","allowableSizeUnits","numericPart","digitsPart","firstNonNumericCharPart","firstNonDigitPart","trimStart","firstNonDigitPartIndex","gotDecimalPoint","substring","trim","splitStringAtFirstNonNumericChar","Number","isNaN","includes","formatSize","formatUndefinableSize","resolve","rowAndColumnChildLegacySizeDefault","JSON","stringify","resolveContent","resolveId","resolveSize","resolveMinSize","minWidth","minHeight","minWidthDefined","calculateSizeWidthHeightSpecificationType","isGround","isRow","isColumn","isStack","isComponent","hasHeaders","resolveIdAndMaximised","legacyId","legacyMaximised","idx","findIndex","splice","childItemConfig","fromResolvedContent","resolvedContent","resolvedContentConfig","fromResolved","resolvedConfig","componentName","componentTypeToTitle","contentConfig","childItemConfigs","legacySizeDefault","widthOrHeightSpecifiedAtLeastOnce","sizeSpecifiedAtLeastOnce","sizeWidthHeightSpecificationType","resolvedChildItemConfig","fromResolvedOrUndefined","resolvedItemConfig","resolveDefaultMinItemHeight","resolveDefaultMinItemWidth","resolvedDimensions","labels","showPopoutIcon","popin","showMaximiseIcon","showCloseIcon","resolveOpenPopouts","fromResolvedArray","isResolved","configOrResolvedConfig","popoutConfigs","resolvedArray","resolvedOpenPopoutCount","resolvedOpenPopout","resolvedWindow","popoutConfig","EventEmitter","_allEventSubscriptions","_subscriptionsMap","Map","unbind","this","removeEventListener","trigger","emit","tryBubbleEvent","name","args","eventName","subcriptions","get","slice","subscription","emitAllEvent","emitUnknown","subs","emitBaseBubblingEvent","event","BubblingEvent","emitUnknownBubblingEvent","callback","unknownCallback","removeUnknownEventListener","off","addEventListener","addUnknownEventListener","on","ALL_EVENT","push","subscriptions","set","removeSubscription","indexOf","allEventSubscriptionsCount","unknownArgs","unshift","allEventSubcriptions","headerClickEventName","headerTouchStartEventName","_name","_target","_isPropagationStopped","origin","isPropagationStopped","stopPropagation","ClickBubblingEvent","_mouseEvent","mouseEvent","TouchStartBubblingEvent","_touchEvent","touchEvent","BrowserPopout","_config","_initialWindowSize","_layoutManager","_isInitialised","_popoutWindow","createWindow","toConfig","glInstanceConfig","getGlInstance","saveLayout","screenX","screenLeft","screenY","screenTop","__glInstance","getWindow","closeWindow","e","popIn","parentItem","copiedRoot","groundItem","getItemsByPopInParentId","contentItems","newContentItem","createAndInitContentItem","addChild","_onClose","url","createUrl","floor","features","serializeWindowFeatures","innerWidth","innerHeight","menubar","toolbar","location","personalbar","resizable","scrollbars","status","globalThis","open","positionWindow","passive","_checkReadyInterval","setInterval","checkReady","isInitialised","onInitialised","clearInterval","windowOptions","windowOptionsString","join","storageKey","localStorage","setItem","getErrorMessage","URL","href","searchParams","moveTo","focus","setTimeout","HeaderButton","_header","label","cssClass","_pushEvent","_clickEventListener","ev","onClick","_touchStartEventListener","onTouchStart","_element","document","createElement","classList","add","destroy","controlsContainerElement","appendChild","parentNode","removeChild","DragListener","_eElement","extraAllowableChildTargets","_pointerTracking","_pointerDownEventListener","onPointerDown","_pointerMoveEventListener","onPointerMove","_pointerUpEventListener","onPointerUp","_timeout","_allowableTargets","_oDocument","_eBody","body","_nDelay","_nDistance","_nX","_nY","_nOriginalX","_nOriginalY","_dragging","checkRemovePointerTrackingEventListeners","cancelDrag","processDragStop","oEvent","isPrimary","coordinates","getPointerCoordinates","processPointerDown","x","y","startDrag","err","console","error","processDragMove","preventDefault","dragEvent","pageX","pageY","abs","clearTimeout","remove","querySelector","setProperty","Tab","_componentItem","_closeEvent","_focusEvent","_dragStartEvent","_isActive","_tabClickListener","onTabClickDown","_tabTouchStartListener","onTabTouchStart","_closeClickListener","onCloseClick","_closeTouchStartListener","onCloseTouchStart","_dragStartListener","onDragStart","_contentItemDestroyListener","onContentItemDestroy","_tabTitleChangedListener","setTitle","_titleElement","_closeElement","enableReorder","setTab","isActive","componentItem","contentItem","titleElement","closeElement","_dragListener","disableReorder","innerText","setActive","setBlurred","setFocused","button","notifyFocus","notifyClose","TabsContainer","_componentRemoveEvent","_componentFocusEvent","_componentDragStartEvent","_dropdownActiveChangedEvent","_tabs","_lastVisibleTabIndex","_dropdownActive","_dropdownElement","tabs","tabCount","lastVisibleTabIndex","dropdownElement","dropdownActive","createTab","tab","item","handleTabCloseEvent","handleTabFocusEvent","dragListener","handleTabDragStartEvent","childNodes","insertBefore","removeTab","processActiveComponentChanged","newActiveComponentItem","activeIndex","activeTab","j","updateTabSizes","availableWidth","activeComponentItem","dropDownActive","tryUpdateTabSizes","cumulativeTabWidth","tabOverlapAllowanceExceeded","tabElement","parentElement","tabMarginRight","getComputedStyle","marginRight","visibleTabWidth","activeTabMarginRight","zIndex","marginLeft","overlap","showAdditionalTabsDropdown","hideAdditionalTabsDropdown","_parent","_configClosable","_getActiveComponentItemEvent","closeEvent","_popoutEvent","_maximiseToggleEvent","_clickEvent","_touchStartEvent","_clickListener","_touchStartListener","_rowColumnClosable","_closeButton","_popoutButton","_tabsContainer","handleTabInitiatedComponentRemoveEvent","handleTabInitiatedComponentFocusEvent","handleTabInitiatedDragStartEvent","processTabDropdownActiveChanged","_show","_popoutEnabled","popoutEnabled","_popoutLabel","popoutLabel","_maximiseEnabled","maximiseEnabled","_maximiseLabel","maximiseLabel","_minimiseEnabled","minimiseEnabled","_minimiseLabel","minimiseLabel","_closeEnabled","closeEnabled","_closeLabel","closeLabel","_tabDropdownEnabled","tabDropdownEnabled","_tabDropdownLabel","tabDropdownLabel","setSide","side","_canRemoveComponent","_controlsContainerElement","_documentMouseUpListener","_tabControlOffset","_tabDropdownButton","handleButtonPopoutEvent","_maximiseButton","handleButtonMaximiseToggleEvent","_side","leftRightSided","_leftRightSided","layoutManager","parent","tabsContainerElement","setRowColumnClosable","updateClosability","len","applyFocusedValue","processMaximised","setAttribute","processMinimised","notifyClick","notifyTouchStart","ComponentContainer","_updateItemConfigEvent","_showEvent","_hideEvent","_blurEvent","_stackMaximised","_width","_height","_visible","_isShownWithZeroDimensions","_componentType","_isClosable","_initialState","_state","_boundComponent","bindComponent","updateElementPositionPropertyFromBoundComponent","virtual","_tab","isHidden","state","initialState","releaseComponent","stateRequestEvent","getElement","hide","suppressEvent","blur","setSize","ancestorItem","ancestorChildItem","direction","currentSize","percentage","delta","ancestorItemContentItem","updateSize","replaceComponent","virtualVisibilityChangeRequiredEvent","virtualRectingRequiredEvent","fireBeforeVirtualRectingEvent","fireAfterVirtualRectingEvent","setBaseLogicalZIndex","getState","extendState","extendedState","setState","setVisibility","setSizeToNodeSize","emitShow","emitHide","setLogicalZIndex","logicalZIndex","_logicalZIndex","notifyVirtualZIndexChangeRequired","enterDragMode","exitDragMode","enterStackMaximised","exitStackMaximised","force","addVirtualSizedContainerToLayoutManager","checkShownFromZeroDimensions","notifyVirtualRectingRequired","virtualZIndexChangeRequiredEvent","defaultZIndex","position","beginVirtualSizedContainerAdding","addVirtualSizedContainer","endVirtualSizedContainerAdding","unbindComponent","ContentItem","_popInParentIds","_type","_id","_pendingEventPropagations","_throttledEvents","_contentItems","createContentItems","popInParentIds","isComponentParentableItem","keepChild","suspendResize","setParent","init","replaceChild","oldChild","newChild","destroyOldChild","browserPopout","createPopoutFromContentItem","calculateConfigContent","highlightDropZone","area","dropTargetIndicator","highlightArea","onDrop","beginSizeInvalidation","endSizeInvalidation","getElementArea","rect","getBoundingClientRect","scrollTop","scrollLeft","x1","y1","x2","y2","surface","addPopInParentId","initContentItems","updateContentItemsSize","createContentItem","propagateEvent","scheduleEventPropagationToLayoutManager","requestAnimationFrame","propagateEventToLayoutManager","ComponentItem","_parentItem","_focused","_reorderEnabled","applyUpdatableConfig","_initialWantMaximise","containerElement","_container","handleUpdateItemConfigEvent","initialWantMaximise","container","headerConfig","_headerConfig","_title","focused","updateNodeSize","setActiveComponentItem","setFocusedComponentItem","ComponentParentableItem","setFocusedValue","Stack","_headerSideChanged","_resizeListener","handleResize","_maximisedListener","handleMaximised","_minimisedListener","handleMinimised","layoutHeaderConfig","configContent","componentHeaderConfig","_initialActiveItemIndex","_maximisedEnabled","headerSettings","getActiveComponentItem","handlePopoutEvent","toggleMaximise","handleHeaderClickEvent","handleHeaderTouchStartEvent","handleHeaderComponentRemoveEvent","handleHeaderComponentFocusEvent","handleHeaderComponentStartDragEvent","_childElementContainer","setupHeaderPosition","childElementContainer","headerShow","headerSide","headerLeftRightSided","contentAreaDimensions","_contentAreaDimensions","isMaximised","maximisedStack","stackParent","contentItemCount","setActiveContentItem","suppressFocusEvent","_activeComponentItem","emitStateChangedEvent","getActiveContentItem","focusActiveContentItem","newComponent","newItem","addComponent","addItem","checkMinimiseMaximisedStack","stackWillBeDeleted","newActiveComponentIdx","setMaximisedStack","createHeaderConfig","_dropSegment","resetHeaderDropZone","_dropIndex","isVertical","isHorizontal","hasCorrectParent","rowOrColumn","segment","hoverArea","highlightHeaderDropZone","highlightBodyDropZone","getArea","headerArea","contentArea","contentWidth","contentHeight","positionHeader","visibleTabsLength","tabsContainerElementChildNodes","visibleTabElements","tabIndex","visibleTabElement","tabDropPlaceholder","headerRect","headerTop","headerLeft","tabTop","tabLeft","tabWidth","isAboveTab","tabRect","tabRectTop","tabRectLeft","insertAdjacentElement","min","tabDropPlaceholderRect","tabDropPlaceholderRectTop","tabDropPlaceholderRectLeft","tabDropPlaceholderRectWidth","placeHolderTop","clientHeight","bubblingEvent","startComponentDrag","DragProxy","_originalParent","_area","_lastValidArea","offsetX","offsetY","onDrag","createDragProxyElements","_componentItemFocused","setDimensions","determineMinMaxXY","calculateItemAreas","setDropPosition","initialX","initialY","headerElement","tabsElement","_proxyContainerElement","_sided","insertAdjacentText","_minX","_minY","_maxX","_maxY","ceil","droppedComponentItem","Splitter","_isVertical","_size","grabSize","_grabSize","dragHandleElement","handleExcessSize","handleExcessPos","RowOrColumn","_rowOrColumnParent","_splitter","_splitterSize","_splitterGrabSize","_isColumn","_dimension","_splitterPosition","_splitterMinPosition","_splitterMaxPosition","_configType","createdItem","splitterElement","createSplitter","max","newItemSize","indexedContentItem","itemSize","splitterIndex","childItem","calculateRelativeSizes","setAbsoluteSizes","absoluteSizes","calculateAbsoluteSizes","additionalPixel","itemSizes","crossAxisSize","totalSplitterSize","elementWidth","elementHeight","totalSize","totalAssigned","total","itemsWithFractionalSize","totalFractionalSize","round","fractionalAllocatedSize","respectMinItemSize","minItemSize","calculateContentItemMinSize","totalOverMin","totalUnderMin","entriesOverMin","allEntries","entry","reducePercent","remainingSize","reducedSize","splitter","onSplitterDrag","onSplitterDragStop","onSplitterDragStart","getSplitItems","before","after","calculateContentItemsTotalMinSize","totalMinSize","items","beforeWidth","afterSize","beforeMinSize","afterMinSize","offset","offsetPixels","sizeBefore","sizeAfter","splitterPositionInRange","totalRelativeSize","getElementDimensionSize","dimension","getElementWidth","getElementHeight","setElementDimensionSize","GroundItem","_containerElement","prev","previousSibling","lastChild","Element","contains","loadRoot","clearRoot","rootContentItem","loadComponentAsRoot","createSideAreas","oppositeSides","Area","sibling","validateDocking","getAllContentItems","deepGetAllContentItems","getConfigMaximisedItems","deepFilterContentItems","popInParentId","checkAcceptFtn","DragSource","_extraAllowableChildTargets","_componentTypeOrFtn","_componentState","_dummyGroundContainer","dummyRootItemConfig","_dummyGroundContentItem","createDragListener","removeDragListener","onDragStop","dragSourceItemConfig","ftnDragSourceItemConfig","isDragSourceComponentItemConfig","dragProxy","transitionIndicator","transitionElements","DropTargetIndicator","innerElement","margin","TransitionIndicator","_toElement","_fromDimensions","_totalAnimationDuration","_animationStartTime","fromElement","toElement","nextAnimationFrame","measure","EventHub","_childEventListener","childEvent","onEventFromChild","ChildEventName","emitUserBroadcast","handleUserBroadcastEvent","isSubWindow","propagateToParent","propagateToThisAndSubtree","detail","eventInit","bubbles","cancelable","CustomEvent","opener","dispatchEvent","childGl","eventHub","LayoutManager","parameters","resizeWithContainerAutomatically","resizeDebounceInterval","resizeDebounceExtendedWhenPossible","_groundItem","_openPopouts","_dropTargetIndicator","_transitionIndicator","_itemAreas","_maximisePlaceholder","createMaximisePlaceElement","_tabDropPlaceholder","createTabDropPlaceholderElement","_dragSources","_updatingColumnsResponsive","_firstLoad","_eventHub","_virtualSizedContainers","_virtualSizedContainerAddingBeginCount","_sizeInvalidationBeginCount","_resizeObserver","ResizeObserver","handleContainerResize","_windowBeforeUnloadListener","onBeforeUnload","_windowBeforeUnloadListening","_maximisedStackBeforeDestroyedListener","cleanupBeforeMaximisedStackDestroyed","_constructorOrSubWindowLayoutConfig","constructorOrSubWindowLayoutConfig","rootItem","focusedComponentItem","_focusedComponentItem","_maximisedStack","deprecatedConstructor","closeAllOpenPopouts","disconnect","checkClearResizeTimeout","dragSource","subWindowRootConfig","setContainer","updateSizeFromContainer","resolvedLayoutConfig","checkLoadedLayoutMaximiseItem","observe","adjustColumnsResponsive","loadLayout","createSubWindows","groundContent","reconcilePopoutWindows","clear","newComponentAtLocation","locationSelectors","addComponentAtLocation","addItemAtLocation","newItemAtLocation","defaultLocationSelectors","findFirstLocation","addIdx","updateRootSize","createContentItemFromConfig","findFirstComponentItemById","findFirstContentItemTypeByIdRecursive","createPopout","itemConfigOrContentItem","positionAndSize","createPopoutFromItemConfig","child","windowLeft","windowTop","offsetLeft","offsetTop","beforeVirtualRectingEvent","afterVirtualRectingEvent","popoutLayoutConfig","createPopoutFromPopoutLayoutConfig","configWindow","initialWindow","newDragSource","componentTypeOrItemConfigCallback","removeDragSource","array","removeFromArray","focusComponent","clearComponentFocus","suppressEvents","newFocusedParentItem","oldFocusedItem","oldFocusedParentItem","processMinimiseMaximisedStack","processMaximiseStack","matchingArea","smallestSurface","Infinity","allContentItems","stackContentAreaDimensions","groundArea","configMaximisedItems","prepend","closed","processResizeWithDebounce","_resizeTimeoutId","bodyElement","documentElement","padding","overflow","useResponsiveLayout","columnCount","minItemWidth","stackColumnCount","allStacks","getAllStacks","firstStackContainer","addChildContentItemsToContainer","alwaysResponsiveMode","onLoadResponsiveModeAndFirst","stacks","findAllStacksRecursive","findFirstContentItemType","findFirstContentItemTypeRecursive","foundContentItem","selectors","selector","findLocation","selectorIndex","typeId","parentContentItems","parentContentItemCount","tryCreateLocationFromParentItem","groundContentItems","afterFocusedItemIfPossibleLocationSelectors","VirtualLayout","configOrOptionalContainer","containerOrBindComponentEventHandler","unbindComponentEventHandler","skipInit","createLayoutManagerConstructorParameters","_bindComponentEventHanlderPassedInConstructor","_creationTimeoutPassed","bindComponentEvent","unbindComponentEvent","readyState","clearHtmlAndAdjustStylesForSubWindow","headElement","head","appendNodeLists","querySelectorAll","listIdx","appendNodeList","nodeIdx","innerHTML","visibility","checkAddDefaultPopinButton","popInButtonElement","iconElement","bgElement","getComponentEvent","releaseComponentEvent","subWindowChecked","windowConfigKey","windowConfigStr","getItem","removeItem","minifiedWindowConfig","parse","HTMLElement","golden","_componentTypesMap","_registeredComponentMap","_virtuableComponentMap","_containerVirtualRectingRequiredEventListener","handleContainerVirtualRectingRequiredEvent","_containerVirtualVisibilityChangeRequiredEventListener","handleContainerVirtualVisibilityChangeRequiredEvent","_containerVirtualZIndexChangeRequiredEventListener","handleContainerVirtualZIndexChangeRequiredEvent","registerComponent","componentConstructorOrFactoryFtn","componentConstructor","registerComponentConstructor","componentFactoryFtn","registerComponentFactoryFunction","typeName","factoryFunction","componentFactoryFunction","registerComponentFunction","registerGetComponentConstructorCallback","_getComponentConstructorFtn","warn","getRegisteredComponentTypeNames","typeNamesIterableIterator","getComponentInstantiator","instantiator","virtuableComponent","componentRootElement","rootHtmlElement","absolutePosition","ensureElementPositionAbsolute","delete","_goldenLayoutBoundingClientRect","rootElement","containerBoundingClientRect","template","concat","minItemHeight"],"sourceRoot":""}